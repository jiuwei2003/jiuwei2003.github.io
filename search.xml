<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test_my_site</title>
      <link href="/2024/05/17/test-my-site/"/>
      <url>/2024/05/17/test-my-site/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/17/hello-world/"/>
      <url>/2024/05/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2024/05/12/markdown/dan-li-mo-shi/"/>
      <url>/2024/05/12/markdown/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><span id="more"></span><p>单例模式有饿汉式单例模式、懒汉式单例模式和双检锁单例模式三种。</p><h3 id="单例模式的好处"><a href="#单例模式的好处" class="headerlink" title="单例模式的好处"></a>单例模式的好处</h3><blockquote><p>单例模式确保一个类只有一个实例对象，并提供了一个全局访问点来访问这个实例</p><p>这对于需要控制资源使用或需要共享资源的情况非常有用，比如数据库连接池，通过单例模式，可以避免对资源的重复创建和销毁，从而提高资源利用率和系统性能。</p></blockquote><p><strong>饿汉式</strong>：线程安全，一开始就初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="comment">//单例模式。保证一个类只有全局示例唯一 避免了创建对象的开销 。提供一个供外面获取对象的方法</span></span><br><span class="line">    <span class="comment">//饿汗式 线程安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private不让外界创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public为外界访问</span></span><br><span class="line">    <span class="keyword">public</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>懒汉式</strong>：非线程安全，延迟初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="comment">//单例模式。保证一个类只有全局示例唯一 避免了创建对象的开销 。提供一个供外面获取对象的方法</span></span><br><span class="line">    <span class="comment">//懒汉式  线程不安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private不让外界创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public为外界访问</span></span><br><span class="line">    <span class="keyword">public</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="literal">null</span>) {</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>双重检验锁机制</strong>：线程安全，延迟初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="comment">//单例模式。保证一个类只有全局示例唯一 避免了创建对象的开销 。提供一个供外面获取对象的方法</span></span><br><span class="line">    <span class="comment">//双重检验锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private不让外界创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public为外界访问</span></span><br><span class="line">    <span class="keyword">public</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">//获取锁去创建对象</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class){</span><br><span class="line">                <span class="comment">//避免获取锁之后其它线程已经创建了对象</span></span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="literal">null</span>) {</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode</title>
      <link href="/2024/05/08/markdown/jian-zhi-offer/"/>
      <url>/2024/05/08/markdown/jian-zhi-offer/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><span id="more"></span><h2 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></h2><p>找出数组中重复的数字。<br>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3 </span><br></pre></td></tr></tbody></table></figure><p><strong>限制：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 &lt;= n &lt;= 100000</span><br></pre></td></tr></tbody></table></figure><p><strong>解答：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRepeatNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line"><span class="comment">// 哈希表/Set</span></span><br><span class="line"><span class="comment">//时间复杂度 O(N) ： 遍历数组使用 O(N) ，HashSet 添加与查找元素皆为 O(1)</span></span><br><span class="line"><span class="comment">//空间复杂度 O(N) ： HashSet 占用 O(N) 大小的额外空间。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// //初始化HashSet集合(没有顺序和不重复)</span></span><br><span class="line">        <span class="comment">//  HashSet&lt;Integer&gt; hash = new HashSet&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//  //遍历数组，集合中有num值代表重复，没有添加到集合中</span></span><br><span class="line">        <span class="comment">//  for(Integer num : nums){</span></span><br><span class="line">        <span class="comment">//      if(hash.contains(num)) return num;</span></span><br><span class="line">        <span class="comment">//      hash.add(num);</span></span><br><span class="line">        <span class="comment">//  }</span></span><br><span class="line">        <span class="comment">//  return -1;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 原地交换</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(N) ： 遍历数组使用 O(N) ，每轮遍历的判断和交换操作使用 O(1) 。</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1) ： 使用常数复杂度的额外空间</span></span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;nums.length){</span><br><span class="line">            <span class="comment">//下标和对应的值相等，直接i++，向后移一位</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i]==i){</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//如果下标对应的值和这个值所对应的下标的值相等，就说明重复，直接返回nums[i]</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i]==nums[nums[i]]) <span class="keyword">return</span> nums[i];</span><br><span class="line">            <span class="comment">//如果不相等，则下标对应的值和这个值所对应的下标值进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            nums[i] = nums[temp];</span><br><span class="line">            nums[temp] = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h2><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "We are happy."</span><br><span class="line">输出："We%20are%20happy."</span><br></pre></td></tr></tbody></table></figure><p><strong>限制：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= s 的长度 &lt;= 10000</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution {</span><br><span class="line">    /*</span><br><span class="line">    1.遍历列表 s 中的每个字符 c ：</span><br><span class="line">    当 c 为空格时：向 res 后添加字符串 "%20" ；</span><br><span class="line">    当 c 不为空格时：向 res 后添加字符 c ；</span><br><span class="line">    将列表 res 转化为字符串并返回，时间复杂度O(n)，空间复杂度O(n)</span><br><span class="line">    2.或者直接使用replaceAll(原字符，新字符);</span><br><span class="line">    */</span><br><span class="line">    public String replaceSpace(String s) {</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        for (Character c: s.toCharArray()</span><br><span class="line">        ) {</span><br><span class="line">            if (c == ' ') {</span><br><span class="line">                sb.append('%').append('2').append('0');</span><br><span class="line">            } else {</span><br><span class="line">                sb.append(c);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return sb.toString();</span><br><span class="line">        // return s.replaceAll(" ","%20");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a></h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></tbody></table></figure><p><strong>限制：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= 链表长度 &lt;= 10000</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20230903124123860.png" alt="image-20230903124123860"></p><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704 二分查找"></a>704 二分查找</h2><p><strong>前提是数组为有序数组</strong>，同时题目还强调<strong>数组中无重复元素</strong>，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的，这些都是使用二分法的前提条件</p><p>区间的定义这就决定了二分法的代码应该如何写，<strong>因为定义target在[left, right]区间，所以有如下两点：</strong></p><ul><li>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</li><li>if (nums[middle] &gt; target) right 要赋值为 middle - 1，因为当前这个nums[middle]一定不是target（已经确定了这个middle不是target），那么接下来要查找的左区间（就不用判断这个值了，判断前一个值就ok）结束下标位置就是 middle - 1</li></ul><p>定义 target 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。</p><p>有如下两点：</p><ul><li>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</li><li>if (nums[middle] &gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="keyword">if</span>(target&lt;nums[<span class="number">0</span>] || target &gt; nums[nums.length-<span class="number">1</span>]){</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>; <span class="comment">//左闭右闭</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right) <span class="comment">//合法</span></span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> right+(left-right)/<span class="number">2</span>;  <span class="comment">//防止数组溢出</span></span><br><span class="line">            <span class="comment">// 中间值大于目标值，取前一段进行比较</span></span><br><span class="line">            <span class="keyword">if</span>(nums[middle] &gt; target)</span><br><span class="line">            {</span><br><span class="line">                right = middle-<span class="number">1</span>;</span><br><span class="line">            } </span><br><span class="line">            <span class="comment">// 中间值小于目标值，取后一段进行比较</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &lt; target)</span><br><span class="line">            {</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 中间值和目标值相等</span></span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27 移除元素"></a>27 移除元素</h2><p>暴力破解 </p><ul><li><p>时间复杂度是O(n^2)</p></li><li><p>空间复杂度：O(1)</p></li></ul><p><a href="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95.gif">https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95.gif</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *暴力破解</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++){</span><br><span class="line">            <span class="comment">//如果下标对应的值等于目标值，就将后面元素向前移</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val){</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;size;j++){</span><br><span class="line">                    nums[j-<span class="number">1</span>] = nums[j];</span><br><span class="line">                }</span><br><span class="line">                i--;  <span class="comment">// 因为下标i以后的数值都向前移动了一位，所以i也向前移动一</span></span><br><span class="line">                size--;<span class="comment">// 此时数组的大小-1</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>双指针法</p><p><a href="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif">https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif</a></p><ul><li>时间复杂度 O(n)</li><li>空间复杂度O(1)</li><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> fast=<span class="number">0</span>;fast&lt;size;fast++){</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val){ </span><br><span class="line">                <span class="comment">//快指针指向的元素等于目标值，就不能将元素放到慢指针数组里</span></span><br><span class="line">                <span class="comment">//快指针指向的元素不等于目标值，就可以放到慢指针数组里</span></span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="977有序数组的平方"><a href="#977有序数组的平方" class="headerlink" title="977有序数组的平方"></a>977有序数组的平方</h2><p>双指针法</p><ul><li>时间复杂度 O(n)</li><li>空间复杂度O(n)</li></ul><p>数组其实是有序的， 只不过负数平方之后可能成为最大数了。</p><p>那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p><p>此时可以考虑双指针法了，i指向起始位置，j指向终止位置。</p><p>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。</p><p>如果<code>A[i] * A[i] &lt; A[j] * A[j]</code> 那么<code>result[k--] = A[j] * A[j];</code> 。</p><p>如果<code>A[i] * A[i] &gt;= A[j] * A[j]</code> 那么<code>result[k--] = A[i] * A[i];</code> 。</p><p>如动画所示：</p><p><a href="https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif">https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) {</span><br><span class="line">         <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">         <span class="comment">//可以分为两个指针，然后加一个数组   时间复杂度是O(n)</span></span><br><span class="line">         <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">         <span class="type">int</span> right=size;</span><br><span class="line">         <span class="type">int</span>[] target = <span class="keyword">new</span> <span class="title class_">int</span>[size+<span class="number">1</span>];</span><br><span class="line">         <span class="type">int</span> index=target.length-<span class="number">1</span>; <span class="comment">//新数组最后一个值</span></span><br><span class="line">        </span><br><span class="line">         <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">         {</span><br><span class="line">             <span class="comment">//左边的乘积大于右边，就将左边元素加入到新数组最后一个元素，然后新数组最后一位下标需要往前移一位，最左边的元素下标也需要往前移一位</span></span><br><span class="line">             <span class="keyword">if</span>(nums[left]*nums[left]&gt;nums[right]*nums[right])</span><br><span class="line">             {</span><br><span class="line">                 target[index--] = nums[left]*nums[left];</span><br><span class="line">                 left++;</span><br><span class="line">             }</span><br><span class="line">             <span class="keyword">else</span> </span><br><span class="line">             {</span><br><span class="line">                 target[index--] = nums[right]*nums[right];</span><br><span class="line">                 right--;</span><br><span class="line">             }</span><br><span class="line">         }</span><br><span class="line">         <span class="keyword">return</span> target;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>暴力破解</p><ul><li>时间复杂度 O(n+nlog(n))</li><li>空间复杂度O(1)</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) {</span><br><span class="line"><span class="comment">//或者就是循环先给每一个元素平方，然后排序  时间复杂度是O(n+logn)</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">            nums[i] = nums[i]*nums[i];</span><br><span class="line">         }</span><br><span class="line">         Arrays.sort(nums);</span><br><span class="line">         <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="209长度最小的子数组"><a href="#209长度最小的子数组" class="headerlink" title="209长度最小的子数组"></a>209长度最小的子数组</h2><p>滑动窗口</p><p>首先要思考 如果用一个for循环，那么应该表示 滑动窗口的起始位置，还是终止位置。</p><p>如果只用一个for循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？</p><p>此时难免再次陷入 暴力解法的怪圈。</p><p>所以 只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。</p><p>那么问题来了， 滑动窗口的起始位置如何移动呢？</p><p>这里还是以题目中的示例来举例，s=7， 数组是 2，3，1，2，4，3，来看一下查找的过程：</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif" alt="209.长度最小的子数组"></p><p>最后找到 4，3 是最短距离。</p><p>其实从动画中可以发现滑动窗口也可以理解为双指针法的一种！只不过这种解法更像是一个窗口的移动，所以叫做滑动窗口更适合一些。</p><p>在本题中实现滑动窗口，主要确定如下三点：</p><ul><li>窗口内是什么？</li><li>如何移动窗口的起始位置？</li><li>如何移动窗口的结束位置？</li></ul><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><p>解题的关键在于 窗口的起始位置如何移动，如图所示：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210312160441942.png" alt="leetcode_209"></p><p>可以发现<strong>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)。</strong></p><ul><li>时间复杂度 O(n)</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> result=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.length;j++) <span class="comment">//j代表终止位置</span></span><br><span class="line">        {</span><br><span class="line">            sum+=nums[j];</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target) <span class="comment">//知道和大于等于目标值</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//长度为</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">slength</span> <span class="operator">=</span> j-i+<span class="number">1</span>; <span class="comment">// 取子序列的长度</span></span><br><span class="line">                result = Math.min(result,slength);</span><br><span class="line">                <span class="comment">//然后和需要减去起始位置的元素，因为往前移了一位</span></span><br><span class="line">                sum -= nums[i++];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果result没有赋值就返回0 否则返回result</span></span><br><span class="line">        <span class="keyword">return</span> result==Integer.MAX_VALUE?<span class="number">0</span>:result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>暴力破解</p><ul><li>时间复杂度为O(n^2)</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> result=Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){ <span class="comment">//起始位置</span></span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;nums.length;j++){</span><br><span class="line">        sum+=nums[j];</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=target){</span><br><span class="line">            <span class="type">int</span> <span class="variable">slength</span> <span class="operator">=</span> j-i+<span class="number">1</span>; <span class="comment">// 取子序列的长度</span></span><br><span class="line">            result = Math.min(result,slength);</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//找到比他大的元素然后就去i++,找下一个长度</span></span><br><span class="line">        }</span><br><span class="line">       }</span><br><span class="line">    }</span><br><span class="line">           <span class="keyword">return</span> result==Integer.MAX_VALUE?<span class="number">0</span>:result;</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="59螺旋矩阵"><a href="#59螺旋矩阵" class="headerlink" title="59螺旋矩阵"></a>59螺旋矩阵</h2><p>而求解本题依然是要坚持循环不变量原则。</p><p>模拟顺时针画矩阵的过程:</p><ul><li>填充上行从左到右</li><li>填充右列从上到下</li><li>填充下行从右到左</li><li>填充左列从下到上</li></ul><p>由外向内一圈一圈这么画下去。</p><p>这里一圈下来，我们要画每四条边，这四条边怎么画，每画一条边都要坚持一致的左闭右开，或者左开右闭的原则，这样这一圈才能按照统一的规则画下来。</p><p>那么我按照左闭右开的原则，来画一圈，大家看一下：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922102236.png" alt="img"></p><p>这里每一种颜色，代表一条边，我们遍历的长度，可以看出每一个拐角处的处理规则，拐角处让给新的一条边来继续画。</p><p>这也是坚持了每条边左闭右开的原则。</p><p>一些同学做这道题目之所以一直写不好，代码越写越乱。</p><p>就是因为在画每一条边的时候，一会左开右闭，一会左闭右闭，一会又来左闭右开，岂能不乱。</p><p>代码里处理的原则也是统一的左闭右开。</p><p>需要循环几次，可以将行在中间分割两半，一半看能分成几层</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//循环次数</span></span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span><span class="number">0</span>;<span class="comment">//开始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//打印数字</span></span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        <span class="keyword">while</span>(loop++&lt;n/<span class="number">2</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(j=start;j&lt;n-loop;j++)</span><br><span class="line">            res[start][j] = count++;</span><br><span class="line">            <span class="keyword">for</span>(i=start;i&lt;n-loop;i++)</span><br><span class="line">            res[i][j] = count++;     <span class="comment">//j=n-loop了 就是第一行的最后一个数</span></span><br><span class="line">            <span class="keyword">for</span>(j=j;j&gt;=loop;j--)</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">            <span class="keyword">for</span>(i=i;i&gt;=loop;i--)</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">            start++; <span class="comment">//循环之后，start++ 变为1行1列开始</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>) <span class="comment">//奇数，就将最后一个数放到最中间</span></span><br><span class="line">        res[start][start] = count;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h2><ul><li><strong>直接使用原来的链表来进行删除操作。</strong></li><li><strong>设置一个虚拟头结点在进行删除操作。</strong></li></ul><p>来看第一种操作：直接使用原来的链表来进行移除。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2021031609544922.png" alt="203_链表删除元素3"></p><p>移除头结点和移除其他节点的操作是不一样的，因为链表的其他节点都是通过前一个节点来移除当前节点，而头结点没有前一个节点。</p><p>所以头结点如何移除呢，其实只要将头结点向后移动一位就可以，这样就从链表中移除了一个头结点。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210316095512470.png" alt="203_链表删除元素4"></p><p>依然别忘将原头结点从内存中删掉。 <img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210316095543775.png" alt="203_链表删除元素5"></p><p>这样移除了一个头结点，是不是发现，在单链表中移除头结点 和 移除其他节点的操作方式是不一样，其实在写代码的时候也会发现，需要单独写一段逻辑来处理移除头结点的情况。</p><p>那么可不可以 以一种统一的逻辑来移除 链表的节点呢。</p><p>其实<strong>可以设置一个虚拟头结点</strong>，这样原链表的所有节点就都可以按照统一的方式进行移除了。</p><p>来看看如何设置一个虚拟头。依然还是在这个链表中，移除元素1。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210316095619221.png" alt="203_链表删除元素6"></p><p>这里来给链表添加一个虚拟头结点为新的头结点，此时要移除这个旧头结点元素1。</p><p>这样是不是就可以使用和移除链表其他节点的方式统一了呢？</p><p>来看一下，如何移除元素1 呢，还是熟悉的方式，然后从内存中删除元素1。</p><p>最后呢在题目中，return 头结点的时候，别忘了 <code>return dummyNode-&gt;next;</code>， 这才是新的头结点</p><ul><li>不使用虚拟头结点</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> public class ListNode {</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     ListNode next;</span></span><br><span class="line"><span class="comment">     ListNode() {}</span></span><br><span class="line"><span class="comment">     ListNode(int val) { this.val = val}</span></span><br><span class="line"><span class="comment">     ListNode(int val,ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="comment">//先不使用虚拟头结点</span></span><br><span class="line">        <span class="comment">//首先判断待删除元素是不是头结点</span></span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>&amp;&amp;head.val==val)  <span class="comment">//使用while因为  如果是 (1,1,1,1) 1需要一直删</span></span><br><span class="line">        {</span><br><span class="line">            head = head.next; <span class="comment">//就让头结点往后移</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//然后定义一个节点，用于存储head</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head; <span class="comment">//为什么不定义head-&gt;next 因为如果删除第二个元素，就不能找到第一个元素，然后指向下下一个指针</span></span><br><span class="line">        <span class="comment">//第二个开始</span></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>){</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>&amp;&amp;cur.next.val==val)</span><br><span class="line">        {</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">        }</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>使用虚拟头结点</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> public class ListNode {</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     ListNode next;</span></span><br><span class="line"><span class="comment">     ListNode() {}</span></span><br><span class="line"><span class="comment">     ListNode(int val) { this.val = val}</span></span><br><span class="line"><span class="comment">     ListNode(int val,ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//使用虚拟头结点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,head); <span class="comment">//定义一个虚拟头节点</span></span><br><span class="line"><span class="comment">// 将虚拟头结点指向head，这样方便后面做删除操作 让虚拟头结点和本身头节点联系起来</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> pre; <span class="comment">//不能是pre.next，因为没法删除head</span></span><br><span class="line">        <span class="comment">//第二个开始</span></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>){</span><br><span class="line">        <span class="keyword">if</span>(cur.next.val==val)</span><br><span class="line">        {</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            cur = cur.next;</span><br><span class="line">           }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pre.next;  <span class="comment">//它的下一个节点是头节点，因为头结点可能会被删除</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1379-找出克隆二叉树中的相同节点"><a href="#1379-找出克隆二叉树中的相同节点" class="headerlink" title="1379. 找出克隆二叉树中的相同节点"></a><strong><a href="https://leetcode.cn/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/">1379. 找出克隆二叉树中的相同节点</a><a href="https://leetcode.cn/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/"></a></strong></h2><p>思路：克隆树和原树数据一样，并且元素唯一，不会重复。原树和clone树同时遍历。原树节点等于target的话就返回clone对应节点</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> TreeNode <span class="title function_">getTargetCopy</span><span class="params">(<span class="keyword">final</span> TreeNode original, <span class="keyword">final</span> TreeNode cloned, <span class="keyword">final</span> TreeNode target)</span> {</span><br><span class="line">        <span class="keyword">if</span> (original == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 节点值等于target 返回cloned的节点 原树的值等于target 然后返回clone树的值</span></span><br><span class="line">        <span class="keyword">if</span> (original == target)</span><br><span class="line">            <span class="keyword">return</span> cloned;</span><br><span class="line">        <span class="comment">// 然后递归</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> getTargetCopy(original.left,cloned.left, target);</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> left; <span class="comment">// 去dfs左子树，然后找到后返回</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 肯定不会为null</span></span><br><span class="line">        <span class="keyword">return</span> getTargetCopy(original.right,cloned.right, target);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106. 从中序与后序遍历序列构造二叉树"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></h2><p>拆分中序，再拆分后续 左开右闭</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">//用于存放后序节点</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; map ;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> {</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//将后续节点加入到map里,以便好拿值 方便根据中节点进行分割</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;inorder.length;i++) {</span><br><span class="line">            map.put(inorder[i],i);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//起始值、终止值</span></span><br><span class="line">        <span class="keyword">return</span> dfs(inorder,<span class="number">0</span>,inorder.length,postorder,<span class="number">0</span>,postorder.length);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] inorder,<span class="type">int</span> startIn,<span class="type">int</span> endIn, <span class="type">int</span>[] postorder,<span class="type">int</span> startPost,<span class="type">int</span> endPost)</span> {</span><br><span class="line">        <span class="comment">//结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(startIn&gt;=endIn||startPost&gt;=endPost) { <span class="comment">// 不满足左闭右开，说明没有元素，返回空树</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//按照左闭右开进行分割</span></span><br><span class="line">        <span class="comment">// 找到后序遍历的最后一个元素在中序遍历中的位置</span></span><br><span class="line">        <span class="comment">//首先拿出后序遍历最后一个元素 然后去中序遍历进行分割</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rootIndex</span> <span class="operator">=</span>  map.get(postorder[endPost-<span class="number">1</span>]); <span class="comment">//根节点的位置</span></span><br><span class="line">        <span class="comment">//构造节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(inorder[rootIndex]); <span class="comment">//中序遍历里根节点</span></span><br><span class="line">        <span class="comment">//然后记录根节点左侧左子树长度 rootIndex-ednIn</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftLength</span> <span class="operator">=</span> rootIndex-startIn; <span class="comment">//左闭右开</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//然后进行递归 左树 左终止值是根节点的前面那个，因为是左闭右开 后序遍历左子树长度等于startPost+leftLength</span></span><br><span class="line">        root.left = dfs(inorder,startIn,rootIndex,postorder,startPost,startPost+leftLength); </span><br><span class="line">        <span class="comment">//右子树的起始值就是startpost+leftLength长度</span></span><br><span class="line">        root.right = dfs(inorder,rootIndex+<span class="number">1</span>,endIn,postorder,startPost+leftLength,endPost-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h2><p>首先确定参数和返回值 参数是操作的数组，起始值，终止值  返回值是root节点</p><p>确定终止的条件：终止值&lt;起始值就数组为null，直接返回空节点</p><p>中间过程：首先找出最大值和最大值所在的位置  让最大值作为根节点 用位置确定划分左右子树</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * TreeNode left;</span></span><br><span class="line"><span class="comment"> * TreeNode right;</span></span><br><span class="line"><span class="comment"> * TreeNode() {}</span></span><br><span class="line"><span class="comment"> * TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> * this.val = val;</span></span><br><span class="line"><span class="comment"> * this.left = left;</span></span><br><span class="line"><span class="comment"> * this.right = right;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> constructMaxTree(nums, <span class="number">0</span>, nums.length);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">constructMaxTree</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> begin, <span class="type">int</span> end)</span> {</span><br><span class="line">        <span class="keyword">if</span> (end - begin &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 等于1就将其作为根节点</span></span><br><span class="line">        <span class="keyword">if</span> (end - begin == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[begin]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 寻找最大值和索引位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> nums[begin];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> begin;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> begin + <span class="number">1</span>; i &lt; end; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; maxValue) {</span><br><span class="line">                maxValue = nums[i];</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去创建根</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(maxValue);</span><br><span class="line">        <span class="comment">// 去创建左子树</span></span><br><span class="line">        node.left = constructMaxTree(nums, begin, maxIndex);</span><br><span class="line">        node.right = constructMaxTree(nums, maxIndex + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h2><p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p><p>你需要在 BST 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p><p>思路：</p><p>dfs：递归搜索目标节点，遇到直接返回</p><p>迭代：因为是二叉搜索树，满足左小右大，小于根节点就向左，大于就向右寻找，找到就返回</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root.val == val)</span><br><span class="line">            <span class="keyword">return</span> root; <span class="comment">// 找到或者为null</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; val) { <span class="comment">// 小于向左</span></span><br><span class="line">            result = searchBST(root.left, val);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; val) <span class="comment">// 大于向右</span></span><br><span class="line">        {</span><br><span class="line">            result = searchBST(root.right, val);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//迭代</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span>(root.val&gt;val) <span class="comment">//小于 </span></span><br><span class="line">            root= root.left ;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;val)</span><br><span class="line">            root = root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h2><p>二叉搜索树的中序遍历是升序，我们将节点保存到数组中，然后判断一下数组是否是升序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * TreeNode left;</span></span><br><span class="line"><span class="comment"> * TreeNode right;</span></span><br><span class="line"><span class="comment"> * TreeNode() {}</span></span><br><span class="line"><span class="comment"> * TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> * this.val = val;</span></span><br><span class="line"><span class="comment"> * this.left = left;</span></span><br><span class="line"><span class="comment"> * this.right = right;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历二叉树是升序就是二叉搜索树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        isValid(root, list);</span><br><span class="line">        <span class="comment">// 然后判断是不是升序</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; list.size(); i++) {</span><br><span class="line">            <span class="comment">// ==重复的也为false</span></span><br><span class="line">            <span class="keyword">if</span> (list.get(i - <span class="number">1</span>) &gt;= list.get(i)) {</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历将其放到数组中</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">isValid</span><span class="params">(TreeNode root, List list)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>)</span><br><span class="line">            isValid(root.left, list);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>)</span><br><span class="line">            isValid(root.right, list);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在中序遍历的时候直接比较当前节点和前一节点的大小值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    TreeNode preNode ;  <span class="comment">//当前节点的前一个节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//null树也是二叉搜索树</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> isValidBST(root.left);</span><br><span class="line">        <span class="keyword">if</span>(!left) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不满足返回false</span></span><br><span class="line">        <span class="comment">//当前节点的值前一个节点的值小于等于 不是升序 返回false</span></span><br><span class="line">        <span class="keyword">if</span>(preNode!=<span class="literal">null</span> &amp;&amp; root.val&lt;=preNode.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//然后更新一下当前节点的值</span></span><br><span class="line">        preNode = root;</span><br><span class="line">        <span class="comment">//再遍历右子树</span></span><br><span class="line">        <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h2><p>双指针解法</p><p>因为数组是有序的，所以可以定义左右指针，相加大于target就right–，相反则left++，相等返回   O(n)</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) {</span><br><span class="line">        <span class="comment">// 双指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            <span class="comment">// 等于就返回下标</span></span><br><span class="line">            <span class="keyword">if</span> (numbers[left] + numbers[right] == target)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] { left+<span class="number">1</span>, right+<span class="number">1</span> };</span><br><span class="line">            <span class="comment">// 两者相加大于目标值，right--</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (numbers[left] + numbers[right] &gt; target)</span><br><span class="line">                right--;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] { <span class="number">0</span> };</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h2><p>首先进行排序，然后判断首位是否大于0，对i去重，sum进行上面判断，需要对left和right去重</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// 存放结果</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 先进行排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 第一个数大于0就不存在</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> resList;</span><br><span class="line">            <span class="comment">// 对i去重</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt; <span class="number">0</span>)</span><br><span class="line">                    right--; <span class="comment">// 大于0 往右移动</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</span><br><span class="line">                    left++; <span class="comment">// 小于0，往左移动</span></span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 加入到集合</span></span><br><span class="line">                    resList.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">// 对left去重 看是否和后面的那个相等</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>])</span><br><span class="line">                        left++;</span><br><span class="line">                    <span class="comment">// 对right去重 看是否和前面的那个相等</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>])</span><br><span class="line">                        right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></h2><p>思路双指针 找最大面积，初始化一个面积，左右指针，计算面积，更新最大面积，左边高度小就往左移，右边高度小就往右移动</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxA</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 初始面积</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> height.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左右未相遇</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> Math.min(height[left], height[right]) * (right - left); <span class="comment">// 面积就是两者的小的高乘以两者宽度</span></span><br><span class="line">            maxA = Math.max(area, maxA); <span class="comment">// 更新面积</span></span><br><span class="line">            <span class="comment">// 如果右边的小于左边的就将右边往左移</span></span><br><span class="line">            <span class="keyword">if</span> (height[right] &lt; height[left])</span><br><span class="line">                right--;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxA;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h2><p>双指针，计算sum的值是否大于target 大于的话则更新长度，将左指针的数剪掉判断是否还大于target，left需要++  在返回时也需要判断返回的长度是不是比初始的长度小于或者等于，满足则可直接返回，不行则返回0</p><p><strong>双指针在满足单调性的时候可以使用</strong></p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">//时间复杂度O(n) 空间复杂度O(1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">minSub</span> <span class="operator">=</span> nums.length+<span class="number">1</span>; <span class="comment">//最小的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;right&lt;nums.length;right++) {</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="comment">// //sum&gt;target 满足要求到不满足要求-&gt;单调性 满足单调性才可以使用双指针</span></span><br><span class="line">            <span class="comment">// while(sum-nums[left]&gt;=target) {</span></span><br><span class="line">            <span class="comment">//     sum =  sum - nums[left];</span></span><br><span class="line">            <span class="comment">//     left++;</span></span><br><span class="line">            <span class="comment">// }</span></span><br><span class="line">            <span class="comment">// if(sum&gt;=target)  minSub = Math.min(minSub,right-left+1);</span></span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target) {   <span class="comment">//为什么不需要判断left&lt;=right 因为相等的情况下减去左指针的数会为0，不满足正整数</span></span><br><span class="line">                <span class="comment">//然后去不断更新子数组的长度</span></span><br><span class="line">                minSub = Math.min(minSub,right-left+<span class="number">1</span>); <span class="comment">//模拟 right==left 代表是一个数，他的长度为1</span></span><br><span class="line">                <span class="comment">//然后减去左指针去判断是否还大于target</span></span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//ifminSUub小于等于初始长度，然后可以放心返回 else返回0  因为数组所有数加起来都不会大于target，它的最小长度就不会改变，初始的minSub就会大于nums.length</span></span><br><span class="line">        <span class="keyword">return</span> minSub &lt;= nums.length ? minSub:<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="713-乘积小于-K-的子数组"><a href="#713-乘积小于-K-的子数组" class="headerlink" title="713. 乘积小于 K 的子数组"></a><a href="https://leetcode.cn/problems/subarray-product-less-than-k/">713. 乘积小于 K 的子数组</a></h2><p>k&lt;=1 子数组不存在，直接返回0</p><p>个数 是右指针减去左指针+1  都是从满足的左指针的下一位开始到右指针 </p><p>满足* 然后去掉左边的数 判断是否满足，不满足就去算个数</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSubarrayProductLessThanK</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="comment">// 假设l r 【l+1,r】 [l+2,r] [r,r] r-l+1 10 5 2 [5,2] [2]满足 2-1+1=2</span></span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//因为是严格小于k k=1或者0 数组肯定没有满足的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 返回个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cj</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 乘积</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; nums.length; r++) {</span><br><span class="line">            cj *= nums[r];</span><br><span class="line">            <span class="keyword">while</span> (cj &gt;= k) { <span class="comment">// 不满足到满足</span></span><br><span class="line">                cj /= nums[l]; <span class="comment">// 左往右移动</span></span><br><span class="line">                l += <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            ans += r-l+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h2><p>滑动窗口   利用hashSet来判断集合里面是否有元素，有元素的话最左侧集合元素右移 ,没元素的话将其加入  将字符串转为字符数组，用boolean数组来替换hashSet</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String S)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 最长的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 存放字符出现次数 （可以降低字符串的消耗）</span></span><br><span class="line">        <span class="type">char</span>[] s = S.toCharArray(); <span class="comment">// 转换成 char[] 加快效率（忽略带来的空间消耗）</span></span><br><span class="line">        <span class="comment">//Set&lt;Character&gt; has = new HashSet&lt;&gt;(); </span></span><br><span class="line">         <span class="type">boolean</span>[] has = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; s.length; right++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[right];</span><br><span class="line">            <span class="comment">// 判断是否有重复的，有的话就不能加，然后left++</span></span><br><span class="line">            <span class="keyword">while</span> (has[c]) { <span class="comment">//加入c会导致有重复元素</span></span><br><span class="line">                has[s[left++]] = <span class="literal">false</span>; <span class="comment">//缩小窗口</span></span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//不重复就加入</span></span><br><span class="line">            has[c] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//更新长度</span></span><br><span class="line">            max = Math.max(max,right-left+<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//HashMap</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String S)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 最长的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 存放字符出现次数 （可以降低字符串的消耗）</span></span><br><span class="line">        <span class="type">char</span>[] s = S.toCharArray(); <span class="comment">// 转换成 char[] 加快效率（忽略带来的空间消耗）</span></span><br><span class="line">        Map&lt;Character, Integer&gt; has = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();    <span class="comment">//value保存的是元素的下标</span></span><br><span class="line">        <span class="comment">//  boolean[] has = new boolean[128];</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; s.length; right++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[right];</span><br><span class="line">            <span class="comment">// 判断是否有重复的，有的话就不能加，然后left++</span></span><br><span class="line">            <span class="comment">// while (has[c]) { //加入c会导致有重复元素   </span></span><br><span class="line">            <span class="keyword">if</span>(has.containsKey(c)){</span><br><span class="line">                <span class="comment">// has[s[left++]] = false; //缩小窗口</span></span><br><span class="line">                <span class="comment">//找到这个重复的然后 更新左子针 更新到这个元素的前面那个元素的下标是刚访问的下标  </span></span><br><span class="line">                left = Math.max(left,has.get(c));</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//不重复就加入</span></span><br><span class="line">            <span class="comment">// has[c] = true; </span></span><br><span class="line">            has.put(c,right);</span><br><span class="line">            <span class="comment">//更新长度</span></span><br><span class="line">            max = Math.max(max,right-left);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>解题思路：二分查找low_bound 【时间复杂度O(lgn),n是数组长度】</p><p>- 核心要素<br>    - 注意区间开闭，三种都可以<br>    - 循环结束条件：当前区间内没有元素<br>    - 下一次二分查找区间：不能再查找(区间不包含)mid，防止死循环<br>    - 返回值：大于等于target的第一个下标（注意循环不变量）</p><p>- 有序数组中二分查找的四种类型（下面的转换仅适用于数组中都是整数）</p><p>​    1. 第一个大于等于x的下标： low_bound(x)</p><p>​    2. 第一个大于x的下标：可以转换为<code>第一个大于等于 x+1 的下标</code> ，low_bound(x+1)</p><p>​    3. 最后一个一个小于x的下标：可以转换为<code>第一个大于等于 x 的下标</code> 的<code>左边位置</code>, low_bound(x) - 1;</p><pre><code>4. 最后一个小于等于x的下标：可以转换为`第一个大于等于 x+1 的下标` 的 `左边位置`, low_bound(x+1) - 1;</code></pre><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h2><p>​//第一个出现的位置 就是&gt;=target的位置<br>​        //第一个大于x的下标 &gt;=(target+1)<br>​        //最后一个小于x的下标就是&gt;=(target)-1<br>​        //最后一个出现的位置 就是 &gt;=(target+1)-1的位置</p><p>闭区间 mid + 1 mid -1</p><p>左闭右开 mid+1 mid</p><p>左开右闭 start=-1 mid mid+1</p><p>循环不变量 最后的时候<br>            // nums[left-1] &lt; target<br>            // nums[right+1] &gt;= target</p><p>“红蓝染色法”关键：</p><ol><li>right 左移使右侧变蓝 (判断条件为 true )</li><li>left 右移使左侧变红 (判断条件为 false )</li><li>故确定二分处 ( mid ) 的染色条件是关键  闭区间，和判断条件相同的话就是什么颜色</li></ol><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">        <span class="comment">//第一个出现的位置 就是&gt;=target的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> midBound(nums,target);</span><br><span class="line">        <span class="comment">//不存在</span></span><br><span class="line">        <span class="keyword">if</span>(start==nums.length || nums[start]!=target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{-<span class="number">1</span>,-<span class="number">1</span>};</span><br><span class="line">        <span class="comment">//第一个大于x的下标 &gt;=(target+1)</span></span><br><span class="line">        <span class="comment">//最后一个小于x的下标就是&gt;=(target)-1</span></span><br><span class="line">        <span class="comment">//最后一个出现的位置 就是 &gt;=(target+1)-1的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> midBound(nums,target+<span class="number">1</span>)-<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{start,end};</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">midBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="comment">//闭区间[start, end]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start&lt;=end) {</span><br><span class="line">            <span class="comment">// 循环不变量： 最后的时候</span></span><br><span class="line">            <span class="comment">// nums[left-1] &lt; target</span></span><br><span class="line">            <span class="comment">// nums[right+1] &gt;= target</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start+(end-start)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target) {  <span class="comment">//[mid+1,end]</span></span><br><span class="line">            start = mid+<span class="number">1</span>; <span class="comment">//因为是闭区间，所以mid已经判断过，不满足条件</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                end = mid-<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="162-寻找峰值"><a href="#162-寻找峰值" class="headerlink" title="162. 寻找峰值"></a><a href="https://leetcode.cn/problems/find-peak-element/">162. 寻找峰值</a></h2><p>根据红黑染色法，蓝色代表峰顶及其峰顶右侧的值，数组中一定有封顶存在，所以最后一个肯定是蓝色，红色代表封顶左侧的值</p><p>比较 mid和mid+1的值</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findPeakElement</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">2</span>; <span class="comment">//因为封顶一定存在，然后最右侧肯定为峰顶或者小于峰顶的数</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left+(right-left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;nums[mid+<span class="number">1</span>]) {</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                right = mid -<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        } </span><br><span class="line">        <span class="keyword">return</span> left; <span class="comment">//退出循环后 right最后可能会到峰顶的左侧</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="153-寻找旋转排序数组中的最小值"><a href="#153-寻找旋转排序数组中的最小值" class="headerlink" title="153. 寻找旋转排序数组中的最小值"></a><a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/">153. 寻找旋转排序数组中的最小值</a></h2><p>红蓝标记法，红色代表大于最小数，蓝色代表小于等于最小的数 拿中间值和最后一个数进行比较   小于最后值，right-1   大于最后的值 left+1</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// 最左侧要么是最小值或者最小值右侧</span></span><br><span class="line">        <span class="comment">//蓝色是小于等于最小数,红色 大于最小数</span></span><br><span class="line">        <span class="type">int</span>  <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[nums.length - <span class="number">1</span>]) { <span class="comment">// 大于的话就往左移动 //红色</span></span><br><span class="line">                left = mid + <span class="number">1</span>; </span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">//蓝色</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347. 前 K 个高频元素"></a><a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">小顶堆</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        <span class="comment">// 采用小顶堆</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            map.put(num, map.getOrDefault(num,<span class="number">0</span>) + <span class="number">1</span>); <span class="comment">// 记录每个出现的频率</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((p1, p2) -&gt; (p1[<span class="number">1</span>] - p2[<span class="number">1</span>])); <span class="comment">// 小堆</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) {</span><br><span class="line">            <span class="comment">// queue里的数量小于k</span></span><br><span class="line">            <span class="keyword">if</span> (queue.size() &lt; k) {</span><br><span class="line">                queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[] { entry.getKey(), entry.getValue() });</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 当前是否比堆顶的大，大的话把对顶元素踢出 然后将数加进去</span></span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() &gt; queue.peek()[<span class="number">1</span>]) { <span class="comment">// [1]代表value</span></span><br><span class="line">                    queue.poll();</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[] { entry.getKey(), entry.getValue() });</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            res[i] = queue.poll()[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">大顶堆</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        <span class="comment">// 采用大顶堆</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>); <span class="comment">// 记录每个出现的频率</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((p1, p2) -&gt; (p2[<span class="number">1</span>] - p1[<span class="number">1</span>])); <span class="comment">// 小堆</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) { <span class="comment">// 会将最大的放到堆头</span></span><br><span class="line">            queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[] { entry.getKey(), entry.getValue() });</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//堆头都是大的 拿出k个就行</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            res[i] = queue.poll()[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><h2 id="反转链表Ⅰ"><a href="#反转链表Ⅰ" class="headerlink" title="反转链表Ⅰ"></a>反转链表Ⅰ</h2><p>先保存后一个节点（避免最后当前节点不能后移），然后指向前一个节点，前一个节点后移，当前节点也后移</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        } </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//前缀节点</span></span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">//保存root节点的后一个节点</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">lastNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">            <span class="comment">//head指向pre节点</span></span><br><span class="line">            head.next = pre;</span><br><span class="line">            <span class="comment">//pre后移</span></span><br><span class="line">            pre = head;</span><br><span class="line">            <span class="comment">//head后移</span></span><br><span class="line">            head = lastNode;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a><a href="https://leetcode.cn/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h2><p>首先申请一个节点dummy ,p0让其指向head  然后dummy到left的左一个节点，然后让其后一个节点(left)为cur，申请一个null节点做反转，可以从测试样例看出执行次数是right+left-1，反转和之前一样，先保存后一个节点，然后指向前一个节点，前一个节点后移，当前节点也后移 最后让p0.next.next=cur p0.next=pre</p><ul><li>cur会指向最后一个节点，pre会指向后一个节点的前一个节点</li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode() {}</span></span><br><span class="line"><span class="comment"> * ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="comment">// 申请一个前节点 next是head</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p0</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="comment">// p0到left的左节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; left - <span class="number">1</span>; i++)</span><br><span class="line">            p0 = p0.next; </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 用来第一个节点反转指向null</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> p0.next; <span class="comment">// p0的下一个节点为cur</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; right - left +<span class="number">1</span> ; i++) { <span class="comment">// 循环到right</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">lastNode</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="comment">//每次循环只修改一个next</span></span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = lastNode;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 最后 连接一块</span></span><br><span class="line">        p0.next.next = cur;</span><br><span class="line">        p0.next = pre;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h1><ul><li>快指针走两步，慢指针走一步</li><li>最后快指针在null或者在最后一个节点，慢指针在中间位置</li></ul><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h2><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="comment">//使用快慢指针</span></span><br><span class="line">        <span class="comment">//需要申请一个虚拟头结点，然后slow才可以指向倒数n节点的前一个节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>){</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            n--;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="comment">//然后快慢指针一起走，直到快指针到null</span></span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让slow指向后一个节点</span></span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后返回slow</span></span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">middleNode</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span> &amp;&amp; fast.next!=<span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next; </span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//最后返回慢指针</span></span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h2><ul><li>环，快慢指针总会相遇，并且快指针追到慢指针，慢慢指针进入环后循环次数小于环的长度</li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) {</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// 时间复杂度 O(n)  慢指针进入环后循环次数小于环的长度</span></span><br><span class="line"> <span class="comment">// 空间复杂度 O(1) </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span> &amp;&amp; fast.next!=<span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next; </span><br><span class="line">            <span class="keyword">if</span>(slow==fast) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//进入环后总会相遇 追及相遇的问题</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h2><p>两个节点相遇后，让其中一个节点从head从新开始走，另一个节点继续一步一步走，两者会在入口相遇。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) {</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>){</span><br><span class="line">            <span class="comment">//快的走两步，慢的走一步</span></span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow) {</span><br><span class="line">                <span class="comment">//有环，然后就相遇</span></span><br><span class="line">                <span class="comment">//相遇然后一个从头结点，一个从相遇节点开始向后走，相遇就是入口</span></span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> fast;</span><br><span class="line">                <span class="keyword">while</span>(index1!=index2) {</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> index1;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="143-重排链表"><a href="#143-重排链表" class="headerlink" title="143. 重排链表"></a><a href="https://leetcode.cn/problems/reorder-list/">143. 重排链表</a></h2><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20240414140527854.png" alt="image-20240414140527854" style="zoom:80%;"><p> 最终想得到的数据是 1-&gt;5-&gt;2-&gt;4-&gt;3  先走第一个然后倒数第一个 然后第二个倒数第二个</p><p>首先通过快慢指针找到中间节点，然后将其及其后面反转。 让最后一个节点为head2 保留head和head2的下一个节点，头结点指向head2。然后往后走，循环直到head2的next指向null</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode() {}</span></span><br><span class="line"><span class="comment"> * ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    ListNode <span class="title function_">midNode</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="comment">// 先去找到中间节点，然后再将后面节点反转</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) {</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ListNode <span class="title function_">reverseNode</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="comment">// 然后申请个null，然后给它反转</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) {</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">lastNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">            head.next = temp;</span><br><span class="line">            temp = head;</span><br><span class="line">            head = lastNode;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> temp; <span class="comment">//这里返回的是temp，最后temp到最后一个节点，而head到null</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reorderList</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> midNode(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head2</span> <span class="operator">=</span> reverseNode(mid);</span><br><span class="line">        <span class="comment">// //用head2 表示最后一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存head1后的节点</span></span><br><span class="line">        <span class="keyword">while</span> (head2.next != <span class="literal">null</span>) {</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">hNode1</span> <span class="operator">=</span> head.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">hNode2</span> <span class="operator">=</span> head2.next;</span><br><span class="line">            <span class="comment">// head1-&gt;head2</span></span><br><span class="line">            head.next = head2;</span><br><span class="line">            <span class="comment">// 5-&gt;2</span></span><br><span class="line">            head2.next = hNode1;</span><br><span class="line">            head = hNode1;</span><br><span class="line">            head2 = hNode2;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="前后指针"><a href="#前后指针" class="headerlink" title="前后指针"></a>前后指针</h1><p>单链表想要删除一个节点需要获取上一个节点，但是如果题目只给你要删除的节点，不知道上一个节点是什么，该怎么做？ 见237</p><h2 id="237-删除链表中的节点"><a href="#237-删除链表中的节点" class="headerlink" title="237. 删除链表中的节点"></a><a href="https://leetcode.cn/problems/delete-node-in-a-linked-list/">237. 删除链表中的节点</a></h2><p>有一个单链表的 <code>head</code>，我们想删除它其中的一个节点 <code>node</code>。</p><p>给你一个需要删除的节点 <code>node</code> 。你将 <strong>无法访问</strong> 第一个节点 <code>head</code>。</p><p>链表的所有值都是 <strong>唯一的</strong>，并且保证给定的节点 <code>node</code> 不是链表中的最后一个节点。</p><p>删除给定的节点。注意，删除节点并不是指从内存中删除它。这里的意思是：</p><ul><li>给定节点的值不应该存在于链表中。</li><li>链表中的节点数应该减少 1。</li><li><code>node</code> 前面的所有值顺序相同。</li><li><code>node</code> 后面的所有值顺序相同。</li></ul><p><strong>自定义测试：</strong></p><ul><li>对于输入，你应该提供整个链表 <code>head</code> 和要给出的节点 <code>node</code>。<code>node</code> 不应该是链表的最后一个节点，而应该是链表中的一个实际节点。</li><li>我们将构建链表，并将节点传递给你的函数。</li><li>输出将是调用你函数后的整个链表。</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/01/node1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [4,5,1,9], node = 5</span><br><span class="line">输出：[4,1,9]</span><br><span class="line">解释：指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9</span><br></pre></td></tr></tbody></table></figure><p>思路：将想要删除的节点的下一节点的值copy到要删除节点。然后将node.next指向node.next.next节点</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(ListNode node)</span> {</span><br><span class="line">        node.val = node.next.val; <span class="comment">//将想要删除的节点的下一节点的值copy到要删除节点</span></span><br><span class="line">        <span class="comment">//然后将node.next指向node.next.next节点</span></span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="19-删除链表的倒数第-N-个结点-1"><a href="#19-删除链表的倒数第-N-个结点-1" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h2><ul><li>判断是不是需要申请前缀节点 ：<strong>唯一就是head节点是否会被删除</strong></li></ul><p><strong>本题：n可能等于链表长度 n就会等于头结点了</strong>。所以需要申请前缀节点让其指向head</p><p>先让快指针向前走n步，然后让慢指针和快指针一块走。最后让慢指针的next指向next.next  返回前缀节点的next</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,head);</span><br><span class="line">        <span class="comment">//申请快指针 指向head</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>((n--)&gt;<span class="number">0</span>) {</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//然后slow的next指向slow.next.next</span></span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="83-删除排序链表中的重复元素-Ⅰ"><a href="#83-删除排序链表中的重复元素-Ⅰ" class="headerlink" title="83. 删除排序链表中的重复元素 Ⅰ"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素 Ⅰ</a></h2><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p><p>cur = head 然后遍历，查看是否和后面节点相同，相同的话就指向next.next</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode() {}</span></span><br><span class="line"><span class="comment"> * ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">//判断是否和后面的相同</span></span><br><span class="line">            <span class="keyword">if</span>(cur.val==cur.next.val) {</span><br><span class="line">                <span class="comment">//指向后后指针</span></span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//else往后走</span></span><br><span class="line">                cur = cur.next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82. 删除排序链表中的重复元素 II"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></h2><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除原始链表中所有重复数字的节点，只留下不同的数字</em> 。返回 <em>已排序的链表</em> 。</p><p>可能head节点也为重复元素，需要删除   所以需要申请一个dummy节点</p><p>cur = dummy判断cur.next和cur.next.next节点是否相同，相同的话然后去循环删除这个重复的节点（判断是否下一节点和重复的值相同，相同就指向后一个节点），不相同的话，让cur节点指向下一个节点</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode() {}</span></span><br><span class="line"><span class="comment"> * ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="comment">// 判断next和next.next是否重复 .需要他俩存在</span></span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> cur.next.val;</span><br><span class="line">            <span class="comment">// 相等</span></span><br><span class="line">            <span class="keyword">if</span> (val == cur.next.next.val) {</span><br><span class="line">               <span class="comment">//重要： //循环删除重复的   cur.next.val是不是等于重复的，等于重复的然后指向后一个节点  cur.next等于重复的值，然后往后移</span></span><br><span class="line">                <span class="keyword">while</span>(cur.next!=<span class="literal">null</span> &amp;&amp; cur.next.val == val) {</span><br><span class="line">                    cur.next = cur.next.next;</span><br><span class="line">                }</span><br><span class="line">            <span class="comment">//不相等</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h2><p>获取左子树的深度和右子树的深度，判断哪个大，然后+1</p><p><strong>非全局变量法</strong></p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">llength</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">       <span class="type">int</span> <span class="variable">rlength</span> <span class="operator">=</span> maxDepth(root.right);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Math.max(llength,rlength) + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量法</span></span><br><span class="line"><span class="comment">//经过每个节点，然后更新一下全局变量的值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ans; <span class="comment">//ans代表经过多少个节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">       dfs(root,<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="comment">//cnt 表示在到达当前节点之前，经过了多少个节点。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node,<span class="type">int</span> cnt)</span>{</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="comment">//每次加1</span></span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="comment">//然后更新ans值</span></span><br><span class="line">        ans = Math.max(ans,cnt);</span><br><span class="line">        dfs(node.left,deep);</span><br><span class="line">        dfs(node.right,deep);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100. 相同的树"></a><a href="https://leetcode.cn/problems/same-tree/">100. 相同的树</a></h2><p>遍历p树和q树，让p的左树和q的左树相同，p的r和q的r相同就返回   true   结束条件是p或者q为null   两者都为null，返回true</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> {</span><br><span class="line">        <span class="comment">//结束标识   两个节点都为null 返回true </span></span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>) <span class="keyword">return</span> p==q;</span><br><span class="line">        <span class="comment">//判断是否相同</span></span><br><span class="line">        <span class="comment">//左树的左子树 和右树的左子树 右的右子树 和左的左子树</span></span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right);        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></h2><p>遍历树，树的左树和树的右树相同，左树的左节点和右树的右节点相同，左数的右节点和右树的左节点相同就为 true   结束条件是p或者q为null   两者都为null，返回true</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">return</span> isSameTree(root.left,root.right);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p , TreeNode q)</span> {</span><br><span class="line">        <span class="comment">//左子树的右子树和右子树的左子树相同 右子树的右子树和左子树的左子树相同</span></span><br><span class="line">        <span class="comment">//结束标识   两个节点都为null 返回true </span></span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>) <span class="keyword">return</span> p==q;</span><br><span class="line">        <span class="comment">//判断是否相同</span></span><br><span class="line">        <span class="comment">//左树的左子树 和右树的左子树 右的右子树 和左的左子树</span></span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; isSameTree(p.left,q.right) &amp;&amp; isSameTree(p.right,q.left);</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a><a href="https://leetcode.cn/problems/balanced-binary-tree/">110. 平衡二叉树</a></h2><p>左右高度的绝对值为1就是平衡二叉树。可以设置为-1为不平衡，在归的过程中，如果出现等于-1的话，直接返回-1  不是-1就返回它的高度 最后判断是不是等于-1，</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">//-1表示不平衡了</span></span><br><span class="line">        <span class="keyword">return</span> getHeight(root)==-<span class="number">1</span>?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//获取left的高度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">llength</span> <span class="operator">=</span> getHeight(root.left);</span><br><span class="line">        <span class="comment">//判断是不是已经不平衡了</span></span><br><span class="line">        <span class="keyword">if</span>(llength==-<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">rlength</span> <span class="operator">=</span> getHeight(root.right);</span><br><span class="line">        <span class="keyword">if</span>(rlength==-<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//判断两者的高度是不是大于1 &gt;就代表不是平衡</span></span><br><span class="line">        <span class="keyword">if</span>(Math.abs(llength-rlength) &gt; <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//返回高度</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(llength,rlength)+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199. 二叉树的右视图"></a><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199. 二叉树的右视图</a></h2><p>dfs：可以用高度和集合大小，来找右视图。必须先递归右子树，然后递归左子树 判断高度是不是等于集合长度，等于就把val加入集合，<img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20240415171856149.png" alt="image-20240415171856149"> 这个图，递归左子树，高度又变为1和2 但是集合长度为3  不会加入，但是6的话和长度相同</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * TreeNode left;</span></span><br><span class="line"><span class="comment"> * TreeNode right;</span></span><br><span class="line"><span class="comment"> * TreeNode() {}</span></span><br><span class="line"><span class="comment"> * TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> * this.val = val;</span></span><br><span class="line"><span class="comment"> * this.left = left;</span></span><br><span class="line"><span class="comment"> * this.right = right;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;Integer&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        dfs(root, <span class="number">0</span>); <span class="comment">// dfs记录高度和 list大小 相同才加</span></span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> ans)</span> { <span class="comment">// ans代表树的高度</span></span><br><span class="line">        <span class="comment">// 递归右子树，然后树的高度和list的大小一样就放入list集合</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans == resList.size())</span><br><span class="line">            resList.add(root.val);</span><br><span class="line">        ans++;</span><br><span class="line">        dfs(root.right,ans);</span><br><span class="line">        dfs(root.left,ans);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>bfs：队列解题，可以通过队列来判断，for循环 i是队列的长度的时候就记录下来</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * TreeNode left;</span></span><br><span class="line"><span class="comment"> * TreeNode right;</span></span><br><span class="line"><span class="comment"> * TreeNode() {}</span></span><br><span class="line"><span class="comment"> * TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> * this.val = val;</span></span><br><span class="line"><span class="comment"> * this.left = left;</span></span><br><span class="line"><span class="comment"> * this.right = right;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;Integer&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> resList;</span><br><span class="line">       Deque&lt;TreeNode&gt; que = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">       que.offerLast(root); <span class="comment">//队尾加入</span></span><br><span class="line">       <span class="keyword">while</span>(!que.isEmpty()){</span><br><span class="line">        <span class="comment">//记录队列长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> que.size();</span><br><span class="line">        <span class="comment">//循环len次，然后让左右节点进队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++) {</span><br><span class="line">            <span class="comment">//出队列</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> que.poll();</span><br><span class="line">            <span class="comment">//判断是不是队列最后一个 i=len-1 循环次数是不是队列长度</span></span><br><span class="line">            <span class="keyword">if</span>(i==len-<span class="number">1</span>) resList.add(node.val);</span><br><span class="line">            <span class="comment">//左树</span></span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.addLast(node.left);</span><br><span class="line">            <span class="comment">//右树</span></span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.addLast(node.right);</span><br><span class="line">        }</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//返回resList</span></span><br><span class="line">       <span class="keyword">return</span> resList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h1><h2 id="98-验证二叉搜索树-1"><a href="#98-验证二叉搜索树-1" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h2><p><strong>前序遍历：</strong></p><p>初始化根节点的范围为 负无穷到正无穷     判断节点是否在这个区间内，向左子树遍历，让其右范围更新为上一节点的值，让其在负无穷到上一节点值之间    向右子树遍历，让其左范围更新为上一节点的值，让其在上一节点值到正无穷之间</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历 根左右</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root,Long.MIN_VALUE,Long.MAX_VALUE);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root,<span class="type">long</span> left,<span class="type">long</span> right)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) {</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//记录节点值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> root.val;</span><br><span class="line">        <span class="keyword">return</span> left&lt;x &amp;&amp; x&lt;right &amp;&amp; isValidBST(root.left,left,x) &amp;&amp; isValidBST(root.right,x,right);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>中序遍历</strong></p><p>是一个升序，让其判断当前节点和上一节点的大小，先走到最左侧节点，然后往上遍历，如果不满足，直接向上返回false 当前节点大于上一节点就是升序，否则不是 更新前缀的节点为当前节点继续遍历   初始化根节点的上一节点为null</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> isValidBST(root.left);</span><br><span class="line">        <span class="keyword">if</span>(!left) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//不是升序就返回false</span></span><br><span class="line">        <span class="comment">// 获取当前节点的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> root.val;</span><br><span class="line">        <span class="keyword">if</span> (pre!=<span class="literal">null</span> &amp;&amp; x &lt;= pre.val) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 然后更新pre值</span></span><br><span class="line">        pre = root;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>后序遍历</strong>：</p><p>如果是null，然后返回最小值和最大值分别为正无穷和负无穷，然后遍历左子树拿去最小值和最大值。遍历右子树拿去最小值和最大值，获取当前节点的值，去比较 是不是大于左子树的最大值，和小于右子树的最小值。不满足的话返回最小值为负无穷 最大值为正无穷 返回当前节点值和左侧最小值，当前节点值和右侧最大值(因为会有无穷)</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">// 最后判断最大值不为正无穷即可 因为不满足就会返回 36</span></span><br><span class="line">        <span class="keyword">return</span> dfs(root)[<span class="number">1</span>] != Long.MAX_VALUE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span>[] dfs(TreeNode node) {</span><br><span class="line">        <span class="comment">// null 返回正无穷和负无穷</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) { <span class="comment">// 37行最大值要和负无穷做比较，所以是负无穷才可以给值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">long</span>[] { Long.MAX_VALUE, Long.MIN_VALUE };</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 获取left的最小值和最大值</span></span><br><span class="line">        <span class="type">long</span>[] left = dfs(node.left);</span><br><span class="line">        <span class="comment">// 获取right的最小值和最大值</span></span><br><span class="line">        <span class="type">long</span>[] right = dfs(node.right);</span><br><span class="line">        <span class="comment">// 获取当前节点值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> node.val;</span><br><span class="line">        <span class="comment">// 判断是不是x大于左的最大值和右的最小值</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt;= left[<span class="number">1</span>] || x &gt;= right[<span class="number">0</span>]) {</span><br><span class="line">            <span class="comment">// 不是就返回负无穷和正无穷</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">long</span>[] { Long.MIN_VALUE, Long.MAX_VALUE };</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 返回 当前值和左侧的最小值和右侧的最大值，返回给上一层</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">long</span>[] { Math.min(x, left[<span class="number">0</span>]), Math.max(x, right[<span class="number">1</span>]) };</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h2><p>升序 ， 当前值大于后一个值，发生交换，交换次数是j-i-1 因为每一轮执行完之后都会有已经排好序的</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) {</span><br><span class="line">       <span class="comment">//冒泡排序  当前数大于后一个数，交换位置 时间复杂度O(n^2) 需要比较n-1轮 n数组的长度</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++) {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j&lt;nums.length-<span class="number">1</span>-i ; j++) {</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">//交换位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">                nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">              }</span><br><span class="line">           }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><strong>优化冒泡排序</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) {</span><br><span class="line">       <span class="comment">//冒泡排序  当前数大于后一个数，交换位置 时间复杂度O(n^2) 需要比较n-1轮 n数组的长度</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++) {</span><br><span class="line">           <span class="comment">//默认数组有序，只要发生一次交换，就必须进行下一轮交换</span></span><br><span class="line">           <span class="comment">//如果，没有发生交换，就代表后续的是有序的，然后开启下轮循环</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j&lt;nums.length-<span class="number">1</span>-i ; j++) {</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">//交换位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">                nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                nums[j+<span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">              }</span><br><span class="line">           }</span><br><span class="line">           <span class="keyword">if</span>(flag) {</span><br><span class="line">               <span class="keyword">break</span>;  <span class="comment">//去下一轮循环</span></span><br><span class="line">           }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="选择排序："><a href="#选择排序：" class="headerlink" title="选择排序："></a><strong>选择排序：</strong></h2><p>每一轮寻找最小的数和最前面进行交换，直到最后有序</p><p>每轮找到最小的值，结束后把它和头部进行交换</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) {</span><br><span class="line">       <span class="comment">// 选择排序：每一轮选择最小元素交换到未排定部分的开头   O(n^2)</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">           <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) {</span><br><span class="line">               <span class="keyword">if</span> (nums[j] &lt; nums[minIndex]) {</span><br><span class="line">                   minIndex = j;   <span class="comment">//将最小值复为当前值 找到最小的值</span></span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">           <span class="comment">//走完一轮，然后将最小的值和i值进行交换</span></span><br><span class="line">                   <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                   nums[i] = nums[minIndex];</span><br><span class="line">                   nums[minIndex] = temp;</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> nums;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h2 id="插入排序："><a href="#插入排序：" class="headerlink" title="插入排序："></a>插入排序：</h2><p><strong>时间复杂度是 O(n^2)</strong>  适合数组短的排序 因为<strong>「短数组」的特点是：每个元素离它最终排定的位置都不会太远</strong>  并且在<strong>数组「几乎有序」</strong>的前提下，「插入排序」的时间复杂度可以达到 <strong>O(N)</strong> </p><p>思路：将一个数字插入到有序的数组里，成为一个更长的有序数组，一段时间后数组有序</p><p>从第二个数开始，和前面的数做比较，如果小于前面的数就交换，依次进行</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 插入排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i ; j&gt;<span class="number">0</span> &amp;&amp; nums[j]&lt;nums[j-<span class="number">1</span>];j--) {</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&lt;nums[j-<span class="number">1</span>]) {</span><br><span class="line">                    swap(nums,j,j-<span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> a,<span class="type">int</span> b)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span>  <span class="operator">=</span> nums[a];</span><br><span class="line">        nums[a] = nums[b];</span><br><span class="line">        nums[b] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>**优化   ** 不使用swap方法，使用临时变量来存储当前值，然后让前面的数后移，将这个临时变量在放到前面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i]; <span class="comment">// 临时变量用来保存当前值，赋值给前面</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; temp &lt; nums[j - <span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">// temp小于前面的数，然后就进行交换位置</span></span><br><span class="line">                nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 最后将这个临时变量赋值给 j</span></span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="最近的公共祖先"><a href="#最近的公共祖先" class="headerlink" title="最近的公共祖先"></a>最近的公共祖先</h1><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h2><p>递归  如果节点为null或者为p或者为q 就返回当前节点</p><p>然后遍历左子树 和右子树 得到返回结果，判断 如果左右子树都找到就返回当前节点，只在左树找到返回递归左子树的结果，只在右树找到返回递归右子树的结果，如果都没找到返回null</p><p>遇到pq就返回，不需继续遍历，因为他已经是一个节点，无论q还是p在后面都是要返回这个节点</p><p>pq在左右两侧返回当前节点，在右侧返回右侧 在左侧返回左侧</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20240417114323385.png" alt="image-20240417114323385"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20240417114608192.png" alt="image-20240417114608192"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * TreeNode left;</span></span><br><span class="line"><span class="comment"> * TreeNode right;</span></span><br><span class="line"><span class="comment"> * TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">        <span class="comment">// 递归遍历遇到这种情况直接返回节点，无需后续遍历</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root == q || root == p) {</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="comment">// left和right都找到了 就返回根节点</span></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></h2><p>二叉搜索树 满足左小右大，可以先判断pq分别属于哪部分，然后去递归子树。</p><p>pq都小于根节点，就去遍历左子树，然后返回 ;大于就去找右子树</p><p>如果qp在左右子树中，返回root， p或q是当前节点时也返回当前节点  </p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20240417114348814.png" alt="image-20240417114348814"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">        <span class="comment">//不需判断root==null，因为pq一定存在</span></span><br><span class="line">        <span class="comment">//如果节点值在左子树，就去遍历左子树的值</span></span><br><span class="line">        <span class="comment">//左侧返回左侧的根节点</span></span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">null</span> &amp;&amp; p.val&lt;root.val &amp;&amp; q.val&lt;root.val) {</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left,p,q);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//右侧返回右侧的根节点</span></span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">null</span>&amp;&amp;p.val&gt;root.val &amp;&amp; q.val&gt;root.val) {</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right,p,q);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//左右树都有 返回根节点</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h2><p>队列来完成，计算队列的大小，然后循环加入左右子树</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * TreeNode left;</span></span><br><span class="line"><span class="comment"> * TreeNode right;</span></span><br><span class="line"><span class="comment"> * TreeNode() {}</span></span><br><span class="line"><span class="comment"> * TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> * this.val = val;</span></span><br><span class="line"><span class="comment"> * this.left = left;</span></span><br><span class="line"><span class="comment"> * this.right = right;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        queue.offerLast(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) {</span><br><span class="line">            <span class="comment">//计算队列的长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(len&gt;<span class="number">0</span>) {</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                list.add(node.val); <span class="comment">//添加进去</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.addLast(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.addLast(node.right);</span><br><span class="line">                len--;</span><br><span class="line">            } </span><br><span class="line">            res.add(list);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="103-二叉树的锯齿形层序遍历"><a href="#103-二叉树的锯齿形层序遍历" class="headerlink" title="103. 二叉树的锯齿形层序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a></h2><p>奇数数组不变，偶数数组逆序</p><p>可以定义一个flag 第一层时奇数 flag=false 第二层是偶数 flag=true，在完成遍历后取反对flag，然后添加到列表中前判断是不是偶数还是奇数，偶数反转</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * TreeNode left;</span></span><br><span class="line"><span class="comment"> * TreeNode right;</span></span><br><span class="line"><span class="comment"> * TreeNode() {}</span></span><br><span class="line"><span class="comment"> * TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> * TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> * this.val = val;</span></span><br><span class="line"><span class="comment"> * this.left = left;</span></span><br><span class="line"><span class="comment"> * this.right = right;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时空复杂度 O(n)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">zigzagLevelOrder</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        queue.offerLast(root);</span><br><span class="line">        <span class="comment">// flag=false 代表是奇数</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">            <span class="comment">// 计算队列的长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (len &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                list.add(node.val); <span class="comment">// 添加进去</span></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>)</span><br><span class="line">                    queue.addLast(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>)</span><br><span class="line">                    queue.addLast(node.right);</span><br><span class="line">                len--;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 加之前判断是不是偶数</span></span><br><span class="line">            <span class="keyword">if</span> (flag) {</span><br><span class="line">                Collections.reverse(list);</span><br><span class="line">                res.add(list);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                res.add(list);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 第一次完了之后将其设为!flag if flag=true 就变为false</span></span><br><span class="line">            flag = !flag;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513. 找树左下角的值"></a><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值</a></h2><p>两种方法：</p><p><strong>第一种</strong>：层序遍历，找到最后第一层，然后取第一个节点   可以定义一个cnt，然后每层第一个数都赋值，最后一个值就是最后一层的第一个值</p><p><strong>第二种</strong>：层序遍历，从右往左遍历，最后一个出队的节点的值就是答案 不需要去双重循环，然后直接拿出节点值就OK  每一个出队列都为node赋值，最后一个出的就是最底层最左侧的那个值</p><p><strong>第一种代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">// 层序遍历 从右向左进行遍历，最后一个就是最底层最左边的值</span></span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        queue.offerLast(root);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 每一层的第一个数都循环赋值</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">                node = queue.pollFirst();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                    res = node.val;</span><br><span class="line">                <span class="comment">// 右先进然后右先出</span></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>)</span><br><span class="line">                    queue.addLast(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>)</span><br><span class="line">                    queue.addLast(node.right);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 返回最后一个出队的节点值</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>第二种代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">//层序遍历 从右向左进行遍历，最后一个就是最底层最左边的值</span></span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        queue.offerLast(root);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) {</span><br><span class="line">            <span class="comment">//不需双重循环</span></span><br><span class="line">           node = queue.pollFirst();</span><br><span class="line">           <span class="comment">//右先进然后右先出</span></span><br><span class="line">           <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.addLast(node.right);</span><br><span class="line">           <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.addLast(node.left);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//返回最后一个出队的节点值</span></span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><h2 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h2><p>向右 for循环遍历   </p><p>向下 递归</p><p>回溯三部曲：</p><ul><li><p>参数和返回值</p></li><li><p>终止条件</p></li><li><p>单层递归逻辑</p></li></ul><p>判断是否能够重复获取前面的元素</p><p>不能就有startIndex</p><h3 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></h3><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>n代表可以取的值，k代表终止条件</p><p>定义一个path保存每个符合的结果，result集合保存最后的返回结果，startindex代表从哪个数开始进行遍历 </p><p>终止：path.size大小==k </p><p>单层递归：从startIndex遍历，加入到path集合，然后递归从startIndex+1取值，然后回溯</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">未剪枝优化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        backstracking(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backstracking</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k,<span class="type">int</span> startIndex)</span>{</span><br><span class="line">        <span class="comment">//返回条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.size() == k) {</span><br><span class="line">            resList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//单层递归</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startIndex;i&lt;=n;i++) {</span><br><span class="line">            <span class="comment">//加入path</span></span><br><span class="line">            path.add(i);</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            backstracking(n,k,i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">剪枝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        backstracking(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backstracking</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k,<span class="type">int</span> startIndex)</span>{</span><br><span class="line">        <span class="comment">//返回条件</span></span><br><span class="line">        <span class="keyword">if</span>(path.size() == k) {</span><br><span class="line">            resList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//单层递归 </span></span><br><span class="line">        <span class="comment">//范围太大，需要剪枝，比如 n=4，k=4 从2开始就无需遍历，因为不会满足k=4  2，3，4   至多需要遍历 1就可以 1，2，3，4正好k=4</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startIndex;i&lt;=n-(k-path.size())+<span class="number">1</span>;i++) {  <span class="comment">//至多需要在哪里开始遍历   </span></span><br><span class="line">            <span class="comment">//加入path</span></span><br><span class="line">            path.add(i);</span><br><span class="line">            <span class="comment">//递归</span></span><br><span class="line">            backstracking(n,k,i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a><a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 III</a></h3><p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用一次</strong></li></ul><p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 3, n = 7</span><br><span class="line">输出: [[1,2,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 4 = 7</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></tbody></table></figure><p>剪枝操作：</p><ol><li>sum大于n的话就无需再进行递归</li><li>至多到9-(k-midList.size())+1 ，才能满足mid集合里有k个元素  比如 k=2  至多到8 ，到9的话mid集合里面只能有1个元素，直接会不满足</li></ol><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; midList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> {</span><br><span class="line">        backtracing(<span class="number">0</span>, k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracing</span><span class="params">(<span class="type">int</span> targetSum, <span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> startIndex)</span> {</span><br><span class="line">        <span class="comment">// 结束条件</span></span><br><span class="line">        <span class="keyword">if</span> (midList.size() == k) {</span><br><span class="line">            <span class="keyword">if</span> (targetSum == n) {</span><br><span class="line">                resList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(midList));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 单层逻辑 只使用数字1到9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= <span class="number">9</span> - (k - midList.size()) + <span class="number">1</span>; i++) { <span class="comment">// 至多到 9-(k-midList.size())+1 才能满足mid集合里有k个元素</span></span><br><span class="line">            <span class="comment">// 如果k=5 那么6之后的就不需要去操作，因为后面是4个数</span></span><br><span class="line">            <span class="comment">// 剪枝 如果i已经大于目标和了，就直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (targetSum &gt; n) {</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            targetSum = targetSum + i;</span><br><span class="line">            midList.add(i);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            backtracing(targetSum, k, n, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯 和前面相反操作</span></span><br><span class="line">            targetSum = targetSum - i;</span><br><span class="line">            midList.removeLast();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h3><p>解题思路：</p><p>首先将对应关系保存到String集合里</p><p>定义全局遍历 s 和集合 reslist</p><p>参数：字符串 和 index代表是第几个数字</p><p>停止递归的条件是：当index和字符串的长度相同时，就将s放入reslist return</p><p>单层递归的逻辑：</p><p>首先获取数字对应的字符串</p><p>for循环，从0开始然后到字符串结束。 为什么不是startIndex 因为这是两个字母集合，然后不需要去判断是不是重复</p><p>然后将每个字符拼接到s中，然后递归，index+1</p><p>然后把放进去的字符拿出来</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">//每次迭代获取一个字符串，所以会设计大量的字符串拼接，所以这里选择更为高效的 StringBuilder</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();    </span><br><span class="line">    List&lt;String&gt; resList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> {</span><br><span class="line">        <span class="keyword">if</span>(digits==<span class="literal">null</span>|| digits.length()==<span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> resList;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//将其放入String[]中</span></span><br><span class="line">        String[] sarr = {<span class="string">""</span>,<span class="string">""</span>,<span class="string">"abc"</span>,<span class="string">"def"</span>,<span class="string">"ghi"</span>,<span class="string">"jkl"</span>,<span class="string">"mno"</span>,<span class="string">"pqrs"</span>,<span class="string">"tuv"</span>,<span class="string">"wxyz"</span>};</span><br><span class="line">        trackbacking(digits,sarr,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">trackbacking</span><span class="params">(String digits,String[] sarr,<span class="type">int</span> index)</span> {</span><br><span class="line">        <span class="keyword">if</span>(index == digits.length()) {</span><br><span class="line">            resList.add(temp.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//从字符串中拿出字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> sarr[digits.charAt(index)-<span class="string">'0'</span>];  <span class="comment">//"2"-'0' = sarr[2] = abc</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ss.length();i++) {</span><br><span class="line">            <span class="comment">//拿出第一个数组字符，拼接到temp中</span></span><br><span class="line">            temp.append(ss.charAt(i));</span><br><span class="line">            <span class="comment">//递归去遍历第二个数组中的字符</span></span><br><span class="line">            trackbacking(digits,sarr,index+<span class="number">1</span>);</span><br><span class="line">            temp.deleteCharAt(temp.length()-<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></h3><p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates = [2,3,6,7], target = 7</span><br><span class="line">输出：[[2,2,3],[7]]</span><br><span class="line">解释：</span><br><span class="line">2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。</span><br><span class="line">7 也是一个候选， 7 = 7 。</span><br><span class="line">仅有这两种组合。</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,5], target = 8</span><br><span class="line">输出: [[2,2,2,2],[2,3,3],[3,5]]</span><br></pre></td></tr></tbody></table></figure><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates); <span class="comment">// 先进行排序</span></span><br><span class="line">        backTracking(res, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// startIndex因为是对一个集合进行的操作，所以需要下标</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; mid, <span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> startIndex,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> sum)</span> {</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (sum == target) {</span><br><span class="line">            <span class="comment">// 符合条件，将mid放入res中</span></span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(mid));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 单层循环 剪枝优化，当前sum+candidates[i]如果大于target的话，就没必要进行下一次递归了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (sum + candidates[i] &gt; target)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            mid.add(candidates[i]);</span><br><span class="line">            <span class="comment">// 关键点:不用i+1了，表示可以重复读取当前的数</span></span><br><span class="line">            backTracking(res, mid, candidates, target, i, sum + candidates[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            <span class="comment">// sum-=candidates[i];</span></span><br><span class="line">            mid.remove(mid.size() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a><a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和 II</a></h3><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; mid = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="comment">//需要先排序</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backTracking(candidates,target,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target,<span class="type">int</span> sum,<span class="type">int</span> startIndex)</span> {</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(sum == target) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(mid));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//剪枝，如果途中sum已经大于target的话，就无需继续递归</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startIndex;i&lt;candidates.length &amp;&amp; sum + candidates[i] &lt;= target;i++) {</span><br><span class="line">            <span class="keyword">if</span>(i&gt;startIndex &amp;&amp; candidates[i-<span class="number">1</span>] == candidates[i]) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            sum+=candidates[i];</span><br><span class="line">            mid.add(candidates[i]);</span><br><span class="line">            backTracking(candidates,target,sum,i+<span class="number">1</span>);</span><br><span class="line">            sum-=candidates[i];</span><br><span class="line">            mid.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="切割问题"><a href="#切割问题" class="headerlink" title="切割问题"></a>切割问题</h2><h3 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a><a href="https://leetcode.cn/problems/palindrome-partitioning/">131. 分割回文串</a></h3><p>如何分割，无重复的、判断回文字符串</p><p>递归终止条件：起始位置大于等于字符串的长度</p><p>单层递归：判断是否是回文字符串，是的话获取这个字段加入到集合中，不是的话直接跳过进行下一次循环。进行递归需要起始位置+1</p><p>回溯：mid集合最后一个位置删除</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> {</span><br><span class="line">        backTracking(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), s, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(List&lt;String&gt; mid, String s, <span class="type">int</span> startIndex)</span> {</span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= s.length()) {</span><br><span class="line">            <span class="comment">// 起始位置已经大于等于s的长度</span></span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(mid));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (isPalindrome(s, startIndex, i)) { <span class="comment">// 是回文子串</span></span><br><span class="line">                <span class="comment">// 获取[startIndex,i]在s中的子串</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(startIndex, i+<span class="number">1</span>);</span><br><span class="line">                mid.add(str);</span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 如果不是则直接跳过</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 切割过的位置，不能重复切割，所以，backtracking(s, i + 1); 传入下一层的起始位置为i + 1。</span></span><br><span class="line">            backTracking(mid, s, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯</span></span><br><span class="line">            mid.remove(mid.size() - <span class="number">1</span>);  <span class="comment">//回溯，恢复上一次递归逻辑之前的数据,截取第二个a然后回撤截取a去i+1截取b，在去执行下一次循环，aab  因为i已经指向了第二个a，再去执行的话，i+1就是b了，所以切割b得到的结果是ab</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start, j = end; i &lt; j; i++, j--) {</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="93-复原-IP-地址"><a href="#93-复原-IP-地址" class="headerlink" title="93. 复原 IP 地址"></a><a href="https://leetcode.cn/problems/restore-ip-addresses/">93. 复原 IP 地址</a></h3><p>找准怎么切割，是否需要起始点（不可重复），终止条件，单层递归</p><p>s转换为StringBuilder，效率更快  一次递归终止条件是   .的个数是3 并且第四个字段满足0-255 然后可以加入集合 并结束</p><p>单层递归， 判断是否符合0-255 符合在后面加入.   然后递归i+2（因为有个.）.的个数也需要+1，然后回溯，将.删除就是i+1  不满足的话直接结束这次递归</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line"></span><br><span class="line">        backTracking(sb, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * startnum 不能重复</span></span><br><span class="line"><span class="comment">     * numSize .的个数，不能超过3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(StringBuilder sb, <span class="type">int</span> startnum, <span class="type">int</span> numSize)</span> {</span><br><span class="line">        <span class="comment">// 递归终止条件 numSize的个数等于3 然后去判断是否满足0-255</span></span><br><span class="line">        <span class="keyword">if</span> (numSize == <span class="number">3</span>) {</span><br><span class="line">            <span class="comment">//判断第四个数是否满足</span></span><br><span class="line">            <span class="keyword">if</span> (valid(sb, startnum, sb.length() - <span class="number">1</span>)) {</span><br><span class="line">                res.add(sb.toString());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 单层递归</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startnum; i &lt; sb.length(); i++) {</span><br><span class="line">            <span class="comment">// 先判断是不是符合0-255</span></span><br><span class="line">            <span class="keyword">if</span> (valid(sb, startnum, i)) {</span><br><span class="line">                sb.insert(i + <span class="number">1</span>, <span class="string">"."</span>); <span class="comment">// 如果满足，然后在满足的最后i+1的位置加一个.</span></span><br><span class="line">                <span class="comment">// 递归下一个 i+2因为中间有个.,numSize.的个数+1</span></span><br><span class="line">                backTracking(sb, i + <span class="number">2</span>, numSize + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//回溯截取的数字,去继续往后截取i+1去判断，然后加再去执行循环</span></span><br><span class="line">                sb.deleteCharAt(i + <span class="number">1</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 不满足直接break</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(StringBuilder s, <span class="type">int</span> start, <span class="type">int</span> end)</span> {</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(start) == <span class="string">'0'</span> &amp;&amp; start != end) { <span class="comment">// 0开头不合法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) {</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) &gt; <span class="string">'9'</span> || s.charAt(i) &lt; <span class="string">'0'</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">            num = num * <span class="number">10</span> + size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">255</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="子集问题"><a href="#子集问题" class="headerlink" title="子集问题"></a>子集问题</h2><p>需要保留每个树节点的子集</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; mid = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        backtracking(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * startIndex 已经取的元素不能再取，不重复的元素</span></span><br><span class="line"><span class="comment">     * 子集，就是获取树的每个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIndex)</span> {</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(mid));</span><br><span class="line">        <span class="comment">// 递归结束的条件</span></span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= nums.length) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 单层递归条件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 将nums[i]放入mid集合</span></span><br><span class="line">            mid.add(nums[i]);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>);</span><br><span class="line">            mid.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="90-子集-II"><a href="#90-子集-II" class="headerlink" title="90. 子集 II"></a><a href="https://leetcode.cn/problems/subsets-ii/">90. 子集 II</a></h3><p>树节点不能重复取相同的数。同树层不能有重复的元素</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; mid = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">//先排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIndex)</span> {</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(mid));</span><br><span class="line">        <span class="comment">// 递归结束的条件</span></span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= nums.length) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 单层递归条件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 说明前后两个数是相同的，需要跳过</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; startIndex &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) { <span class="comment">//i=3 start=2</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 将nums[i]放入mid集合</span></span><br><span class="line">            mid.add(nums[i]);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 递归</span></span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>);</span><br><span class="line">            mid.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="491-非递减子序列"><a href="#491-非递减子序列" class="headerlink" title="491. 非递减子序列"></a><a href="https://leetcode.cn/problems/non-decreasing-subsequences/">491. 非递减子序列</a></h3><p>子序列需要递增，需要去重(但是因为重复的不挨着不能用之前的来去重，需要用set集合来去重)  set集合因为在一次循环里是相同的，同层就可以判断是不是取过值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        backTracking(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIndex)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() &gt; <span class="number">1</span>) {</span><br><span class="line">            <span class="comment">// 大于1，集合元素有两个就放进result中</span></span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 去重 ,因为不能排序，所以相同的不会在一起，就不能用之前的方式去判断</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (!path.isEmpty() &amp;&amp; path.get(path.size() - <span class="number">1</span>) &gt; nums[i] || set.contains(nums[i])) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 先加到path中</span></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            <span class="comment">// 先判断是否在集合中</span></span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            backTracking(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h2><h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></h3><p>排列从0开始，不需要startIndex来标注是否使用过。用used布尔数组，使用过将对应位置设为true，来判断是否需要再一次记录</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 利用used来判断同层是否加过数据</span></span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        backTracking(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (nums.length == path.size()) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (used[i] == <span class="literal">true</span>)</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 记录path存在过元素</span></span><br><span class="line">            <span class="comment">// 没存在就设置为true</span></span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backTracking(nums);</span><br><span class="line">            <span class="comment">//回溯 删除末尾元素，并将其设为false，去加载后面的元素</span></span><br><span class="line">            path.removeLast();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="47-全排列Ⅱ"><a href="#47-全排列Ⅱ" class="headerlink" title="47.全排列Ⅱ"></a>47.全排列Ⅱ</h3><p>给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：</span><br><span class="line">[[1,1,2],</span><br><span class="line"> [1,2,1],</span><br><span class="line"> [2,1,1]]</span><br></pre></td></tr></tbody></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></tbody></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 8</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li></ul><p>思路：同树层不可以使用之前使用过的数，使用set集合来查看是否用过同树层，利用used布尔数组来做排列</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        backTracking(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// 结束</span></span><br><span class="line">        <span class="keyword">if</span> (nums.length == path.size()) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">//同树层是否用过，同一列是否用过，用过跳过取下一个数字</span></span><br><span class="line">            <span class="keyword">if</span> (!set.isEmpty() &amp;&amp; set.contains(nums[i]) || used[i] == <span class="literal">true</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backTracking(nums);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二种，不使用set集合。查看前后两个数是否相同，并且前面的数是否使用过</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backTracking(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// 结束</span></span><br><span class="line">        <span class="keyword">if</span> (nums.length == path.size()) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">//表示 前后两个数相同，并且前面的数使用过是true，要是没使用过的话就可以使用</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; used[i-<span class="number">1</span>] == <span class="literal">true</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (used[i] == <span class="literal">false</span>) {</span><br><span class="line">            <span class="comment">//set.add(nums[i]);</span></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backTracking(nums);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="贪心问题"><a href="#贪心问题" class="headerlink" title="贪心问题"></a>贪心问题</h1><h2 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></h2><p>考虑局部最优，最终实现全局最优</p><p>先排序</p><p>可以考虑大的饼干去喂大的胃口，最终能实现最多。或者最小的胃口去选取最小的饼干。用第一种</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> {</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 大饼干优先喂饭量大的 .优先考虑大胃口而不是大肚子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> g.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; s[index] &gt;= g[i]) {</span><br><span class="line">                index--;</span><br><span class="line">                res++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/10/18/markdown/git/"/>
      <url>/2023/10/18/markdown/git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><span id="more"></span><p>ll/ls查看文件夹中的内容</p><p>cat 打开文件</p><p>touch 新建一个文件</p><p>rm 删除文件</p><p>mkdir 创建文件夹</p><p>rmdir 删除文件夹</p><p>为git设置用户名和email地址</p><p>git config –global user.name=”mykang”</p><p>git config –global user.email=”<a href="mailto:mykang2003@163.com">mykang2003@163.com</a>“</p><p>Git常用命令<br>命令名称作用<br>git config –global user.name 用户名设置用户签名<br>git config –global user.email 邮箱设置用户签名<br>git init初始化本地库<br>git status查看本地库状态<br>git add 文件名添加到暂存区<br>git commit -m “日志信息” 文件名提交到本地库<br>git reflog查看历史记录<br>git reset –hard 版本号版本穿梭</p><p>Git重置——git reflog<br> 适用场景：开发者回退版本后又又又发现当前版本还不如回退前好使，想要再次使用git reset指令回退到指定版本，但是需要查询到指定版本的commit id；</p><p>基础知识:git reflog指令可用来查询开发者的每一条指令，可通过该指令查询到需要的commit id；</p><p>具体指令：</p><p>a）git reflog</p><p>b）git reset –hard b6e4e88</p><h2 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><p>git push [shortName][name]推送至远程仓库</p><p>git branch 列出所有本地分支</p><p>git branch -r远程仓库分支</p><p>git branch -a 两者</p><p>远程仓库操作<br>命令名称作用  ：wq<br>git remote -v查看当前所有远程地址别名<br>git remote add 别名 远程地址起别名<br>git push 别名(remote查看) 分支推送本地分支上的内容到远程仓库<br>git clone 远程地址将远程仓库的内容克隆到本地<br>git pull 远程库地址别名 远程分支名将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</p><p>git add readme.txt：回车确认后无输出；</p><p>git status：查询当前仓库状态，阅读命令行可知即将被提交的修改包括readme.txt；</p><p>git commit -m”本次提交描述”：执行提交操作；</p><p>git status：再次查询当前仓库状态，阅读命令行可知当前仓库无修改需要提交，工作目录下没有文件。</p><p>两者都修改，然后需要add，commit加-i解决冲突</p><p>在目标目录直接使用git log 指令即可导出之前所有的提交日志记录：</p><p> <strong>进阶用法</strong>：<strong>git log –pretty=oneline</strong> ：当日志信息过长时，可使用该指令查询简化的日志记录参数：</p><p><a href="https://blog.csdn.net/xiaoyixiao_/article/details/118446158?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-118446158-blog-125723873.235%5Ev38%5Epc_relevant_anti_vip&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=2">链接</a></p><p><a href="https://blog.csdn.net/MIke_GY/article/details/125723873">Java后端工程师入门学习笔记——Git入门2_java后台管理系统git_MIke_GY的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2023/09/07/hello/"/>
      <url>/2023/09/07/hello/</url>
      
        <content type="html"><![CDATA[<p>My name is 康志远</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax</title>
      <link href="/2023/05/08/markdown/axios/"/>
      <url>/2023/05/08/markdown/axios/</url>
      
        <content type="html"><![CDATA[<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><span id="more"></span><blockquote><ul><li>服务器和客户端传输数据</li><li>动态展示数据</li></ul></blockquote><pre><code> &lt;script&gt;// 创建 XMLHttpRequest 对象var xhttp = new XMLHttpRequest();// 发送请求xhttp.open("GET", "http://localhost:8080/ServletAjax");xhttp.send();//获取响应xhttp.onreadystatechange = function() {    if (this.readyState == 4 &amp;&amp; this.status == 200) {        alert(this.responseText)    }};&lt;/script&gt;</code></pre><h4 id="axios-1"><a href="#axios-1" class="headerlink" title="axios"></a>axios</h4><p>首先引入axios.js包<br><strong>axios-0.18.0.js</strong></p><pre><code>&lt;script src="js/axios-0.18.0.js"&gt;</code></pre><p>其次</p><pre><code> /*  axios({    method:"get",    url:"http://localhost:8080/axiosServlet?username=zhangsan"}).then(function (response) {    alert(response.data);})*/axios({    method:"post",    url:"http://localhost:8080/axiosServlet",    data:"username=zhangsan"}).then(function (response) {    alert(response.data);})</code></pre><h5 id="例子，两种不同方式动态获取用户名是否存在"><a href="#例子，两种不同方式动态获取用户名是否存在" class="headerlink" title="例子，两种不同方式动态获取用户名是否存在"></a>例子，两种不同方式动态获取用户名是否存在</h5><p>判断是否有这个用户名，然后返回true或者false<br>axios接收响应，<strong>因为””+flag  flag是boolean类型没有放在字符池中，==需要在字符常量池中来找，toString可以将它放在里面，记住一定要.toString或者后面不要用 “true”</strong></p><pre><code>&lt;span id="username_err" class="err_msg" style="display: none"&gt;用户名已存在&lt;/span&gt;&lt;script src="js/axios-0.18.0.js"&gt; &lt;/script&gt; &lt;script&gt;document.getElementById("username").onblur= function () { var username = this.value;    // 创建 XMLHttpRequest 对象   /* var xhttp = new XMLHttpRequest();    // 发送请求    xhttp.open("GET", "http://localhost:8080/registerServlet?username=" + username);    xhttp.send();    //获取响应    xhttp.onreadystatechange = function () {        if (this.readyState == 4 &amp;&amp; this.status == 200) {            if (this.responseText == "true") {                //用户名存在显示提示信息                document.getElementById("username_err").style.display='';            }            else {                //用户名不存在显示提示信息                document.getElementById("username_err").style.display='none';            }        }    };*/axios({        method:"get",        url:"http://localhost:8080/registerServlet?username="+username    }).then(function (response) {        var s = (response.data).toString();    if ( s == "true") {        //用户名存在显示提示信息        document.getElementById("username_err").style.display='';    }    else {        //用户名不存在显示提示信息        document.getElementById("username_err").style.display='none';    }    })}&lt;/script&gt;</code></pre><h4 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h4><pre><code>&lt;script&gt;var json = {    "name": "kang",    "id": 4,    "aihao": ["游泳","足球"]};alert(json.aihao);&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2023/05/08/markdown/jdbc/"/>
      <url>/2023/05/08/markdown/jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><span id="more"></span><p><strong>JDBC知识</strong></p><blockquote><ul><li>JDBC的CRUD</li><li>JDBC的主要API</li><li>(Druid)德鲁伊数据库连接池</li></ul></blockquote><h1 id="JDBC-1"><a href="#JDBC-1" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="JDBC的概念"><a href="#JDBC的概念" class="headerlink" title="JDBC的概念"></a>JDBC的概念</h2><p> 使用Java语言操作关系型数据库的一套API（接口），而接口的实现类就是数据库驱动jar包</p><h2 id="Java操作数据库"><a href="#Java操作数据库" class="headerlink" title="Java操作数据库"></a>Java操作数据库</h2><p> 第一步：编写Java代码 </p><pre><code>    //1.注册驱动    Class.forName("com.mysql.cj.jdbc.Driver");    //2.获取连接    String url = "jdbc:mysql://127.0.0.1:3306/db04?useSSL=false";    String username = "root";    String password = "1234";    Connection connection = DriverManager.getConnection(url, username, password);    //3.创建sql语句    String sql = "update account set money=200 where id=1";    //4.获取执行sql的对象statement    Statement stmt = connection.createStatement();    //5.执行sql语句    int count = stmt.executeUpdate(sql);//受影响的行数    //6.输出结果    System.out.println(count);    //7.释放资源    stmt.close();    connection.close();</code></pre><p>第二步：Java代码将SQL发送到MySQL服务端</p><p>第三步：MySQL服务端接收到SQL语句并执行该SQL语句</p><p>第四步：将SQL语句执行的结果返回给Java代码</p><h2 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h2><h4 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h4><p>DriverManager（驱动管理类）作用：</p><ul><li>注册驱动</li><li>获取数据库连接</li></ul><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>Connection（数据库连接对象）作用：</p><ul><li>获取执行 SQL 的对象</li><li>管理事务</li></ul><p>开启事务 ： BEGIN; 或者 START TRANSACTION;<br>提交事务 ： COMMIT;<br>回滚事务 ： ROLLBACK;</p><h4 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h4><p>Statement对象的作用就是用来执行SQL语句</p><h4 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h4><p>ResultSet（结果集对象）</p><h4 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h4><blockquote><h4 id="PreparedStatement作用：-预编译SQL语句并执行：预防SQL注入问题"><a href="#PreparedStatement作用：-预编译SQL语句并执行：预防SQL注入问题" class="headerlink" title="PreparedStatement作用： 预编译SQL语句并执行：预防SQL注入问题"></a>PreparedStatement作用： 预编译SQL语句并执行：预防SQL注入问题</h4></blockquote><pre><code>String sql = "select * from tb_user where username=? and password= ?";System.out.println(sql);//创建sql执行对象PreparedStatement preparedStatement = connection.prepareStatement(sql);//配置参数preparedStatement.setString(1,name);preparedStatement.setString(2,pwd);</code></pre><h2 id="数据库连接池-Druid"><a href="#数据库连接池-Druid" class="headerlink" title="数据库连接池 Druid"></a>数据库连接池 Druid</h2><h3 id="配置druid-properties"><a href="#配置druid-properties" class="headerlink" title="配置druid.properties"></a>配置druid.properties</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">driverClassName=com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="string">url=jdbc:mysql://127.0.0.1:3306/test?useSSL=false&amp;useServerPrepStmts=true</span></span><br><span class="line"><span class="string">username=root</span></span><br><span class="line"><span class="string">password=1234</span></span><br></pre></td></tr></tbody></table></figure><h3 id="初始化连接数量"><a href="#初始化连接数量" class="headerlink" title="初始化连接数量"></a>初始化连接数量</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initialSize=<span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><h3 id="最大连接数"><a href="#最大连接数" class="headerlink" title="最大连接数"></a>最大连接数</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxActive=<span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><h3 id="最大等待时间"><a href="#最大等待时间" class="headerlink" title="最大等待时间"></a>最大等待时间</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxWait=<span class="number">3000</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h3><pre><code>//1.导入jar包//2.定义配置文件//3. 加载配置文件Properties prop = new Properties();prop.load(new FileInputStream("src/druid.properties"));//4. 获取连接池对象DataSource dataSource = DruidDataSourceFactory.createDataSource(prop);//5. 获取数据库连接 ConnectionConnection connection = dataSource.getConnection();//System.out.println(System.getProperty("user.dir"));</code></pre><h2 id="JDBC的CRUD"><a href="#JDBC的CRUD" class="headerlink" title="JDBC的CRUD"></a>JDBC的CRUD</h2><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><pre><code> // 接收页面提交的参数String brandName = "香飘飘";String companyName = "香飘飘";int ordered = 1;String description = "绕地球一圈";int status = 1;//定义执行sql语句String sql = "insert into tb_brand(brand_name, company_name, ordered, description, status) values(?,?,?,?,?);";//获取执行对象，并预编译PreparedStatement pstmt = conn.prepareStatement(sql);//配置参数//4. 设置参数pstmt.setString(1,brandName);pstmt.setString(2,companyName);pstmt.setInt(3,ordered);pstmt.setString(4,description);pstmt.setInt(5,status);//执行sql语句int i = pstmt.executeUpdate();//输出结果System.out.println(i&gt;0);</code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre><code>// 接收页面提交的参数    int id=4;//定义执行sql语句 String sql = "delete from tb_brand where id=?"; //获取执行对象，并预编译  PreparedStatement pstmt = conn.prepareStatement(sql);//配置参数//4. 设置参数  pstmt.setInt(1,id);//执行sql语句int i = pstmt.executeUpdate(); //输出结果  System.out.println(i&gt;0);  pstmt.close();  conn.close();</code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre><code>// 接收页面提交的参数String brandName = "香飘飘";String companyName = "香飘飘";int ordered = 1000;String description = "绕地球三圈";int status = 1;int id=4;//定义执行sql语句String sql = " update tb_brand\n" +" set brand_name  = ?,\n" +" company_name= ?,\n" +" ordered = ?,\n" +" description = ?,\n" +" status  = ?\n" +" where id = ?";//获取执行对象，并预编译PreparedStatement pstmt = conn.prepareStatement(sql);//配置参数//4. 设置参数pstmt.setString(1,brandName);pstmt.setString(2,companyName);pstmt.setInt(3,ordered);pstmt.setString(4,description);pstmt.setInt(5,status);pstmt.setInt(6,id);//执行sql语句int i = pstmt.executeUpdate();//输出结果System.out.println(i&gt;0);pstmt.close();conn.close();</code></pre><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><pre><code>    //定义执行sql语句    String sql = "SELECT * FROM tb_brand;";    //获取执行对象，并预编译    PreparedStatement preparedStatement = conn.prepareStatement(sql);    //配置参数    //执行sql语句，获取结果集    ResultSet rs = preparedStatement.executeQuery();    //6. 处理结果 List&lt;Brand&gt; 封装Brand对象，装载List集合    ArrayList&lt;Brand&gt; arrayList = new ArrayList&lt;&gt;();    Brand brand;    while (rs.next()) {//判断是否有数据，光标下移数据库        //获取数据        int id = rs.getInt("id");        String brandName = rs.getString("brand_name");        String companyName = rs.getString("company_name");        int ordered = rs.getInt("ordered");        String description = rs.getString("description");        int status = rs.getInt("status");        //封装Brand对象        brand = new Brand();        brand.setId(id);        brand.setBrandName(brandName);        brand.setCompanyName(companyName);        brand.setOrdered(ordered);        brand.setDescription(description);        brand.setStatus(status);        //装载集合        arrayList.add(brand);        preparedStatement.close();        conn.close();</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven&amp;&amp;Mybatis</title>
      <link href="/2023/05/08/markdown/maven-mybatis/"/>
      <url>/2023/05/08/markdown/maven-mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven-Mybatis"><a href="#Maven-Mybatis" class="headerlink" title="Maven&amp;&amp;Mybatis"></a>Maven&amp;&amp;Mybatis</h2><span id="more"></span><h4 id="Maven-常用命令"><a href="#Maven-常用命令" class="headerlink" title="Maven 常用命令"></a>Maven 常用命令</h4><blockquote><ul><li><p>compile ：编译</p></li><li><p>clean：清理</p></li><li><p>test：测试</p></li><li><p>package：打包</p></li><li><p>install：安装</p></li></ul></blockquote><h3 id="Mybatis入门及其开发配置"><a href="#Mybatis入门及其开发配置" class="headerlink" title="Mybatis入门及其开发配置"></a>Mybatis入门及其开发配置</h3><h4 id="https-mybatis-org-mybatis-3-zh-sqlmap-xml-html"><a href="#https-mybatis-org-mybatis-3-zh-sqlmap-xml-html" class="headerlink" title="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html"></a><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html</a></h4><h5 id="不采用Mapper代理开发"><a href="#不采用Mapper代理开发" class="headerlink" title="不采用Mapper代理开发"></a>不采用Mapper代理开发</h5><pre><code>    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //2. 获取SqlSession对象，用它来执行sql    SqlSession sqlSession = sqlSessionFactory.openSession();    //3. 执行sql    List&lt;User&gt; users = sqlSession.selectList("test.selectAll");    System.out.println(users);    //4. 释放资源    sqlSession.close();</code></pre><h5 id="采用Mapper代理开发"><a href="#采用Mapper代理开发" class="headerlink" title="采用Mapper代理开发"></a>采用Mapper代理开发</h5><pre><code>    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //2. 获取SqlSession对象，用它来执行sql    SqlSession sqlSession = sqlSessionFactory.openSession();    /*//3. 执行sql    List&lt;User&gt; users = sqlSession.selectList("test.selectAll");*/    UserMapper mapper = sqlSession.getMapper(UserMapper.class);    List&lt;User&gt; users = mapper.selectAll();    System.out.println(users);    //4. 释放资源    sqlSession.close();</code></pre><h5 id="使用Mapper代理方式，必须满足以下要求："><a href="#使用Mapper代理方式，必须满足以下要求：" class="headerlink" title="使用Mapper代理方式，必须满足以下要求："></a>使用Mapper代理方式，必须满足以下要求：</h5><p> 定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下。</p><p> 设置SQL映射文件的namespace属性为Mapper接口全限定名</p><pre><code>&lt;mapper namespace="com.kang.mapper.UserMapper" &gt;&lt;select id="selectAll" resultType="com.kang.pojo.User"&gt;    select * from tb_user;&lt;/select&gt;&lt;/mapper&gt;public interface UserMapper {List&lt;User&gt; selectAll();</code></pre><p>}</p><p> 在 Mapper 接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</p><h5 id="使用-mybatis-动态代理的方式可以自动生成dao接口实现类，不用自己实现dao接口类，简化编程"><a href="#使用-mybatis-动态代理的方式可以自动生成dao接口实现类，不用自己实现dao接口类，简化编程" class="headerlink" title="使用 mybatis 动态代理的方式可以自动生成dao接口实现类，不用自己实现dao接口类，简化编程"></a>使用 mybatis 动态代理的方式可以自动生成dao接口实现类，不用自己实现dao接口类，简化编程</h5><p>前提: </p><blockquote><p>(1)保证mapper.xml文件的namespace和dao接口的 类路径 一致<br>(2)mapper.xml文件中配置的id和dao接口定义的方法的名称一致</p></blockquote><h4 id="Mybatis-CRUD"><a href="#Mybatis-CRUD" class="headerlink" title="Mybatis CRUD"></a>Mybatis CRUD</h4><h5 id="首先获取sqlsession对象"><a href="#首先获取sqlsession对象" class="headerlink" title="首先获取sqlsession对象"></a>首先获取sqlsession对象</h5><pre><code>//获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession(true);//自动提交事务，相当于关闭事务    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);</code></pre><h5 id="mapper去执行相应的方法"><a href="#mapper去执行相应的方法" class="headerlink" title="mapper去执行相应的方法"></a>mapper去执行相应的方法</h5><pre><code>   mapper.add(brand);</code></pre><h5 id="BrandMapper接口"><a href="#BrandMapper接口" class="headerlink" title="BrandMapper接口"></a>BrandMapper接口</h5><pre><code>public interface BrandMapper {/** * 查询所有 * * @return */List&lt;Brand&gt; selectAll();/** * 根据id查询对象 * * @param id * @return */Brand selectAllByIdBrand(int id);/** * 动态查询 * * @param map * @return *///List&lt;Brand&gt; selectCondition(@Param("status") int status, @Param("companyName")String companyName, @Param("brandName") String brandName);List&lt;Brand&gt; selectCondition(Map map);/** * 单条件动态查询 * * @param brand * @return */List&lt;Brand&gt; selectConditionSingle(Brand brand);/*添加 */void add(Brand brand);/*动态更新 */int updateBrand(Brand brand);/*根据id删除 */int deleteByIdInt(int id);/** * 批量删除 * * @param ids * @return *///int deleteByIds(@Param("ids") int[] ids);int deleteByIds(int[] ids);</code></pre><h5 id="BrandMapper-xml"><a href="#BrandMapper-xml" class="headerlink" title="BrandMapper.xml"></a>BrandMapper.xml</h5><pre><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "https://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="com.kang.mapper.BrandMapper"&gt;&lt;resultMap id="brandResultMap" type="com.kang.pojo.Brand"&gt;    &lt;result column="brand_name" property="brandName"/&gt;    &lt;result column="company_name" property="companyName"/&gt;    &lt;!--        id主键名。result普通--&gt;&lt;/resultMap&gt;&lt;!--    resultMap--&gt;&lt;!--    定义resultMap标签--&gt;&lt;!--    在select语句中用resultMap代替resultType--&gt;&lt;!--    查询所有--&gt;&lt;select id="selectAll" resultMap="brandResultMap"&gt;    select * from tb_brand;&lt;/select&gt;&lt;!--    根据id查询品牌信息--&gt;&lt;!--    parameterType指定传入参数类型--&gt;&lt;!--&lt;select id="selectAllByIdBrand" parameterType="int" resultMap="brandResultMap"&gt;    select * from tb_brand where id = #{id}&lt;/select&gt;--&gt;&lt;!--    特殊字符比如 &lt; 写转义字符&amp;lt;或者CDATA区--&gt;&lt;select id="selectAllByIdBrand" parameterType="int" resultMap="brandResultMap"&gt;    select * from tb_brand where id    &lt;![CDATA[    &lt;    ]]&gt;    #{id}&lt;/select&gt;&lt;!--    条件查询--&gt;&lt;!--    &lt;select id="selectCondition" resultMap="brandResultMap"&gt;--&gt;&lt;!--        select * from tb_brand--&gt;&lt;!--        where status = #{status}--&gt;&lt;!--        and company_name like #{companyName}--&gt;&lt;!--        and brand_name like #{brandName};--&gt;&lt;!--    &lt;/select&gt;--&gt;&lt;!--    动态条件查询--&gt;&lt;select id="selectCondition" resultMap="brandResultMap"&gt;    select * from tb_brand    &lt;where&gt;        &lt;if test="status !=null"&gt;            status = #{status}        &lt;/if&gt;        &lt;if test="companyName !=null and companyName != ''"&gt;            and company_name like #{companyName}        &lt;/if&gt;        &lt;if test="brandName !=null and brandName != ''"&gt;            and brand_name like #{brandName};        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;&lt;select id="selectConditionSingle" resultType="com.kang.pojo.Brand"&gt;    select * from tb_brand    &lt;where&gt;        &lt;choose&gt;            &lt;when test="status !=null"&gt;                status = #{status}            &lt;/when&gt;            &lt;when test="companyName !=null and companyName != ''"&gt;                and company_name like #{companyName}            &lt;/when&gt;            &lt;when test="brandName !=null and brandName != ''"&gt;                and company_name like #{companyName}            &lt;/when&gt;            &lt;!--&lt;otherwise&gt;                1=1            &lt;/otherwise&gt;--&gt;        &lt;/choose&gt;    &lt;/where&gt;&lt;/select&gt;&lt;!--返回添加数据的主键 useGeneratedKeys   keyProperty--&gt;&lt;insert id="add" useGeneratedKeys="true" keyProperty="id"&gt;    insert into tb_brand(id,brand_name,company_name,ordered,description,status) value    (#{id},#{brandName},#{companyName},#{ordered},#{description},#{status});&lt;/insert&gt;&lt;update id="updateBrand"&gt;    update tb_brand    &lt;set&gt;        &lt;if test="status !=null"&gt;            status = #{status},        &lt;/if&gt;        &lt;if test="companyName !=null and companyName != ''"&gt;            company_name = #{companyName},        &lt;/if&gt;        &lt;if test="brandName !=null and brandName != ''"&gt;            brand_name = #{brandName},        &lt;/if&gt;        &lt;if test="ordered!=null"&gt;            ordered =#{ordered},        &lt;/if&gt;        &lt;if test="description!=null and description != ''"&gt;            description =#{description}        &lt;/if&gt;    &lt;/set&gt;    where id = #{id}&lt;/update&gt;&lt;delete id="deleteByIdInt"&gt;    delete from tb_brand where id = #{id};&lt;/delete&gt;&lt;!--    collection应为array名称,写ids需要前面加param--&gt;&lt;delete id="deleteByIds"&gt;    delete from tb_brand where id in    &lt;foreach collection="array" item="id" open=" (" close=")" separator=","&gt;        #{id}    &lt;/foreach&gt;    ; &lt;/delete&gt;&lt;/mapper&gt;</code></pre><h5 id="MybatisTest"><a href="#MybatisTest" class="headerlink" title="MybatisTest"></a>MybatisTest</h5><pre><code>public class MybatisTest {@Testpublic void selectAll() throws IOException {    //获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession();    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);    List&lt;Brand&gt; brands = mapper.selectAll();    System.out.println(brands);    sqlSession.close();}@Testpublic void selectAllById() throws IOException {    int id = 1;    //获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession();    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);    Brand brands = mapper.selectAllByIdBrand(id);    System.out.println(brands);    sqlSession.close();}@Testpublic void selectCondition() throws IOException {    int status = 1;    String companyName = "华为";    String brandName = "华为";   //处理参数    companyName = "%" + companyName + "%";    brandName = "%" + brandName + "%";    Map map = new HashMap&lt;&gt;();    map.put("status", status);    map.put("companyName", companyName);    map.put("brandName", brandName);    //获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession();    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);    //List&lt;Brand&gt; brands = mapper.selectCondition(status,companyName,brandName);    List&lt;Brand&gt; brands = mapper.selectCondition(map);    System.out.println(brands);    sqlSession.close();}@Testpublic void selectConditionSingle() throws IOException {    int status = 1;    String companyName = "华为";    String brandName = "华为";   //处理参数    companyName = "%" + companyName + "%";    brandName = "%" + brandName + "%";    /*Map map = new HashMap&lt;&gt;();    map.put("status",status);    map.put("companyName",companyName);    map.put("brandName",brandName);*/    Brand brand = new Brand();    //brand.setStatus(status);    //  brand.setCompanyName(companyName);    //brand.setBrandName(brandName);    //获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession();    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);    //List&lt;Brand&gt; brands = mapper.selectCondition(status,companyName,brandName);    List&lt;Brand&gt; brands = mapper.selectConditionSingle(brand);    System.out.println(brands);    sqlSession.close();}@Testpublic void add() throws IOException {    String companyName = "不哦里哦";    String brandName = "菠萝";    int ordered = 500;    String description = "米家无敌";    int status = 1;    Brand brand = new Brand();    brand.setStatus(status);    brand.setCompanyName(companyName);    //brand.setId(id);    brand.setBrandName(brandName);    brand.setOrdered(ordered);    brand.setDescription(description);    //获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession(true);//自动提交事务，相当于关闭事务    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);    mapper.add(brand);    //提交事务    // sqlSession.commit();    sqlSession.close();}@Testpublic void updateBrand() throws IOException {    String companyName = "不哦里哦";    String brandName = "菠萝";    int ordered = 500;    String description = "菠萝手机";    int status = 1;    int id = 6;    Brand brand = new Brand();    brand.setStatus(status);    brand.setCompanyName(companyName);    brand.setBrandName(brandName);    brand.setOrdered(ordered);    brand.setDescription(description);    brand.setId(id);    //获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession();//自动提交事务，相当于关闭事务    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);    int count = mapper.updateBrand(brand);    //提交事务    // sqlSession.commit();    System.out.println(count);    sqlSession.commit();    sqlSession.close();}@Testpublic void deleteByIdInt() throws IOException {    int id = 6;    //获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession();    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);    int count = mapper.deleteByIdInt(id);    System.out.println(count);    sqlSession.commit();    sqlSession.close();}@Testpublic void deleteByIds() throws IOException {    int[] id = {2, 3};    //获取sqlsession对象    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //获取 mapper接口的代理对象    SqlSession sqlSession = sqlSessionFactory.openSession();    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);    int count = mapper.deleteByIds(id);    System.out.println(count);    sqlSession.commit();    sqlSession.close();}@Testpublic void test() throws FileNotFoundException {    PrintStream printStream = new PrintStream("d:\\d1.txt");    System.setOut(printStream);    printStream.println("你好");    System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out)));//强制重定向到控制台    System.out.println("你好"); }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/2023/05/08/markdown/dong-tai-dai-li/"/>
      <url>/2023/05/08/markdown/dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><span id="more"></span><p>转自 <a href="http://t.csdn.cn/IIBg7">http://t.csdn.cn/IIBg7</a></p><h3 id="动态代理的简介"><a href="#动态代理的简介" class="headerlink" title="动态代理的简介"></a>动态代理的简介</h3><p>Java动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地指定一组接口及委托类对象，便能动态地获得代理类。代理类会负责将所有的方法调用分派到委托对象上反射执行，在分派执行的过程中，开发人员还可以按需调整委托类对象及其功能，这是一套非常灵活有弹性的代理框架。Java动态代理实际上通过反射技术，把代理对象和被代理对象(真实对象)的代理关系建立延迟到程序运行之后，动态创建新的代理类去完成对真实对象的代理操作(可以改变原来真实对象的方法行为)，这一点成为了当前主流的AOP框架和延迟加载功能的基础。本文在查看和编写动态代理相关的代码使用的是JDK11，不过JDK动态代理相关的功能和接口已经相对稳定，不必担心JDK版本升级带来的兼容性问题，但是需要注意由于JDK9引入了模块概念，动态代理的源码也有不少的改动。下文先介绍设计模式中的代理模式，接着会分析JDK动态代理的核心类库、流程和机制，最后分析其底层源码级别实现。</p><h4 id="动态代理问题"><a href="#动态代理问题" class="headerlink" title="动态代理问题"></a>动态代理问题</h4><p><img src="https://s2.loli.net/2023/05/10/vLEm1hyzVHF2NaT.png" alt="wt.png"></p><blockquote><ul><li>1.通过java提供的 Proxy 类帮我们创建代理对象。</li><li>2.动态代理底层操作字节码，自动加载静态代码块，去生成代理类。</li></ul></blockquote><p><img src="https://s2.loli.net/2023/05/10/YA4MJc8hXEFK3B5.png" alt="dtdl.png"></p><blockquote><ul><li>3.生成代理类的时候，根据传的Invocationhandler参数  会在代理类的实现接口的方法里面实现InvocationHandler的invoke（）方法，也就是调用InvocationHandler实现类的invoke方法，然后在InvocationHandler实现类的InvocationHandler方法里加入业务逻辑，而且中间在再通过invoke方法调用被代理类的方法</li></ul></blockquote><h4 id="ClassLoader中的类加载"><a href="#ClassLoader中的类加载" class="headerlink" title="ClassLoader中的类加载"></a>ClassLoader中的类加载</h4><p>类加载过程其实是一个很复杂的过程，主要包括下面的步骤：</p><p>1、加载过程：使用(自定义)类加载器去获取类文件字节码字节类的过程，Class实例在这一步生成，作为方法区的各种数据类型的访问入口。<br>2、验证过程：JVM验证字节码的合法性。<br>3、准备过程：为类变量分配内存并且设置初始值。<br>4、解析过程：JVM把常量池中的符号替换为直接引用。<br>5、初始化过程：执行类构造器<cinit>()方法，<cinit>()方法是编译器自动收集所有类变量的赋值动作和静态代码块中的语句合并生成，收集顺序由语句在源文件中出现的顺序决定，JVM保证在子类<cinit>()方法调用前父类的<cinit>()方法已经执行完毕。<br>ClassLoader#loadClass()方法就是用于控制类加载过程的第一步-加载过程，也就是控制字节码字节数组和类名生成Class实例的过程。</cinit></cinit></cinit></cinit></p><h3 id="设计模式中的代理模式"><a href="#设计模式中的代理模式" class="headerlink" title="设计模式中的代理模式"></a>设计模式中的代理模式</h3><p>代理模式是一种常用的设计模式，其目的就是为其他对象提供一个代理以控制对某个对象的访问。代理类负责为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。</p><h4 id="代理模式主要包括三种角色："><a href="#代理模式主要包括三种角色：" class="headerlink" title="代理模式主要包括三种角色："></a>代理模式主要包括三种角色：</h4><blockquote><ul><li>Subject抽象主题角色：一般定义为抽象类或者接口，是作为功能的定义，提供一系列抽象的功能方法。</li><li>RealSubject具体(真实)主题角色：一般称为被委托角色或者被代理角色，它是Subject的一个具体实现。</li><li>ProxySubject代理主题角色：一般称为委托角色或者代理角色，一般ProxySubject也实现(或者继承)Subject，接收一个具体的Subject实例RealSubject，在RealSubject处理前后做预定义或者后置操作，甚至可以直接忽略RealSubject原来的方法。<br>把上面的类图编写成代码如下：</li></ul></blockquote><pre><code> public interface Subject { void doSomething();} public class RealSubject implements Subject { @Overridepublic void doSomething() {    System.out.println("RealSubject doSomething..."); }} public class ProxySubject implements Subject { private final Subject subject; public ProxySubject(Subject subject) {    this.subject = subject;} @Overridepublic void doSomething() {    subject.doSomething();    doOtherThing();} private void doOtherThing() {    System.out.println("ProxySubject doOtherThing..."); }}  public class Client { public static void main(String[] args) throws Exception {    Subject subject = new RealSubject();    ProxySubject proxySubject = new ProxySubject(subject);    proxySubject.doSomething();  }}</code></pre><p>运行Client  main()输出：</p><pre><code>RealSubject doSomething...ProxySubject doOtherThing...</code></pre><p>代理模式在日常的场景中也经常碰到，比较常见的一个场景就是游戏代练，套进去上面的代码可以写个比较生动的例子：</p><pre><code> public interface Player { void playGame(); } public class I implements Player { @Overridepublic void playGame() {    System.out.println("操作Throwable游戏角色打怪升级");  }} public class ProxyPlayer implements Player { private final Player player; public ProxyPlayer(Player player) {    this.player = player;} @Overridepublic void playGame() {    login();    this.player.playGame();    logout();} private void login() {    System.out.println("登录Throwable游戏角色");} private void logout() {    System.out.println("退出Throwable游戏角色"); }}</code></pre><p>代理模式有几个比较大的优点：</p><p>职责清晰：也就是真实主题角色只需要实现具体的逻辑，不需关注代理类的职责，而代理类也只需要处理预处理和后置的逻辑，类的职责分明。<br>高扩展性：由于职责分明，也就是真实主题角色可以随时修改实现，这样就能通过更新或者替换真实主题的实现并且不改变代理主题角色的情况下改变具体功能。<br>高灵活性：主要体现在后面提到的动态代理。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><ul><li>接口数组中所有接口元素的类修饰符最好一致为public。如果接口数组中存在非default修饰的接口元素，那么接口数组中的所有接口类都要放在同一个包下，并且都要使用default修饰。</li><li>很少情况下我们修改接口的修饰符，默认为public，那么所有代理类的包路径都是com.sun.proxy，全类名是:com.sun.proxy.$ProxyN。</li></ul></blockquote><h4 id="代理类的代码，有如下几个特点："><a href="#代理类的代码，有如下几个特点：" class="headerlink" title="代理类的代码，有如下几个特点："></a>代理类的代码，有如下几个特点：</h4><blockquote><ul><li>1、代理类继承于java.lang.reflect.Proxy，实现了接口数组中的接口元素类，构造函数只有一个InvocationHandler类型的参数。</li><li>2、接口中的所有被代理方法包括equals、toString、hashCode都建立了一个对应的Method私有静态实例，在最后面的静态代码块中实例化。</li><li>3、所有代理方法都是用public final修饰，也就是代理类中的代理方法是不能覆盖的。</li><li>4、所有代理方法都是通过InvocationHandler实例的invoke方法进行调用的，记得第一个参数是代理类实例本身，如果用了在InvocationHandler#invoke()方法实现过程中使用了这个参数有可能造成死循环。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端工具</title>
      <link href="/2023/05/08/markdown/gong-ju/"/>
      <url>/2023/05/08/markdown/gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><span id="more"></span><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="axios和vue"><a href="#axios和vue" class="headerlink" title="axios和vue"></a>axios和vue</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.staticfile.org/vue/2.4.2/vue.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h3><p>阿里云镜像</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;https:<span class="comment">//maven.aliyun.com/repository/public &lt;/url&gt;</span></span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="jdk编译"><a href="#jdk编译" class="headerlink" title="jdk编译"></a>jdk编译</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">&lt;profile&gt;</span><br><span class="line">&lt;id&gt;jdk-<span class="number">1.8</span>&lt;/id&gt;</span><br><span class="line">&lt;activation&gt;</span><br><span class="line">&lt;activeByDefault&gt;<span class="literal">true</span>&lt;/activeByDefault&gt;</span><br><span class="line">&lt;jdk&gt;<span class="number">1.8</span>&lt;/jdk&gt;</span><br><span class="line">&lt;/activation&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;maven.compiler.source&gt;<span class="number">1.8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">&lt;maven.compiler.target&gt;<span class="number">1.8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;maven.compiler.compilerVersion&gt;<span class="number">1.8</span>&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="清理Maven仓库脚本"><a href="#清理Maven仓库脚本" class="headerlink" title="清理Maven仓库脚本"></a>清理Maven仓库脚本</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line">rem create by NettQun</span><br><span class="line">rem 这里写你的仓库路径</span><br><span class="line">set REPOSITORY_PATH=E:\Develop\maven_rep</span><br><span class="line">rem 正在搜索...</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">"delims="</span> %%i <span class="title function_">in</span> <span class="params">(<span class="string">'dir /b /s "%REPOSITORY_PATH%\*lastUpdated*"'</span>)</span> <span class="keyword">do</span> (</span><br><span class="line">echo %%i</span><br><span class="line">del /s /q <span class="string">"%%i"</span></span><br><span class="line">)</span><br><span class="line">rem 搜索完毕</span><br><span class="line">paus</span><br></pre></td></tr></tbody></table></figure><p>创建一个bat文件，然后复制上述脚本进去，修改其中maven本地仓库的地址，保存后双击执行即可。</p><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span> <span class="comment">//如果有个为空，那么不显示在json中</span></span><br></pre></td></tr></tbody></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>① 建一个类实现HandlerInterceptor接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">"token"</span>);</span><br><span class="line"><span class="comment">//判断token是否为空，如果为空也代表未登录 提醒重新登录（401）</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) {</span><br><span class="line">            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//解析token看看是否成功</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">            System.out.println(subject);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"><span class="comment">//如果解析过程中没有出现异常说明是登录状态</span></span><br><span class="line">            <span class="comment">//如果出现了异常，说明未登录，提醒重新登录（401）</span></span><br><span class="line">            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>② 第二实现WebMvcConfigurer接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyInterceptor myInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> {</span><br><span class="line">        registry.addInterceptor(myInterceptor).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/sys_user/login"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类"></a>JWT工具类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      &lt;!--jwt--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">0.9</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> {</span><br><span class="line">    <span class="comment">//有效期为</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> *<span class="number">1000L</span>;<span class="comment">// 60 * 60 *1000 一个小时</span></span><br><span class="line">    <span class="comment">//设置秘钥明文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">"sangeng"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> {</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4.6.0.3 登录接口实现</span></span><br><span class="line"><span class="comment">                数据准备</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span>(ttlMillis==<span class="literal">null</span>){</span><br><span class="line">            ttlMillis=JwtUtil.JWT_TTL;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setId(id) <span class="comment">//唯一的ID</span></span><br><span class="line">                .setSubject(subject) <span class="comment">// 主题 可以是JSON数据</span></span><br><span class="line">                .setIssuer(<span class="string">"sg"</span>) <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now) <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey) <span class="comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class="line"></span><br><span class="line">                .setExpiration(expDate);<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密后的秘钥 secretKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length,</span><br><span class="line">                <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Cors跨域请求解决"><a href="#Cors跨域请求解决" class="headerlink" title="Cors跨域请求解决"></a>Cors跨域请求解决</h3><p>① 实现WebMvcConfigurer</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> {</span><br><span class="line"><span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line"><span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">"*"</span>)</span><br><span class="line"><span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"DELETE"</span>, <span class="string">"PUT"</span>)</span><br><span class="line"><span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line"><span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>② Controller中加入注解@CrossOrigin</p><h3 id="统一返回响应码"><a href="#统一返回响应码" class="headerlink" title="统一返回响应码"></a>统一返回响应码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询到的结果数据，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> {</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> {</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> {</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> {</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> {</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> {</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>自动编译，不需重启项目</p><p>① 引入依赖</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--devtools热部署--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>②</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231119213048392.png" alt="image-20231119213048392"></p><p>③</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231119213103443.png" alt="image-20231119213103443"></p><h3 id="判断字符串是否为NULL"><a href="#判断字符串是否为NULL" class="headerlink" title="判断字符串是否为NULL"></a>判断字符串是否为NULL</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.hasText(str)</span><br></pre></td></tr></tbody></table></figure><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h3><p>① 注解 @ControllerAdvice</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGControllerAdvice</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">handleException</span><span class="params">(Exception e)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>(<span class="number">500</span>,e.getMessage());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>② 实现 HandlerExceptionResolver接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ex</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>① 引入依赖</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--       aop--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>② 开启aop</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231120162259761.png" alt="image-20231120162259761"></p><p>③ 注解切入点</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InvokeLog {</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>④ 配置切面类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标识这是一个切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokeLogAspect</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定切点</span></span><br><span class="line">    <span class="meta">@Pointcut("@annotation(com.sangeng.aop.InvokeLog)")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around("pt()")</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">printInvokeLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> {</span><br><span class="line">    <span class="comment">//目标方法调用前</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getMethod().getName();</span><br><span class="line">        <span class="comment">//类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">        <span class="comment">//方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName1</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        <span class="comment">//调用时传入的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="comment">//被代理对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> joinPoint.getTarget();</span><br><span class="line"></span><br><span class="line">        System.out.println(className+<span class="string">"=="</span>+methodName1+<span class="string">"======"</span>+ Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        System.out.println(methodName + <span class="string">"即将被调用"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            proceed = joinPoint.proceed();</span><br><span class="line">    <span class="comment">//目标方法调用后</span></span><br><span class="line">            System.out.println(methodName + <span class="string">"被调用完了"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable throwable) {</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">    <span class="comment">//目标方法出现异常了</span></span><br><span class="line">            System.out.println(methodName + <span class="string">"出现了异常"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231120162549868.png" alt="image-20231120162549868"></p><h3 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换<img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231120165348281.png" alt="image-20231120165348281"></h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231120165357283.png" alt="image-20231120165357283"></p><p><strong>激活环境</strong></p><p>我们可以再application.yml文件中使用spring.profiles.active属性来配置激活哪个环境。</p><p> 也可以使用虚拟机参数来指定激活环境。例如</p><p> -Dspring.profiles.active=test </p><p>也可以使用命令行参数来激活环境。例如： –spring.profiles.active =test</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231120165329511.png" alt="image-20231120165329511"></p><h3 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h3><p>我们在日常开发中需要对程序内部的运行情况进行监控， 比如：健康度、运行指标、日志信息、线程状 况等等 。而SpringBoot的监控Actuator就可以帮我们解决这些问题。</p><p>① 添加依赖</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>② 配置启用监控端点</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    enabled-by-<span class="keyword">default</span>: <span class="literal">true</span> #配置启用所有端点</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: <span class="string">"*"</span> #web端暴露所有端点</span><br><span class="line">  endpoint:</span><br><span class="line">    health:</span><br><span class="line">      show-details: always</span><br></pre></td></tr></tbody></table></figure><p>③ 常用端点</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231120190728011.png" alt="image-20231120190728011"></p><h3 id="图形化指标监控-SpringBoot-Admin"><a href="#图形化指标监控-SpringBoot-Admin" class="headerlink" title="图形化指标监控(SpringBoot Admin)"></a>图形化指标监控(SpringBoot Admin)</h3><p>①创建SpringBoot Admin Server应用 要求引入spring-boot-admin-starter-server依赖</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>②配置SpringBoot Admin client应用</p><p>在需要监控的应用中加上spring-boot-admin-starter-client依赖</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-admin-starter-client&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.3</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>然后配置SpringBoot Admin Server的地址</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8888</span> <span class="comment">#配置 Admin Server的地址</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Redis工具类"><a href="#Redis工具类" class="headerlink" title="Redis工具类"></a>Redis工具类</h3><p>配置类（序列化和反序列化）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = {"unchecked", "rawtypes"})</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory</span></span><br><span class="line"><span class="params">                                                               connectionFactory)</span> {</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line"><span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"><span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Redis的Utils包</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.BoundSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.HashOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(value = {"unchecked", "rawtypes"})</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span> {</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value    缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout  时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span></span></span><br><span class="line"><span class="params">    Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span> {</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span> {</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit    时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit</span></span><br><span class="line"><span class="params">            unit)</span> {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span> {</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span> {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span> {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存List数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的List数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span> {</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的list对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span> {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="title function_">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span></span></span><br><span class="line"><span class="params">    Set&lt;T&gt; dataSet)</span> {</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation =</span><br><span class="line">                redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">            setOperation.add(it.next());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span> {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span> {</span><br><span class="line">        <span class="keyword">if</span> (dataMap != <span class="literal">null</span>) {</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span> {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往Hash中存入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey  Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span></span></span><br><span class="line"><span class="params">    T value)</span> {</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span> {</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash =</span><br><span class="line">                redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> opsForHash.get(key, hKey);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hkey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hkey)</span> {</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        hashOperations.delete(key, hkey);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys Hash键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span></span></span><br><span class="line"><span class="params">    Collection&lt;Object&gt; hKeys)</span> {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span> {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="JWT工具类-1"><a href="#JWT工具类-1" class="headerlink" title="JWT工具类"></a>JWT工具类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> {</span><br><span class="line">    <span class="comment">//有效期为</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span>;<span class="comment">// 60 * 60 *1000 一个小时</span></span><br><span class="line">    <span class="comment">//设置秘钥明文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">"sangeng"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject)</span> {</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, <span class="literal">null</span>, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject   token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis token超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject, Long ttlMillis)</span> {</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title function_">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis,</span></span><br><span class="line"><span class="params">                                            String uuid)</span> {</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span> (ttlMillis == <span class="literal">null</span>) {</span><br><span class="line">            ttlMillis = JwtUtil.JWT_TTL;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid) <span class="comment">//唯一的ID</span></span><br><span class="line">                .setSubject(subject) <span class="comment">// 主题 可以是JSON数据</span></span><br><span class="line">                .setIssuer(<span class="string">"sg"</span>) <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now) <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey) <span class="comment">//使用HS256对称加密算法签 名, 第二个参数为秘钥</span></span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> {</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, id);<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg "</span>;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> parseJWT(token);</span><br><span class="line">        System.out.println(claims);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密后的秘钥 secretKey</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length,</span><br><span class="line">                <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Redis缓存</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb登录页面的准备</title>
      <link href="/2023/05/08/markdown/yong-hu-deng-lu/"/>
      <url>/2023/05/08/markdown/yong-hu-deng-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><span id="more"></span><blockquote><ul><li>创建Servlet 和静态页面和Mapper</li><li>创建数据库。表，插入数据</li><li>配置Mybatis核心配置文件mybatis-config.xml 和Mapper.xml映射文件和Mapper接口</li><li>依赖添加 mysql驱动，mybatis，junit单元测试 logback日志</li><li>添加获取SqlSessionFactory的工厂SqlSessionFactoryUtils<br> mybatis-config.xml</li></ul></blockquote><pre><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE configuration    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"    "https://mybatis.org/dtd/mybatis-3-config.dtd"&gt;   &lt;configuration&gt;   &lt;!--    别名给ResultType，不需要写com.kang.pojo,不区分大小写--&gt;    &lt;!--    &lt;typeAliases&gt;--&gt;    &lt;!--        &lt;package name="com.kang.pojo"/&gt;--&gt; &lt;!--    &lt;/typeAliases&gt;--&gt;&lt;environments default="development"&gt;    &lt;environment id="development"&gt;        &lt;transactionManager type="JDBC"/&gt;        &lt;dataSource type="POOLED"&gt;            &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;            &lt;property name="url" value="jdbc:mysql:///mybatis?useSSL=false"/&gt;            &lt;property name="username" value="root"/&gt;            &lt;property name="password" value="1234"/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt; &lt;!--    //加载sql映射文件--&gt;&lt;mappers&gt;    &lt;package name = "com.kang.mapper"&gt;&lt;/package&gt;&lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p>logback.xml</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;configuration&gt;&lt;!--    CONSOLE ：表示当前的日志信息是可以输出到控制台的。--&gt;&lt;appender name="Console" class="ch.qos.logback.core.ConsoleAppender"&gt;    &lt;encoder&gt;        &lt;pattern&gt;[%level] %blue(%d{HH:mm:ss.SSS}) %cyan([%thread]) %boldGreen(%logger{15}) - %msg %n&lt;/pattern&gt;    &lt;/encoder&gt;&lt;/appender&gt;&lt;logger name="com.kang" level="DEBUG" additivity="false"&gt;    &lt;appender-ref ref="Console"/&gt;&lt;/logger&gt;&lt;!--  level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF ， 默认debug  &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。  --&gt;&lt;root level="DEBUG"&gt;    &lt;appender-ref ref="Console"/&gt;&lt;/root&gt; &lt;/configuration&gt;    &lt;!-- mybatis --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.5&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mysql 驱动 --&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;8.0.31&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;junit&lt;/groupId&gt;    &lt;artifactId&gt;junit&lt;/artifactId&gt;    &lt;version&gt;4.13&lt;/version&gt;    &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- 添加slf4j日志api --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;    &lt;version&gt;1.7.20&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 添加logback-classic依赖 --&gt;&lt;dependency&gt;    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;    &lt;version&gt;1.2.3&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 添加logback-core依赖 --&gt;&lt;dependency&gt;    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;    &lt;artifactId&gt;logback-core&lt;/artifactId&gt;    &lt;version&gt;1.2.3&lt;/version&gt;&lt;/dependency&gt; &lt;!--JSON转换--&gt;&lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;        &lt;version&gt;1.2.79&lt;/version&gt;    &lt;/dependency&gt;&lt;!-- Lombok --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;        &lt;artifactId&gt;lombok&lt;/artifactId&gt;        &lt;version&gt;1.18.20&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;</code></pre><blockquote><ul><li>Mapper代理开发</li></ul></blockquote><pre><code>    /**   * Mybatis 代理开发    */ public class MyBatisDemo2 {public static void main(String[] args) throws IOException {    //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory    String resource = "mybatis-config.xml";    InputStream inputStream = Resources.getResourceAsStream(resource);    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    //2. 获取SqlSession对象，用它来执行sql    SqlSession sqlSession = sqlSessionFactory.openSession();    //3. 执行sql    //List&lt;User&gt; users = sqlSession.selectList("test.selectAll");    //3.1 获取UserMapper接口的代理对象    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);    List&lt;User&gt; users = userMapper.selectAll();    System.out.println(users);    //4. 释放资源    sqlSession.close();  }}</code></pre><p>SqlSessionFactoryUtils</p><pre><code>package com.kang.utils;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.InputStream;/** * SqlSessionFactory工厂 * @author shkstart * @create 2023-05-18 20:01 */public class SqlSessionFactoryUtils {private  static  SqlSessionFactory sqlSessionFactory;static {    try {        //1. 加载mybatis的核心配置文件，获取 SqlSessionFactory        String resource = "mybatis-config.xml";        InputStream inputStream = Resources.getResourceAsStream(resource);        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    } catch (Exception e){        e.printStackTrace();    }}public  static SqlSessionFactory getSqlSessionFactory(){    return sqlSessionFactory;} }</code></pre><p>然后在单独写       </p><pre><code>     //2. 获取SqlSession对象，用它来执行sql    SqlSession sqlSession = sqlSessionFactory.openSession();</code></pre><h4 id="验证码工具包-CheckCodeUtil"><a href="#验证码工具包-CheckCodeUtil" class="headerlink" title="验证码工具包(CheckCodeUtil)"></a>验证码工具包(CheckCodeUtil)</h4><pre><code>package com.kang.utils;import javax.imageio.ImageIO;import java.awt.*;import java.awt.geom.AffineTransform;import java.awt.image.BufferedImage;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.Arrays;import java.util.Random; /**  * 生成验证码工具类  */ public class CheckCodeUtil {public static final String VERIFY_CODES = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";private static Random random = new Random();/** * 输出随机验证码图片流,并返回验证码值（一般传入输出流，响应response页面端，Web项目用的较多） * * @param w * @param h * @param os * @param verifySize * @return * @throws IOException */public static String outputVerifyImage(int w, int h, OutputStream os, int verifySize) throws IOException {    String verifyCode = generateVerifyCode(verifySize);    outputImage(w, h, os, verifyCode);    return verifyCode;}/** * 使用系统默认字符源生成验证码 * * @param verifySize 验证码长度 * @return */public static String generateVerifyCode(int verifySize) {    return generateVerifyCode(verifySize, VERIFY_CODES);}/** * 使用指定源生成验证码 * * @param verifySize 验证码长度 * @param sources    验证码字符源 * @return */public static String generateVerifyCode(int verifySize, String sources) {    // 未设定展示源的字码，赋默认值大写字母+数字    if (sources == null || sources.length() == 0) {        sources = VERIFY_CODES;    }    int codesLen = sources.length();    Random rand = new Random(System.currentTimeMillis());    StringBuilder verifyCode = new StringBuilder(verifySize);    for (int i = 0; i &lt; verifySize; i++) {        verifyCode.append(sources.charAt(rand.nextInt(codesLen - 1)));    }    return verifyCode.toString();}/** * 生成随机验证码文件,并返回验证码值 (生成图片形式，用的较少) * * @param w * @param h * @param outputFile * @param verifySize * @return * @throws IOException */public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException {    String verifyCode = generateVerifyCode(verifySize);    outputImage(w, h, outputFile, verifyCode);    return verifyCode;}/** * 生成指定验证码图像文件 * * @param w * @param h * @param outputFile * @param code * @throws IOException */public static void outputImage(int w, int h, File outputFile, String code) throws IOException {    if (outputFile == null) {        return;    }    File dir = outputFile.getParentFile();    //文件不存在    if (!dir.exists()) {        //创建        dir.mkdirs();    }    try {        outputFile.createNewFile();        FileOutputStream fos = new FileOutputStream(outputFile);        outputImage(w, h, fos, code);        fos.close();    } catch (IOException e) {        throw e;    }}/** * 输出指定验证码图片流 * * @param w * @param h * @param os * @param code * @throws IOException */public static void outputImage(int w, int h, OutputStream os, String code) throws IOException {    int verifySize = code.length();    BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);    Random rand = new Random();    Graphics2D g2 = image.createGraphics();    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);    // 创建颜色集合，使用java.awt包下的类    Color[] colors = new Color[5];    Color[] colorSpaces = new Color[]{Color.WHITE, Color.CYAN,            Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,            Color.PINK, Color.YELLOW};    float[] fractions = new float[colors.length];    for (int i = 0; i &lt; colors.length; i++) {        colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];        fractions[i] = rand.nextFloat();    }    Arrays.sort(fractions);    // 设置边框色    g2.setColor(Color.GRAY);    g2.fillRect(0, 0, w, h);    Color c = getRandColor(200, 250);    // 设置背景色    g2.setColor(c);    g2.fillRect(0, 2, w, h - 4);    // 绘制干扰线    Random random = new Random();    // 设置线条的颜色    g2.setColor(getRandColor(160, 200));    for (int i = 0; i &lt; 20; i++) {        int x = random.nextInt(w - 1);        int y = random.nextInt(h - 1);        int xl = random.nextInt(6) + 1;        int yl = random.nextInt(12) + 1;        g2.drawLine(x, y, x + xl + 40, y + yl + 20);    }    // 添加噪点    // 噪声率    float yawpRate = 0.05f;    int area = (int) (yawpRate * w * h);    for (int i = 0; i &lt; area; i++) {        int x = random.nextInt(w);        int y = random.nextInt(h);        // 获取随机颜色        int rgb = getRandomIntColor();        image.setRGB(x, y, rgb);    }    // 添加图片扭曲    shear(g2, w, h, c);    g2.setColor(getRandColor(100, 160));    int fontSize = h - 4;    Font font = new Font("Algerian", Font.ITALIC, fontSize);    g2.setFont(font);    char[] chars = code.toCharArray();    for (int i = 0; i &lt; verifySize; i++) {        AffineTransform affine = new AffineTransform();        affine.setToRotation(Math.PI / 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1), (w / verifySize) * i + fontSize / 2, h / 2);        g2.setTransform(affine);        g2.drawChars(chars, i, 1, ((w - 10) / verifySize) * i + 5, h / 2 + fontSize / 2 - 10);    }    g2.dispose();    ImageIO.write(image, "jpg", os);}/** * 随机颜色 * * @param fc * @param bc * @return */private static Color getRandColor(int fc, int bc) {    if (fc &gt; 255) {        fc = 255;    }    if (bc &gt; 255) {        bc = 255;    }    int r = fc + random.nextInt(bc - fc);    int g = fc + random.nextInt(bc - fc);    int b = fc + random.nextInt(bc - fc);    return new Color(r, g, b);}private static int getRandomIntColor() {    int[] rgb = getRandomRgb();    int color = 0;    for (int c : rgb) {        color = color &lt;&lt; 8;        color = color | c;    }    return color;}private static int[] getRandomRgb() {    int[] rgb = new int[3];    for (int i = 0; i &lt; 3; i++) {        rgb[i] = random.nextInt(255);    }    return rgb;}private static void shear(Graphics g, int w1, int h1, Color color) {    shearX(g, w1, h1, color);    shearY(g, w1, h1, color);}private static void shearX(Graphics g, int w1, int h1, Color color) {    int period = random.nextInt(2);    boolean borderGap = true;    int frames = 1;    int phase = random.nextInt(2);    for (int i = 0; i &lt; h1; i++) {        double d = (double) (period &gt;&gt; 1)                * Math.sin((double) i / (double) period                + (6.2831853071795862D * (double) phase)                / (double) frames);        g.copyArea(0, i, w1, 1, (int) d, 0);        if (borderGap) {            g.setColor(color);            g.drawLine((int) d, i, 0, i);            g.drawLine((int) d + w1, i, w1, i);        }    }}private static void shearY(Graphics g, int w1, int h1, Color color) {    int period = random.nextInt(40) + 10; // 50;    boolean borderGap = true;    int frames = 20;    int phase = 7;    for (int i = 0; i &lt; w1; i++) {        double d = (double) (period &gt;&gt; 1)                * Math.sin((double) i / (double) period                + (6.2831853071795862D * (double) phase)                / (double) frames);        g.copyArea(i, 0, 1, h1, 0, (int) d);        if (borderGap) {            g.setColor(color);            g.drawLine(i, (int) d, i, 0);            g.drawLine(i, (int) d + h1, i, h1);        }    }  } }</code></pre><h4 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h4><p>先利用验证码工具包,创建CheckCodeServlet来获取验证码图片，用response来输出流，然后调用工具包拿出验证码来，返回一个里面相对应的字符串，将这个字符串存到session中，以便于和在文本框中输入的验证码做比较是否相同，然后在相应的登录注册地方，来获取表单验证码的name值，和获取存的session值，来判断两者是否相同。前端则用想换一个验证码，则点击换一个，来触发script，从交换id换到图片id，去CheckCodeServlet来重新生成验证码，在依次操作。</p><pre><code>ServletOutputStream outputStream = response.getOutputStream();    String s = CheckCodeUtil.outputVerifyImage(100, 40, outputStream, 4);    //将s存到session，来发送记录session    HttpSession session = request.getSession();    session.setAttribute("checkImg",s);</code></pre><p>判断输入的和图片验证码是否相同</p><pre><code>        String checkCode = request.getParameter("checkCode");        HttpSession session1 = request.getSession();        String checkImg = (String)session.getAttribute("checkImg");        if(!checkImg.equalsIgnoreCase(checkCode)){            request.setAttribute("user_Msg","验证码错误");            request.getRequestDispatcher("login.jsp").forward(request, response);            return;        }</code></pre><p>验证码前端展示</p><pre><code>    &lt;p&gt;        验证码：            &lt;input type="text" name = "checkCode" id = "checkCode"/&gt;            &lt;img id="checkCodeImg" src="checkCodeServlet"&gt;            &lt;a href="#" id="changeImg"&gt;看不清&lt;/a&gt;    &lt;/p&gt;&lt;script&gt;    document.getElementById("changeImg").onclick=function () {        document.getElementById("checkCodeImg").src = "checkCodeServlet?" + new Date().getMilliseconds();    }&lt;/script&gt;</code></pre><h4 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h4><p>先给记住密码弄一个值value=1，然后在登录的时候判断是否value值为1，为1的话代表勾选了记住创建两个Cookie，一个存用户名，一个存密码，设置Cookie使用周期，然后发送Cookie。在jsp文件中动态接收Cookie，在username和password的文本框添加value=”${session.key.value}”,key写Cookie的键值</p><h5 id="发送Cookie"><a href="#发送Cookie" class="headerlink" title="发送Cookie"></a>发送Cookie</h5><pre><code>  //获取表单提交列表中的remember  String remember = request.getParameter("remember"); //判断是否记住登录            if("1".equals(remember)){                //勾选了，发送cookie                Cookie cookie1 = new Cookie("username",username);                Cookie cookie2 = new Cookie("password",password);                cookie1.setMaxAge(60*60*24*7);                cookie2.setMaxAge(60*60*24*7);                response.addCookie(cookie1);                response.addCookie(cookie2);</code></pre><h5 id="接收Cookie"><a href="#接收Cookie" class="headerlink" title="接收Cookie"></a>接收Cookie</h5><pre><code>   &lt;p&gt;Username：&lt;input type="text" id="username" name="username" value="${cookie.username.value}" placeholder="请输入用户名"&gt;&lt;/p&gt;    &lt;p&gt;Password：&lt;input type="password" id="password" name="password" value="${cookie.password.value}" placeholder="请输入密码"&gt;&lt;/p&gt;</code></pre><h5 id="错误信息可以放进request域中，在jsp中用el表达式动态获取"><a href="#错误信息可以放进request域中，在jsp中用el表达式动态获取" class="headerlink" title="错误信息可以放进request域中，在jsp中用el表达式动态获取"></a>错误信息可以放进request域中，在jsp中用el表达式动态获取</h5><pre><code> ${错误信息的键}</code></pre><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><p>以增加为例，先点击新增按钮，然后转向add.jsp，提交add.jsp表单action指向InsertServlet，跳转到InsertServlet ，然后在调用service中insertBrand方法，然后在调用mapper中的方法连接数据库进行插入操作</p><h4 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h4><p>1.判断是否是登录和注册的相关信息，是就直接放行，不是的话就进行登录验证<br>2.判断用户是否登录：session中是否有user信息<br>登录：直接放行<br>未登录：给出提示信息，并且跳转到登录页面</p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>依赖<br>     <dependency><br>            <groupid>com.alibaba</groupid><br>            <artifactid>fastjson</artifactid><br>            <version>1.2.79</version><br>        </dependency></p><p>java-&gt;JSON 序列化<br>     List<brand> brands = brandService.selectAll();</brand></p><pre><code>    //将集合转换为json，序列化    String s = JSON.toJSONString(brands);    //响应数据，考虑中文    response.setContentType("text/json;charset=utf-8");    response.getWriter().write(s);</code></pre><p>JSON-&gt;java 反序列化<br>   服务器接收json数据<br>        //接收数据<br>        //读请求体<br>        BufferedReader reader = request.getReader();<br>        String s = reader.readLine();<br>        //将json转换为对象<br>        Brand brand1 = JSON.parseObject(s, Brand.class);</p><p>事件<br>    //给表单绑定单击事件<br>    document.getElementById(“btn”).onclick = function ()</p><pre><code>//页面加载完成1ho发送ajax请求,增加window.onload =function () </code></pre><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE-SpringBoot知识点</title>
      <link href="/2023/05/08/markdown/gen-zhao-san-geng-xue-java/"/>
      <url>/2023/05/08/markdown/gen-zhao-san-geng-xue-java/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaSE-SpringBoot知识点"><a href="#JavaSE-SpringBoot知识点" class="headerlink" title="JavaSE-SpringBoot知识点"></a>JavaSE-SpringBoot知识点</h2><span id="more"></span><h1 id="跟着三更学JAVA-基础篇"><a href="#跟着三更学JAVA-基础篇" class="headerlink" title="跟着三更学JAVA-基础篇"></a>跟着三更学JAVA-基础篇</h1><h2 id="第一部分：基本数据类型"><a href="#第一部分：基本数据类型" class="headerlink" title="第一部分：基本数据类型"></a>第一部分：基本数据类型</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><table><thead><tr><th></th><th>类型名称</th><th>字节空间</th><th>取值范围</th></tr></thead><tbody><tr><td>整数型</td><td>byte</td><td>1字节(8位)</td><td>-128到127 或者 -2^(8-1)到2^7</td></tr><tr><td></td><td>short</td><td>2</td><td>-2^15到2^15-1</td></tr><tr><td></td><td>int</td><td>4</td><td>-2^31到2^31-1</td></tr><tr><td></td><td>long</td><td>8</td><td>-2^63到2^63-1</td></tr><tr><td>浮点型</td><td>float</td><td>4</td><td>单精度，对小数点精确度不够高</td></tr><tr><td></td><td>double</td><td>8</td><td>双精度，对小数点精确度高</td></tr><tr><td>字符型</td><td>char</td><td>2</td><td>0到65535</td></tr><tr><td></td><td>boolean</td><td>1</td><td>true或false</td></tr></tbody></table><p><strong>引用数据类型</strong>：数组，String</p><p>整数默认为int，小数默认为double</p><h3 id="Java-有哪些数据类型？"><a href="#Java-有哪些数据类型？" class="headerlink" title="Java 有哪些数据类型？"></a>Java 有哪些数据类型？</h3><p><strong>定义：</strong>Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p><p>Java 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-6.png" alt="Java数据类型">Java数据类型</p><p><strong>基本数据类型：</strong></p><ul><li>数值型<ul><li>整数类型（byte、short、int、long）</li><li>浮点类型（float、double）</li></ul></li><li>字符型（char）</li><li>布尔型（boolean）</li></ul><p>Java 基本数据类型范围和默认值：</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>‘u0000’</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>8</td><td>1</td><td>false</td></tr></tbody></table><p><strong>引用数据类型：</strong></p><ul><li>类（class）</li><li>接口（interface）</li><li>数组([])</li></ul><h2 id="第二部分：数组"><a href="#第二部分：数组" class="headerlink" title="第二部分：数组"></a>第二部分：数组</h2><h3 id="动态初始化-长度确定推荐用"><a href="#动态初始化-长度确定推荐用" class="headerlink" title="动态初始化(长度确定推荐用)"></a><strong>动态初始化</strong>(长度确定推荐用)</h3><p>String[] arr = new String[3];初始化字符串数组为3的数组，String为引用数据类型，初始值为null</p><p>int[] arr = new int[3];初始化整形数组为3的数组，int的初始值为0</p><h3 id="静态初始化（已经确定元素值推荐使用）"><a href="#静态初始化（已经确定元素值推荐使用）" class="headerlink" title="静态初始化（已经确定元素值推荐使用）"></a><strong>静态初始化</strong>（已经确定元素值推荐使用）</h3><p>String[] arr = {“kang”,”wang”,”wei”};</p><p>int[] arr = {1,2,3,4};</p><h3 id="数组元素的表示"><a href="#数组元素的表示" class="headerlink" title="数组元素的表示"></a><strong>数组元素的表示</strong></h3><p>arr[0] = 1;</p><p>arr[2] = 3;</p><h3 id="介绍堆栈"><a href="#介绍堆栈" class="headerlink" title="介绍堆栈"></a><strong>介绍堆栈</strong></h3><p><strong>栈</strong>：方法调用都要进栈,局部变量（方法当中定义的变量）都存储在栈中</p><p><strong>堆</strong> ：new出来的东西都在堆中</p><p><strong>数组的内存图</strong></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231008125840813.png" alt="image-20231008125840813"></p><p>数组的实体保存在堆中，数组名实际保存的是数组实体所对应的地址值</p><p><strong>数组中最大值</strong></p><p>用擂台法，将数组第一个值作为擂主，依次让下一个数进入擂台，大于擂台上的数就成为擂主，最后打印这个擂主（从第二个数开始，分别拿元素值和max比较，如果元素值大于max。就把元素值赋值给max）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i&lt; arr.length; i++){</span><br><span class="line">    <span class="keyword">if</span> (arr[i]&gt;max)</span><br><span class="line">    {</span><br><span class="line">        max = arr[i];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>练习2</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入10个值，找出最大值，最小值，总和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            sum += arr[i];</span><br><span class="line">            <span class="keyword">if</span> (arr[i]&gt;max)</span><br><span class="line">            {</span><br><span class="line">                max = arr[i];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (arr[i]&lt;min)</span><br><span class="line">            {</span><br><span class="line">                min = arr[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"max = "</span> + max);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"min = "</span> + min);</span><br></pre></td></tr></tbody></table></figure><p>练习4</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求个位和十位都是7并且是偶数</span></span><br><span class="line">       <span class="type">int</span>[] arr = {<span class="number">171</span>,<span class="number">72</span>,<span class="number">19</span>,<span class="number">16</span>,<span class="number">118</span>,<span class="number">51</span>,<span class="number">210</span>,<span class="number">7</span>,<span class="number">18</span>};</span><br><span class="line">       <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">           <span class="keyword">if</span> (arr[i]%<span class="number">10</span>!=<span class="number">7</span>&amp;&amp;arr[i]/<span class="number">10</span>%<span class="number">10</span>!=<span class="number">7</span>&amp;&amp;arr[i]%<span class="number">2</span>==<span class="number">0</span>) {</span><br><span class="line">               System.out.println(<span class="string">"i = "</span> + arr[i]);</span><br><span class="line">               sum += arr[i];</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">       <span class="comment">/*个位数 i%10</span></span><br><span class="line"><span class="comment">       十位数 i/10%10</span></span><br><span class="line"><span class="comment">       百位数 i/100%10</span></span><br><span class="line"><span class="comment">       千位数 i/1000%10</span></span><br><span class="line"><span class="comment">       */</span>  </span><br></pre></td></tr></tbody></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>对数组元素从大到小进行排序</p><p>冒泡排序：从第一个开始往后一个进行比较，小就互换，直到最后一个数是最小的。再循环一次倒数第二个最小…..依次进行</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231008190533447.png" alt="image-20231008190533447"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>[] arr1 = {<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">43</span>};</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr1.length-<span class="number">1</span>; j++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length - <span class="number">1</span> - j; i++)         {</span><br><span class="line">        <span class="keyword">if</span> (arr1[i] &lt; arr1[i + <span class="number">1</span>]) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr1[i];</span><br><span class="line">            arr1[i] = arr1[i + <span class="number">1</span>];</span><br><span class="line">            arr1[i + <span class="number">1</span>] = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) {</span><br><span class="line">    System.out.println(<span class="string">"arr1 = "</span> + arr1[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="不死神兔"><a href="#不死神兔" class="headerlink" title="不死神兔"></a><strong>不死神兔</strong></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不死神兔,1,1,2,3,5,8,13,21......</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20</span>];</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr3[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;arr3.length; i++) {</span><br><span class="line">    arr3[i] = arr3[i-<span class="number">1</span>]+arr3[i-<span class="number">2</span>];</span><br><span class="line">}</span><br><span class="line">System.out.println(arr3[<span class="number">19</span>]);</span><br></pre></td></tr></tbody></table></figure><h2 id="第三部分：方法"><a href="#第三部分：方法" class="headerlink" title="第三部分：方法"></a>第三部分：方法</h2><h3 id="方法定义格式："><a href="#方法定义格式：" class="headerlink" title="方法定义格式："></a>方法定义格式：</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回类型 变量名 （形参）{</span><br><span class="line">       方法体;</span><br><span class="line">       <span class="keyword">return</span> 返回值;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="第四部分：面向对象"><a href="#第四部分：面向对象" class="headerlink" title="第四部分：面向对象"></a>第四部分：面向对象</h2><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>this关键字：this可以区分成员变量和局部变量，加了this关键字的是成员变量。</p><p>this关键字只能在一个类的成员方法和构造方法中使用</p><ul><li><p>this关键字代表着什么呢？</p><p>哪个对象调用成员方法，就代表那个对象</p></li></ul><h3 id="构造方法和set方法"><a href="#构造方法和set方法" class="headerlink" title="构造方法和set方法"></a>构造方法和set方法</h3><p>构造方法初始化给对象赋值，不能再通过构造方法赋值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> (<span class="string">"张三"</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">new</span> (<span class="string">"李四"</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样是不对的</span></span><br></pre></td></tr></tbody></table></figure><p>但是可以通过set方法给对象重新赋值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> (<span class="string">"张三"</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">s.setName=<span class="string">"李四"</span>;</span><br><span class="line">s.setAge=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//这样是对的</span></span><br></pre></td></tr></tbody></table></figure><h3 id="this和super关键字"><a href="#this和super关键字" class="headerlink" title="this和super关键字"></a>this和super关键字</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231009144754961.png" alt="image-20231009144754961"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a><strong>多态</strong></h3><p>同一个数据类型的不同对象对同一行为有着不同的表现</p><p>比如动物（猫、狗对叫和吃有不同的表现）</p><p><strong>三个条件：</strong></p><ul><li>父类引用指向子类对象</li><li>方法的重写（子类重写父类的方法）</li><li>方法的继承</li></ul><p><strong>访问特点</strong></p><ul><li><p>成员变量：编译看左边，运行看左边。意思是编译的时候看Animal有没有age变量，没有报错，运行的时候看Animal的age的值，值为父类的值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">System.out.println(animal.age);</span><br></pre></td></tr></tbody></table></figure></li><li><p>成员方法：编译看左边，运行看右边。意思是编译的时候看Animal有没有eat方法，没有报错，运行的时候看Dog类中有没有重写父类的eat方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat.eat();</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>向上转型和向下转型</strong></p><ul><li><p>向上转型：子类转父类(绝对安全，自动类型转换)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br></pre></td></tr></tbody></table></figure></li><li><p>向下转型：父类强转为子类(不绝对安全所以必须使用强制类型转化)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog)a;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>instanceof进行类型判断</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(对象 instanceof 类名/接口名)</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line">if (a instanceof  Dog) {</span><br><span class="line">   //a属于狗,将a强转为狗</span><br><span class="line">   Dog dog = Dog(a);</span><br><span class="line">}</span><br><span class="line">if (a instanceof  Cat) {</span><br><span class="line">   //a属于猫,将a强转为猫</span><br><span class="line">   Cat cat = Cat(a);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>static关键字</strong></p><p>static是一个修饰符，被其修饰的成员就属于类了，会被类所有的对象共享</p><p>加了static的变量，可以用类名.变量名/方法名调用</p><p>无需构建实例对象就可以调用这个方法或者变量</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231009184136416.png" alt="image-20231009184136416"></p><ul><li><p>静态方法不能访问非静态的成员</p></li><li><p>静态方法中不能有this关键字</p></li></ul><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231009185104668.png" alt="image-20231009185104668"></p><p><strong>final</strong></p><p>修饰类、成员方法、局部变量、成员变量</p><p>不能继承、不能重写、变为常量赋值之后不能改变、 成员变量必须初始化。有两种初始化方式，一种是直接赋值另一种是再类的所有构造方法中对其赋值</p><p><strong>abstract</strong></p><p>abstract在方法中加入，然后可以提示·让这个方法来重写</p><p>当一个类有一个方法，这个方法在不同的子类中都有不同的实现的时候，在父类中我们没有去写具体的方法体，这个时候就可以使用抽象（不写方法体）</p><p>父类方法有个抽象方法，子类必须重写这个抽象方法</p><p><strong>注意</strong></p><ul><li>抽象类可以有抽象方法</li><li>抽象类不能够直接创建对象</li><li>父类方法有个抽象方法，子类必须重写这个抽象方法或者把这个子类定义成抽象类</li></ul><p><strong>接口</strong></p><p>变量为 public static final </p><p>方法为 public abstract </p><p><strong>接口新增成员</strong></p><ul><li><p>默认方法</p><p>默认方法可以有方法体，可以选择不进行重写 default</p><p>如果两个接口中有相同的默认方法，一个类同时实现了这个两个接口，必须也要重写该方法</p></li><li><p>静态方法</p><p>不让实现类去重写该方法。直接用方法接口.这个方法来体现 static</p></li><li><p>私有方法（jdk9以上）</p><p>可以存在方法体，方法不可以被重写 private</p><p>private static void privateMethod(){</p><p>}</p><p>private void privateMethod(){</p><p>}</p><p>对默认方法和静态方法中的代码进行抽取，提高代码的复用</p></li></ul><p><strong>继承和接口的关系</strong></p><p>继承单继承  </p><p>一个类可以实现多个接口</p><p><strong>抽象类和接口的区别</strong></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231009195119383.png" alt="image-20231009195119383"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231009195154552.png" alt="image-20231009195154552"></p><p><strong>代码块</strong></p><ul><li><p>局部代码块</p><p>控制局部变量的生命周期，想让它再使用完之后尽快销毁，可以把局部变量定义在局部代码块当中，在局部代码块之外不能访问局部代码块里面的内容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        {</span><br><span class="line">            System.out.println(<span class="string">"这是局部代码块"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li><li><p>构造代码块</p><p>创建对象的时候先执行静态代码块，再执行构造方法</p><p>构造方法当中重复的代码，放到构造代码块当中，让其先执行，解决代码重复度</p><p>（用来抽取构造方法中的重复代码，提高代码的复用性）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    System.out.println(<span class="string">"这是构造代码块"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>静态代码块</p><p>调用时机：在类的加载的时候会执行，同一个类在程序运行过程中只会加载一次，所以静态代码块也只会执行一次，并且执行顺序是在构造代码块之前的</p><p>用来给类当中的静态成员变量初始化，来避免用类名调用这个变量的时候没有被初始化</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> {</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> staticNum;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        staticNum = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"这里是静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    {</span><br><span class="line">        age=<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"这里是构造代码块"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="comment">// age =1;</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> {</span><br><span class="line">         <span class="comment">// age =1;</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        {</span><br><span class="line">            System.out.println(<span class="string">"这是局部代码块"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>内部类</strong></p><ul><li><p>局部内部类</p><p>如果想定义一个在方法中临时使用的累时可以使用局部内部类</p><p>换句话说，如果只想让一个方法使用一个类的另一个方法时，定义局部内部类。</p><p>注意事项：局部内部类可以使用外部局部（事实）常量 final</p></li><li><p>成员内部类</p><p>在一个类中定义另外一个类（成员内部类），成员内部类可以访问外部类的私有变量</p><p>外部类名.this.成员名来表示外部类的成员</p><p>成员内部类不能定义静态成员（非静态中不使用静态）</p><p>应用场景：一个类不会单独使用，需要和另外的类一起使用才有意义，并且在用到外部类中的私有方法的时候，可以把这个类定义成内部类</p><p>IntegerCache</p></li><li><p>静态内部类</p><p>静态内部类里面可以定义静态成员变量和静态成员方法</p><p>静态内部类可以调用外部类的（私有的）静态成员变量（事实常量）</p></li><li><p>匿名内部类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 接口名/类名(){</span><br><span class="line">要重写的方法(抽象方法)</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>如果需要创建一个类或者接口的子类对象。但是这个子类只会使用一次，就没有必要创建单独的类。可以使用匿名内部类的形式。</p><p>匿名内部类就相当于一个对象，他是某个类（接口）的子类（实现类）的对象</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inter <span class="title function_">createItr</span><span class="params">()</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//对象的创建格式</span></span><br><span class="line">        <span class="type">Inter</span> <span class="variable">inter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>();</span><br><span class="line">        <span class="keyword">return</span> inter;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inter</span>{</span><br><span class="line">        String s;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        </span><br><span class="line">        Demo02.<span class="built_in">this</span>.age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inter</span><span class="params">()</span> {</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inter</span><span class="params">(String s, <span class="type">int</span> age)</span> {</span><br><span class="line">            <span class="built_in">this</span>.s = s;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">staticMethod</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//可以调用外部类的静态成员变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMe</span><span class="params">()</span>{</span><br><span class="line">            System.out.println(age);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(){</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">                System.out.println(<span class="string">"正在运行"</span>);</span><br><span class="line">            }</span><br><span class="line">        }.run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="第五部分：常用类"><a href="#第五部分：常用类" class="headerlink" title="第五部分：常用类"></a>第五部分：常用类</h2><h3 id="equals和-的区别"><a href="#equals和-的区别" class="headerlink" title="equals和==的区别"></a>equals和==的区别</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">一、对象类型不同</span><br><span class="line"></span><br><span class="line">1、equals()：是超类Object中的方法。</span><br><span class="line"></span><br><span class="line">2、==：是操作符。</span><br><span class="line"></span><br><span class="line">二、比较的对象不同</span><br><span class="line"></span><br><span class="line">1、equals()：用来检测两个对象是否相等，即两个对象的内容是否相等。</span><br><span class="line"></span><br><span class="line">2、==：用于比较引用和比较基本数据类型时具有不同的功能，具体如下：</span><br><span class="line"></span><br><span class="line">（1）、基础数据类型：比较的是他们的值是否相等，比如两个int类型的变量，比较的是变量的值是否一样。</span><br><span class="line"></span><br><span class="line">（2）、引用数据类型：比较的是引用的地址是否相同，比如说新建了两个User对象，比较的是两个User的地址是否一样。</span><br><span class="line"></span><br><span class="line">三、运行速度不同</span><br><span class="line"></span><br><span class="line">1、equals()：没有==运行速度快。</span><br><span class="line"></span><br><span class="line">2、==：运行速度比equals()快，因为==只是比较引用。</span><br><span class="line"></span><br><span class="line">扩展资料：</span><br><span class="line">equals()和==的源码定义：</span><br><span class="line"></span><br><span class="line">public boolean equals(Object obj) {</span><br><span class="line"></span><br><span class="line">return (this == obj);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">由equals的源码可以看出这里定义的equals与==是等效的（Object类中的equals没什么区别），不同的原因就在于有些类（像String、Integer等类）对equals进行了重写。</span><br><span class="line"></span><br><span class="line">但是没有对equals进行重写的类就只能从Object类中继承equals方法，其equals方法与==就也是等效的，除非在此类中重写equals。</span><br><span class="line"></span><br><span class="line">对equals重新需要注意五点：</span><br><span class="line"></span><br><span class="line">1、自反性：对任意引用值X，x.equals(x)的返回值一定为true；</span><br><span class="line"></span><br><span class="line">2、对称性：对于任何引用值x,y,当且仅当y.equals(x)返回值为true时，x.equals(y)的返回值一定为true；</span><br><span class="line"></span><br><span class="line">3、传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true ；</span><br><span class="line"></span><br><span class="line">4、 一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变；</span><br><span class="line"></span><br><span class="line">5、非空性：任何非空的引用值X，x.equals(null)的返回值一定为false 。</span><br><span class="line"></span><br><span class="line">==：</span><br><span class="line">== 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。</span><br><span class="line"></span><br><span class="line">1、比较的是操作符两端的操作数是否是同一个对象。</span><br><span class="line"></span><br><span class="line">2、两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。</span><br><span class="line"></span><br><span class="line">3、比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为true，如：</span><br><span class="line"></span><br><span class="line">int a=10 与 long b=10L 与 double c=10.0都是相同的（为true），因为他们都指向地址为10的堆。</span><br><span class="line"></span><br><span class="line">equals：</span><br><span class="line">equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是==的判断。</span><br><span class="line"></span><br><span class="line">String s="abce"是一种非常特殊的形式,和new 有本质的区别。它是java中唯一不需要new 就可以产生对象的途径。</span><br><span class="line"></span><br><span class="line">以String s="abce";形式赋值在java中叫直接量,它是在常量池中而不是象new一样放在压缩堆中。这种形式的字符串，在JVM内部发生字符串拘留，即当声明这样的一个字符串后，JVM会在常量池中先查找有有没有一个值为"abcd"的对象。</span><br><span class="line"></span><br><span class="line">如果有，就会把它赋给当前引用.即原来那个引用和现在这个引用指点向了同一对象，如果没有，则在常量池中新创建一个“abcd"”，下一次如果有Strings1="abcd"；又会将s1指向“abcd”这个对象，即以这形式声明的字符串，只要值相等，任何多个引用都指向同一对象。</span><br><span class="line"></span><br><span class="line">而String s=new String（"abcd”）；和其它任何对象一样.每调用一次就产生一个对象，只要它们调用。</span><br><span class="line"></span><br><span class="line">也可以这么理解：String str="hello”；先在内存中找是不是有“hello”这个对象，如果有，就让str指向那个“hello”。</span><br><span class="line"></span><br><span class="line">如果内存里没有"hello"，就创建一个新的对象保存"hello”.String str=new String（“hello"）就是不管内存里是不是已经有"hello"这个对象，都新建一个对象保存"hello"。</span><br></pre></td></tr></tbody></table></figure><h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011162154691.png" alt="image-20231011162154691"></p><h3 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h3><p>自动装箱：基本数据类型-&gt;包装类（包装类的valueOf来转化的，-128~127，在的话在Integer缓存的数组当中拿到对应的Integer对象返回，在这个里面的话就相等，不在这个范围里面，就会new一个Integer对象）</p><p>Integer引用数据类型，比较地址值是否相同</p><p>自动拆箱：包装类-&gt;基本数据类型</p><h3 id="StringBuilder的常用方法"><a href="#StringBuilder的常用方法" class="headerlink" title="StringBuilder的常用方法"></a>StringBuilder的常用方法</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011165640479.png" alt="image-20231011165640479"></p><p>String-&gt; StringBuffer/StringBuilder</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String ------- StringBuffer</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">//通过构造方法</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(s);</span><br></pre></td></tr></tbody></table></figure><h3 id="String-和-StringBuilder、StringBuffer-的区别？"><a href="#String-和-StringBuilder、StringBuffer-的区别？" class="headerlink" title="String 和 StringBuilder、StringBuffer 的区别？"></a>String 和 StringBuilder、StringBuffer 的区别？</h3><ul><li>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。</li><li>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。</li><li>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些</li></ul><h2 id="第六部分：异常"><a href="#第六部分：异常" class="headerlink" title="第六部分：异常"></a>第六部分：异常</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>直接处理</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011172005678.png" alt="image-20231011172005678"></p><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>把异常抛出，让调用者来处理</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011171904538.png" alt="image-20231011171904538"></p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">super</span>(msg);<span class="comment">//调用父类</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">"编译时异常"</span>);</span><br></pre></td></tr></tbody></table></figure><p>异常的作用：</p><ul><li>可以帮我们获得具体的错误原因</li><li>可以让方法调用方知道错误的地方</li></ul><h2 id="第七部分：集合"><a href="#第七部分：集合" class="headerlink" title="第七部分：集合"></a>第七部分：集合</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h3 id="List集合特点"><a href="#List集合特点" class="headerlink" title="List集合特点"></a>List集合特点</h3><ul><li>有索引</li><li>可以存储重复元素</li><li>元素存入的顺序和实际存储的顺序相同</li></ul><h3 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011183335381.png" alt="image-20231011183335381"></p><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><ul><li><p>索引遍历</p><p>集合.size()  get()</p></li><li><p>迭代器遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Object&gt; iterator = arrayList.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()){</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在迭代器删除增加数据的时候会引发并发修改异常</p></li><li><p>可以使用for循环遍历来避免；或者就是新建一个集合，然后将需要删除的元素增加到新的集合中，再用原来的集合将新的集合中的元素移除removeAll()</p></li><li><p>foreach也会出现并发修改异常，循环集合的时候（相当于迭代器）</p></li><li><p>集合变数组-&gt;toArray()</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] strings = arrayList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br></pre></td></tr></tbody></table></figure><p>​              后面是new什么类型的返回什么样的数组</p><p><strong>集合遍历四种形式</strong></p><ul><li>for循环遍历</li><li>迭代器遍历</li><li>foreach遍历</li><li>转化为数组再遍历</li></ul><h3 id="LinkedList常用方法"><a href="#LinkedList常用方法" class="headerlink" title="LinkedList常用方法"></a>LinkedList常用方法</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011193855883.png" alt="image-20231011193855883"></p><p>遍历同ArrayList</p><h3 id="ArrayList和LinkedList有什么区别？"><a href="#ArrayList和LinkedList有什么区别？" class="headerlink" title="ArrayList和LinkedList有什么区别？"></a>ArrayList和LinkedList有什么区别？</h3><p>ArrayList数组：查找快，增删慢</p><p>LinkedList链表：相反</p><p><strong>（1）</strong>数据结构不同</p><ul><li>ArrayList基于数组实现</li><li>LinkedList基于双向链表实现</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/collection-2.png" alt="ArrayList和LinkedList的数据结构">ArrayList和LinkedList的数据结构</p><p><strong>（2）</strong> 多数情况下，ArrayList更利于查找，LinkedList更利于增删</p><ul><li>ArrayList基于数组实现，get(int index)可以直接通过数组下标获取，时间复杂度是O(1)；LinkedList基于链表实现，get(int index)需要遍历链表，时间复杂度是O(n)；当然，get(E element)这种查找，两种集合都需要遍历，时间复杂度都是O(n)。</li><li>ArrayList增删如果是数组末尾的位置，直接插入或者删除就可以了，但是如果插入中间的位置，就需要把插入位置后的元素都向前或者向后移动，甚至还有可能触发扩容；双向链表的插入和删除只需要改变前驱节点、后继节点和插入节点的指向就行了，不需要移动元素。</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/collection-3.png" alt="ArrayList和LinkedList中间插入">ArrayList和LinkedList中间插入</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/collection-4.png" alt="ArrayList和LinkedList中间删除">ArrayList和LinkedList中间删除</p><blockquote><p>注意，这个地方可能会出陷阱，LinkedList更利于增删更多是体现在平均步长上，不是体现在时间复杂度上，二者增删的时间复杂度都是O(n)</p></blockquote><p><strong>（3）</strong>是否支持随机访问</p><ul><li>ArrayList基于数组，所以它可以根据下标查找，支持随机访问，当然，它也实现了RandmoAccess 接口，这个接口只是用来标识是否支持随机访问。</li><li>LinkedList基于链表，所以它没法根据序号直接获取元素，它没有实现RandmoAccess 接口，标记不支持随机访问。</li></ul><p><strong>（4）</strong>内存占用，ArrayList基于数组，是一块连续的内存空间，LinkedList基于链表，内存空间不连续，它们在空间占用上都有一些额外的消耗：</p><ul><li>ArrayList是预先定义好的数组，可能会有空的内存空间，存在一定空间浪费</li><li>LinkedList每个节点，需要存储前驱和后继，所以每个节点会占用更多的空间</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="Set集合的特点"><a href="#Set集合的特点" class="headerlink" title="Set集合的特点"></a>Set集合的特点</h4><p>不存储重复值</p><p>没有索引</p><p>不按顺序存储，随机存储</p><h4 id="HashSet集合的特点"><a href="#HashSet集合的特点" class="headerlink" title="HashSet集合的特点"></a>HashSet集合的特点</h4><ul><li>底层数据结构是哈希表</li><li>存储元素和遍历元素顺序可能不一样</li><li>没有索引</li><li>不存在重复元素</li></ul><h4 id="HashSet集合的常用方法"><a href="#HashSet集合的常用方法" class="headerlink" title="HashSet集合的常用方法"></a>HashSet集合的常用方法</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011195713951.png" alt="image-20231011195713951"></p><h4 id="HashSet集合的遍历"><a href="#HashSet集合的遍历" class="headerlink" title="HashSet集合的遍历"></a>HashSet集合的遍历</h4><p>转为数组</p><p>迭代器</p><p>foreach</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011200259331.png" alt="image-20231011200259331"></p><p>key有了之后，然后再添加，会覆盖前面的设置value</p><ul><li><p>对象创建</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; mm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure></li><li><p>常用方法</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231011205506742.png" alt="image-20231011205506742"></p><p>map.put()，如果key已存在，则会覆盖原先的值，并会返回老的值</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"1"</span>,<span class="string">"k"</span>);</span><br><span class="line">map.put(<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String,String&gt; mm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">map.put(<span class="string">"1"</span>,<span class="string">"k"</span>);</span><br><span class="line">map.put(<span class="string">"2"</span>,<span class="string">"z"</span>);</span><br><span class="line">map.put(<span class="string">"3"</span>,<span class="string">"y"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//key 1存在</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> map.put(<span class="string">"1"</span>, <span class="string">"康"</span>);</span><br><span class="line"><span class="comment">//s1=康</span></span><br><span class="line">System.out.println(<span class="string">"s1"</span>+s1);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> map.get(<span class="string">"1"</span>);</span><br><span class="line">System.out.println(<span class="string">"s = "</span> + s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除</span></span><br><span class="line"><span class="type">String</span> <span class="variable">remove</span> <span class="operator">=</span> map.remove(<span class="string">"1"</span>);</span><br><span class="line">System.out.println(<span class="string">"remove = "</span> + remove);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在键再不再</span></span><br><span class="line"><span class="keyword">if</span> (map.containsKey(<span class="string">"1"</span>)){</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> mm.get(<span class="string">"1"</span>);</span><br><span class="line">    System.out.println(<span class="string">"s1 = "</span> + s1);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//清空所有键值对</span></span><br><span class="line">mm.clear();</span><br></pre></td></tr></tbody></table></figure><p><strong>map集合的遍历</strong></p><ul><li><p>map.entrySet() 获取所有key和value，存到set集合中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"1"</span>,<span class="string">"k"</span>);</span><br><span class="line">    map.put(<span class="string">"2"</span>,<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">    Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) {</span><br><span class="line">        System.out.println(<span class="string">"entry.getKey() = "</span> + entry.getKey()+entry.getValue());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>map.keySet 获取的是所有key的值，然后遍历key再获取value</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; strings = map.keySet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String key : strings) {</span><br><span class="line">    System.out.println(key+<span class="string">"+++++"</span>+map.get(key));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>equals和hashCode重写的话，属性值相同就相同，就是同一个对象</p><p>不重写的话，比较的是地址值</p><h2 id="第八部分：泛型"><a href="#第八部分：泛型" class="headerlink" title="第八部分：泛型"></a>第八部分：泛型</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>创建子类的时候可以指定</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Test&lt;T&gt;{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>方法调用时可以指定</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">test</span><span class="params">(T t)</span>{</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>向上转型 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span> <span class="params">(List&lt;? extends Student&gt;)</span></span><br></pre></td></tr></tbody></table></figure><p>只能传入Student类本身和Student类的子类</p><p>向下转型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span> <span class="params">(List&lt;? <span class="built_in">super</span> Student&gt;)</span></span><br></pre></td></tr></tbody></table></figure><p>只能传入泛型为Student类本身和Student类的父类</p><p>泛型上限是在定义类可以使用但是？用E来代替</p><p>泛型下限是在定义方法时常使用</p><h2 id="第九部分：IO"><a href="#第九部分：IO" class="headerlink" title="第九部分：IO"></a>第九部分：IO</h2><h3 id="建对象"><a href="#建对象" class="headerlink" title="建对象"></a>建对象</h3><p>绝对路径：C:\Users\康\Desktop\git\1.txt</p><p>相对路径：1.txt</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231012190150277.png" alt="image-20231012190150277"></p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231012191119070.png" alt="image-20231012191119070"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\1.txt"</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">    System.out.println(<span class="string">"newFile = "</span> + newFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\2"</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">newFile1</span> <span class="operator">=</span> file.mkdir();</span><br><span class="line">    System.out.println(<span class="string">"newFile1 = "</span> + newFile1);</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\1\\2"</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> file3.mkdirs();</span><br><span class="line">    System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="第十部分：递归"><a href="#第十部分：递归" class="headerlink" title="第十部分：递归"></a>第十部分：递归</h2><p>一般循环和递归都能解决，用循环来解决。递归可能导致栈溢出</p><h3 id="求阶乘"><a href="#求阶乘" class="headerlink" title="求阶乘"></a>求阶乘</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jiecheng</span><span class="params">(<span class="type">int</span> i)</span> {</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> i*jiecheng(i-<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归删除文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteFile</span><span class="params">(File file)</span>{</span><br><span class="line">    File[] files = file.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (files!=<span class="literal">null</span>){</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files) {</span><br><span class="line">            <span class="keyword">if</span>(file1.isFile())</span><br><span class="line">            {</span><br><span class="line">                file1.delete();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (file1.isDirectory()){</span><br><span class="line">                {</span><br><span class="line">                deleteFile(file1);</span><br><span class="line">                file1.delete();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="第十一部分：IO流"><a href="#第十一部分：IO流" class="headerlink" title="第十一部分：IO流"></a>第十一部分：IO流</h2><h3 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231013181910168.png" alt="image-20231013181910168"></p><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p>创建对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入流读对象</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"D:\\kzy\\1.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\1.txt"</span>);</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">System.out.println(<span class="string">"fileInputStream1 = "</span> + fileInputStream1);</span><br></pre></td></tr></tbody></table></figure><p>读取fileInputStream 对象</p><p><strong>一次读取一个字节数据</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入流读对象</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"D:\\kzy\\1.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> fileInputStream.read();</span><br><span class="line">sout(read);<span class="comment">//返回值为-1时，停止读取</span></span><br><span class="line"></span><br><span class="line">fileInputStream.close();</span><br></pre></td></tr></tbody></table></figure><p><strong>一次读取一个字节数组</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fileInputStream.read(bytes); <span class="comment">//读取到的长度</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len);</span><br><span class="line">System.out.println(<span class="string">"s = "</span> + s);</span><br><span class="line">fileInputStream.close();</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入流读对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"D:\\kzy\\1.txt"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//将读到的数据放到数组里</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((len=fileInputStream.read(bytes))!=-<span class="number">1</span>){ </span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len)); <span class="comment">//把数组中元素从0到len长度转换成字符串</span></span><br></pre></td></tr></tbody></table></figure><h3 id="资源释放的写法"><a href="#资源释放的写法" class="headerlink" title="资源释放的写法"></a>资源释放的写法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入流读对象</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"D:\\kzy\\1.txt"</span>);</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len=fileInputStream.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line">    <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exceptionq</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//输入流读对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">"D:\\kzy\\1.txt"</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len=fileInputStream.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//可以省略,但最后会执行</span></span><br><span class="line"><span class="comment">//            fileInputStream.close();</span></span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>字节流，复制文件</p><p>字符流，写文本什么的</p><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><p>输出流FileOutputStream写对象</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException {</span><br><span class="line">    //输出流写对象</span><br><span class="line">    FileOutputStream fileOutputStream = new FileOutputStream("D:\\kzy\\1.txt");</span><br><span class="line"></span><br><span class="line">    byte[] bytes = "123".getBytes();</span><br><span class="line">    fileOutputStream.write(bytes);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="文件续写"><a href="#文件续写" class="headerlink" title="文件续写"></a>文件续写</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">"D:\\kzy\\1.txt"</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//append默认为 ：false 在建这个输出流对象的时候就会把原先文件删除</span></span><br><span class="line"><span class="comment">//append默认为 ：true 在建这个输出流对象的时候就会在原先文件继续写</span></span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="string">"123"</span>.getBytes();</span><br><span class="line"></span><br><span class="line">fis.write(bytes);</span><br></pre></td></tr></tbody></table></figure><h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h3><p>首先在目标文件夹中建立一个和原文件一样名字的文件，然后通过输入流读原文件，输出流写文件到目标文件中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">/*FileOutputStream fis = new FileOutputStream("D:\\kzy\\1.txt", true);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        byte[] bytes = "123".getBytes();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        fis.write(bytes);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//编写一个方法来实现文件的复制</span></span><br><span class="line">        <span class="comment">//相当于循环读写，直到数据读取完</span></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\1697274314932.jpg"</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\c"</span>);</span><br><span class="line">        copyFile(srcFile, destDir);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原文件的绝对路径 srcFile</span></span><br><span class="line">    <span class="comment">//目标文件的存放目录路径 destDir</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(File srcFile, File destDir)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">//在目标路径下创建一个和原文件相同的文件,这是按照目录和文件名创建的File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destDir, srcFile.getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取原文件，把读到的文件放到目标文件中</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">//先读到数组里，再从数组中写入</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">            fileOutputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="文件夹的复制"><a href="#文件夹的复制" class="headerlink" title="文件夹的复制"></a>文件夹的复制</h3><p><strong>不考虑有子文件夹</strong></p><p>首先在目标文件夹中建立一个和原文件夹一样名字的文件夹，然后遍历原文件夹，获取所有文件，然后通过以上文件复制，将文件复制到对应的文件夹中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件夹复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">//编写一个方法来实现文件的复制</span></span><br><span class="line">        <span class="comment">//相当于循环读写，直到数据读取完</span></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\test1"</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\test2"</span>);</span><br><span class="line"></span><br><span class="line">        copyDir(srcFile,destDir);</span><br><span class="line">        <span class="comment">//复制一个文件夹，不考虑有子文件夹的</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyDir</span><span class="params">(File srcDir, File destDir)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="keyword">if</span> (!(srcDir.exists() &amp;&amp; srcDir.isDirectory())) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"原文件夹必须存在，并且是文件夹"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!destDir.exists()&amp;&amp; destDir.isDirectory()) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"文件夹必须存在"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//在目标路径下创建一个和原文件相同的文件,这是按照目录和文件名创建的File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destDir, srcDir.getName());</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">        <span class="comment">/*FileInputStream fileInputStream = new FileInputStream(srcDir);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        FileOutputStream fileOutputStream = new FileOutputStream(file);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取原文件夹中所有文件</span></span><br><span class="line">        File[] files = srcDir.listFiles();</span><br><span class="line">        <span class="comment">//把读到的文件放到目标文件夹中</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) {</span><br><span class="line">            copyFile(file, dir);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(File srcFile, File destDir)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">//在目标路径下创建一个和原文件相同的文件,这是按照目录和文件名创建的File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destDir, srcFile.getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取原文件，把读到的文件放到目标文件中</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">//先读到数组里，再从数组中写入</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">            fileOutputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>考虑有子文件夹</strong></p><p>首先在目标文件夹中建立一个和原文件夹一样名字的文件夹，然后遍历原文件夹，获取所有文件，判断是否是文件夹，是文件夹的话通过递归复制，是文件，直接通过以上文件复制，将文件复制到对应的文件夹中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">//编写一个方法来实现文件的复制</span></span><br><span class="line">        <span class="comment">//相当于循环读写，直到数据读取完</span></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\test1"</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\test2"</span>);</span><br><span class="line"></span><br><span class="line">        copyDir(srcFile,destDir);</span><br><span class="line">        <span class="comment">//复制一个文件夹，考虑有子文件夹的</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyDir</span><span class="params">(File srcDir, File destDir)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="keyword">if</span> (!(srcDir.exists() &amp;&amp; srcDir.isDirectory())) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"原文件夹必须存在，并且是文件夹"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!destDir.exists()&amp;&amp; destDir.isDirectory()) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"文件夹必须存在"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//在目标路径下创建一个和原文件相同的文件,这是按照目录和文件名创建的File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destDir, srcDir.getName());</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">        <span class="comment">/*FileInputStream fileInputStream = new FileInputStream(srcDir);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        FileOutputStream fileOutputStream = new FileOutputStream(file);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取原文件夹中所有文件</span></span><br><span class="line">        File[] files = srcDir.listFiles();</span><br><span class="line">        <span class="comment">//把读到的文件放到目标文件夹中</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) {</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) {</span><br><span class="line">                copyFile(file, dir);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory()){</span><br><span class="line">                copyDir(file,dir);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(File srcFile, File destDir)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">//在目标路径下创建一个和原文件相同的文件,这是按照目录和文件名创建的File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destDir, srcFile.getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取原文件，把读到的文件放到目标文件中</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">//先读到数组里，再从数组中写入</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">            fileOutputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编码和解码（字节流）"><a href="#编码和解码（字节流）" class="headerlink" title="编码和解码（字节流）"></a>编码和解码（字节流）</h3><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231014193530811.png" alt="image-20231014193530811" style="zoom:150%;"><p>编码和解码方式相同才不会乱码</p><p>默认时UTF-8</p><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>当我们读取（写入）的是纯文本的形式时，我们可以用字符流来进行操作</p><ul><li><h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符输入流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line"><span class="comment">//        FileReader fileReader = new FileReader("D:\\kzy\\test1\\1.txt");</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\test1\\1.txt"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        //读一个字符</span></span><br><span class="line"><span class="comment">        int len;</span></span><br><span class="line"><span class="comment">        while ((len = fileReader.read())!=-1){</span></span><br><span class="line"><span class="comment">            System.out.println("fileReader.read() = " + (char)len);</span></span><br><span class="line"><span class="comment">        }*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读一个字符数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>*<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span> ((len2 = fileReader.read(chars))!=-<span class="number">1</span>){</span><br><span class="line">            System.out.println(<span class="string">"fileReader.read() = "</span> + <span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        fileReader.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3>write会先将写入的数据放在内存缓冲区,flush或者close时，才会真正写入</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取一个字符</span></span><br><span class="line"><span class="comment">//必须是文件，不能是文件夹</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span>         <span class="title class_">File</span>(<span class="string">"D:\\kzy\\test1\\1.txt"</span>));</span><br><span class="line"></span><br><span class="line">fileWriter.write(<span class="string">"你"</span>);</span><br><span class="line">fileWriter.flush();</span><br><span class="line">fileWriter.write(<span class="string">"最"</span>);</span><br><span class="line">fileWriter.write(<span class="string">"棒"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字符数组</span></span><br><span class="line"><span class="type">char</span>[] chars = <span class="string">"三更草堂"</span>.toCharArray();</span><br><span class="line">fileWriter.write(chars);</span><br><span class="line">fileWriter.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字符串</span></span><br><span class="line">fileWriter.write(<span class="string">"三更草堂"</span>);</span><br><span class="line">fileWriter.close();</span><br></pre></td></tr></tbody></table></figure><p>复制最好使用字节流，可以复制任意的。字符流只能复制文本</p><p><em><strong>字符流会读取字符数组。字节流会读取字节数组</strong></em></p><ul><li>文件复制（字符流）</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo7</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\1.txt"</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\kzy\\c"</span>);</span><br><span class="line">        copyFile(srcFile, destDir);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原文件的绝对路径 srcFile</span></span><br><span class="line">    <span class="comment">//目标文件的存放目录路径 destDir</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(File srcFile, File destDir)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">//在目标路径下创建一个和原文件相同的文件,这是按照目录和文件名创建的File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destDir, srcFile.getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFile);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取原文件，把读到的文件放到目标文件中</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">//先读到数组里，再从数组中写入</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(chars)) != -<span class="number">1</span>) {</span><br><span class="line">            fw.write(chars, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        fr.close();</span><br><span class="line">        fw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="字符流编码的设置"><a href="#字符流编码的设置" class="headerlink" title="字符流编码的设置"></a>字符流编码的设置</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231014202813190.png" alt="image-20231014202813190"></p><h3 id="高效缓冲流"><a href="#高效缓冲流" class="headerlink" title="高效缓冲流"></a>高效缓冲流</h3><p>读数据，先将磁盘的部分数据读到内存缓冲区，然后内存直接读取缓冲区的数据，更快。。。借助内存的缓冲区来减少磁盘IO的次数，提高性能</p><p><strong>分类</strong></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231015144307536.png" alt="image-20231015144307536"></p><p><strong>对象创建</strong></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231015144359968.png" alt="image-20231015144359968"></p><p><strong>特有方法</strong></p><p>BufferedRead:   readLine() 一次读一行，不包括换行符</p><p>BufferedWriter: newLine() 换行符</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"D:\\kzy\\test1\\2.txt"</span>));</span><br><span class="line">    String len;</span><br><span class="line">    <span class="keyword">while</span> ((len=bufferedReader.readLine())!=<span class="literal">null</span>){</span><br><span class="line">        System.out.println(<span class="string">"bufferedReader.readLine() = "</span> + len);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>文件内容的复制</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bfr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"D:\\kzy\\test1\\2.txt"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bfw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">"D:\\kzy\\test1\\1.txt"</span>,<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">    String len;</span><br><span class="line">    <span class="keyword">while</span> ((len=bfr.readLine())!=<span class="literal">null</span>){</span><br><span class="line">            bfw.write(len);</span><br><span class="line">            bfw.newLine();</span><br><span class="line">    }</span><br><span class="line">    bfr.close();</span><br><span class="line">    bfw.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="跟着三更学JAVA-函数式编程"><a href="#跟着三更学JAVA-函数式编程" class="headerlink" title="跟着三更学JAVA-函数式编程"></a>跟着三更学JAVA-函数式编程</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>代码简洁，开发迅速</p></li><li><p>接近自然语言，易于理解</p></li><li><p>易于并发编程</p></li><li><p>条件：是有函数式接口中只有一个abstract方法</p></li></ul><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>不注重方法名，只注重参数和所进行的操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            System.out.println(<span class="string">"线程被启动了"</span>);</span><br><span class="line">        }).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"又被启动了"</span>);</span><br><span class="line">        }</span><br><span class="line">    }).start();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*int cal = cal(new IntBinaryOperator() {</span></span><br><span class="line"><span class="comment">        @Override</span></span><br><span class="line"><span class="comment">        public int applyAsInt(int left, int right) {</span></span><br><span class="line"><span class="comment">            return left + right;</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">    });*/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">cal</span> <span class="operator">=</span> cal((left, right) -&gt; left + right);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"cal = "</span> + cal);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(IntBinaryOperator intBinaryOperator)</span>{</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> intBinaryOperator.applyAsInt(a,b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>参数类型可以省略</li><li>方法体内只有一句代码时大括号的return和唯一依据代码的分号可以省略</li><li>方法只有一个参数时小括号可以省略</li></ul><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><p>更方便的对集合和数组进行操作</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li>单列集合</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 单列集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> {</span><br><span class="line">       ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       arr.add(<span class="number">1</span>);</span><br><span class="line">       arr.add(<span class="number">4</span>);</span><br><span class="line">       arr.add(<span class="number">3</span>);</span><br><span class="line">       arr.add(<span class="number">2</span>);</span><br><span class="line">       <span class="comment">//创建对象</span></span><br><span class="line">       Stream&lt;Integer&gt; stream = arr.stream();</span><br><span class="line">       stream.distinct()</span><br><span class="line">               .filter(integer -&gt; integer&gt;<span class="number">2</span>)</span><br><span class="line">               .forEach(System.out::println);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><ul><li>数组</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> {</span><br><span class="line">       Integer[] arr = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>};</span><br><span class="line">       <span class="comment">//创建对象</span></span><br><span class="line">       Stream&lt;Integer&gt; stream = Arrays.stream(arr);</span><br><span class="line">       <span class="comment">//Stream&lt;Integer&gt; stream = Stream.of(arr);</span></span><br><span class="line">       stream.distinct()</span><br><span class="line">               .filter(integer -&gt; integer&gt;<span class="number">2</span>)</span><br><span class="line">               .forEach(System.out::println);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><ul><li>多列集合</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多列集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> {</span><br><span class="line">        HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"1"</span>,<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">"2"</span>,<span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">"3"</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = map.entrySet().stream();</span><br><span class="line">        stream.filter(entry -&gt; entry.getValue()&gt;<span class="number">2</span>)</span><br><span class="line">                .forEach(entry -&gt; System.out.println(entry.getKey()+entry.getValue()));</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p>去重，去掉相同的元素。如果是判断对象是否相同，要重写equals方法，否则用的是==来比较，比较的是地址值。应该比较属性值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去重</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> {</span><br><span class="line">    ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    arr.add(<span class="number">1</span>);</span><br><span class="line">    arr.add(<span class="number">4</span>);</span><br><span class="line">    arr.add(<span class="number">3</span>);</span><br><span class="line">    arr.add(<span class="number">2</span>);</span><br><span class="line">    arr.add(<span class="number">2</span>);</span><br><span class="line">    arr.add(<span class="number">2</span>);</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    Stream&lt;Integer&gt; stream = arr.stream();</span><br><span class="line">    <span class="comment">//Stream&lt;Integer&gt; stream = Stream.of(arr);</span></span><br><span class="line">    stream.distinct()</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>过滤（筛选）；可以对流中的元素进行条件过滤，符合条件的数据继续存在流中</p><p>例子：查询年龄大于20的数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> {</span><br><span class="line">    HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">"康志远"</span>,<span class="number">20</span>);</span><br><span class="line">    map.put(<span class="string">"翟龙浩"</span>,<span class="number">21</span>);</span><br><span class="line">    map.put(<span class="string">"魏晓静"</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">    Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = map.entrySet().stream();</span><br><span class="line"></span><br><span class="line">    stream.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Map.Entry&lt;String, Integer&gt;&gt;() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Map.Entry&lt;String, Integer&gt; entry)</span> {</span><br><span class="line">            <span class="keyword">return</span> entry.getValue()&gt;<span class="number">19</span>;</span><br><span class="line">        }</span><br><span class="line">    }).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>可以对流进行类型转换和计算</p><p>将流中的Person转为String流获取所有人的名字和每个人的年龄加一</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * map转换类型和计算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> {</span><br><span class="line">       ArrayList&lt;Person&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康志远"</span>,<span class="number">20</span>));</span><br><span class="line">       arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"翟龙浩"</span>,<span class="number">21</span>));</span><br><span class="line">       arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康之源"</span>,<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取所有名字</span></span><br><span class="line">       arrayList.stream()</span><br><span class="line">               .map(person -&gt; person.getName())</span><br><span class="line">               .forEach(s -&gt; System.out.println(s));</span><br><span class="line">       <span class="comment">//年龄加一操作</span></span><br><span class="line">       arrayList.stream()</span><br><span class="line">               .map(person -&gt; person.getAge())</span><br><span class="line">               .map(age-&gt;age+<span class="number">1</span>)</span><br><span class="line">               .forEach(System.out::println);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>对流中的元素进行排序，</p><p><strong>注意：需要对排序的对象进行implements Comparable<t>，并重写compareTo方法</t></strong> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person o)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getAge()-o.getAge();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>或者直接实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.sorted(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> {</span><br><span class="line">        <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>设置最大流，超出的最终被抛弃</p><p>例子：进行降序处理，并去重，然后打印出年龄最大的三位</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行降序处理，并去重，然后打印出年龄最大的三位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span> {</span><br><span class="line">    ArrayList&lt;Person&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康志远"</span>,<span class="number">20</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"翟龙浩"</span>,<span class="number">21</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康2源"</span>,<span class="number">18</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康3源"</span>,<span class="number">20</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康4源"</span>,<span class="number">13</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康5源"</span>,<span class="number">14</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康6源"</span>,<span class="number">24</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康7源"</span>,<span class="number">19</span>));</span><br><span class="line"></span><br><span class="line">    arrayList.stream()</span><br><span class="line">            .distinct()</span><br><span class="line">            .sorted(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> {</span><br><span class="line">                    <span class="keyword">return</span> o2.getAge()-o1.getAge();</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">            .limit(<span class="number">3</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>跳过前n个元素，并返回剩下的元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行降序处理，并去重，然后跳过年龄最大的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span> {</span><br><span class="line">    ArrayList&lt;Person&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康志远"</span>,<span class="number">20</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"翟龙浩"</span>,<span class="number">21</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康2源"</span>,<span class="number">18</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康3源"</span>,<span class="number">20</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康4源"</span>,<span class="number">13</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康5源"</span>,<span class="number">14</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康6源"</span>,<span class="number">24</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康7源"</span>,<span class="number">19</span>));</span><br><span class="line"></span><br><span class="line">    arrayList.stream()</span><br><span class="line">            .distinct()</span><br><span class="line">            .sorted(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person o1, Person o2)</span> {</span><br><span class="line">                    <span class="keyword">return</span> o2.getAge()-o1.getAge();</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">            .skip(<span class="number">1</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>map只能把一个对象转化成另一个对象来作为流中的元素，而flatMap可以将一个对象转化为多个对象来体现</p><ol><li>把一个元素转化为多个元素。比如一个类里面有一个集合元素，flatMap先将这个类中的集合，将他转化为新的流</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    String name;</span><br><span class="line">    Integer age;</span><br><span class="line">    List&lt;Person&gt; list;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印Person中的集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span> {</span><br><span class="line">        ArrayList&lt;Person&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康志远"</span>, <span class="number">20</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"翟龙浩"</span>, <span class="number">21</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康2源"</span>, <span class="number">18</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康3源"</span>, <span class="number">20</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康4源"</span>, <span class="number">13</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康5源"</span>, <span class="number">14</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康6源"</span>, <span class="number">24</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康7源"</span>, <span class="number">19</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setList(arrayList);</span><br><span class="line">        arrayList.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .flatMap((Function&lt;Person, Stream&lt;Person&gt;&gt;) person1 -&gt; {</span><br><span class="line">                    <span class="comment">//拿到Person中集合</span></span><br><span class="line">                    <span class="keyword">return</span> person1.getList().stream();</span><br><span class="line">                }).forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Person&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person o)</span> {</span><br><span class="line">                System.out.println(o.getName());</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h3><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>遍历输出</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有的名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>{</span><br><span class="line">    ArrayList&lt;Person&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康志远"</span>, <span class="number">20</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"翟龙浩"</span>, <span class="number">21</span>));</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康之源"</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有名字</span></span><br><span class="line">    arrayList.stream()</span><br><span class="line">            .map(person -&gt; person.getName())</span><br><span class="line">            .forEach(s -&gt; System.out.println(s));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>用来获取数目，注意有返回值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去掉相同的元素，并统计数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span>{</span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arr.add(<span class="number">1</span>);</span><br><span class="line">        arr.add(<span class="number">4</span>);</span><br><span class="line">        arr.add(<span class="number">3</span>);</span><br><span class="line">        arr.add(<span class="number">2</span>);</span><br><span class="line">        arr.add(<span class="number">2</span>);</span><br><span class="line">        arr.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Stream&lt;Integer&gt; stream = arr.stream();</span><br><span class="line"><span class="comment">//        Stream&lt;Integer&gt; stream = Stream.of(arr);</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stream.distinct()</span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(<span class="string">"count = "</span> + count);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="min和max"><a href="#min和max" class="headerlink" title="min和max"></a>min和max</h4><p>注意有返回值Optional<integer>,一个流完之后，需要在获取另一个流</integer></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大值，最小值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test13</span><span class="params">()</span> {</span><br><span class="line">    ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    arr.add(<span class="number">1</span>);</span><br><span class="line">    arr.add(<span class="number">4</span>);</span><br><span class="line">    arr.add(<span class="number">3</span>);</span><br><span class="line">    arr.add(<span class="number">2</span>);</span><br><span class="line">    arr.add(<span class="number">2</span>);</span><br><span class="line">    arr.add(<span class="number">2</span>);</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    Stream&lt;Integer&gt; stream = arr.stream();</span><br><span class="line">    Optional&lt;Integer&gt; max = stream</span><br><span class="line">            .max(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> {</span><br><span class="line">                    <span class="keyword">return</span> o1 - o2;</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">    Stream&lt;Integer&gt; stream2 = arr.stream();</span><br><span class="line">    Optional&lt;Integer&gt; min = stream2</span><br><span class="line">            .min(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> {</span><br><span class="line">                    <span class="keyword">return</span> o1 - o2;</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">    System.out.println(<span class="string">"max.get() = "</span> + max.get());</span><br><span class="line">    System.out.println(<span class="string">"min.get() = "</span> + min.get());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Person&gt; arrayList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康志远"</span>, <span class="number">20</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"翟龙浩"</span>, <span class="number">21</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康2源"</span>, <span class="number">18</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康3源"</span>, <span class="number">20</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康4源"</span>, <span class="number">13</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康5源"</span>, <span class="number">14</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康6源"</span>, <span class="number">20</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康7源"</span>, <span class="number">19</span>));</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h6 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h6><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个存放名字的集合List</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test14</span><span class="params">()</span> {</span><br><span class="line">    Stream&lt;Person&gt; stream = arrayList.stream();</span><br><span class="line">    List&lt;String&gt; names = stream.map(person -&gt; person.getName())</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(names);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h6><p>可以去重</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个存放名字的集合Set</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test15</span><span class="params">()</span> {</span><br><span class="line">    Stream&lt;Person&gt; stream = arrayList.stream();</span><br><span class="line">    Set&lt;String&gt; names = stream.map(person -&gt; person.getName())</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line">    System.out.println(names);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h6><p>需要new两个Function，一个是key，一个是value</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个存放名字的集合Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test16</span><span class="params">()</span> {</span><br><span class="line">    Stream&lt;Person&gt; stream = arrayList.stream();</span><br><span class="line">    Map&lt;String, Integer&gt; collects = stream.collect(Collectors.toMap(person -&gt; person.getName(), person -&gt; person.getAge()));</span><br><span class="line">    System.out.println(collects);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h6><p>查询是否有任意一个元素符合匹配条件，有一个符合就为true</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询是否有任意一个年龄大于20的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> arrayList.stream()</span><br><span class="line">                .anyMatch(person -&gt; person.getAge() &gt; <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h6><p>查询是否所有元素符合匹配条件，所有符合就为true，有不符合的就为false</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询是否所有年龄大于20的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> {</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> arrayList.stream()</span><br><span class="line">                .allMatch(person -&gt; person.getAge() &gt; <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h6><p>查询是否所有元素都不符合匹配条件，都不符合就为true，有符合的就为false</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询是否都不符合年龄大于23 noneMatch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> arrayList.stream()</span><br><span class="line">            .noneMatch(person -&gt; person.getAge() &gt; <span class="number">23</span>);</span><br><span class="line">    System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h6><p>获取任意一个符合条件的元素，不一定是第一个元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询是否有年龄大于19的，有的话给出任意一个人的名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> {</span><br><span class="line">    Optional&lt;Person&gt; persons = arrayList.stream()</span><br><span class="line">            .filter(person -&gt; person.getAge() &gt; <span class="number">19</span>)</span><br><span class="line">            .findAny();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Optional来避免出现空指针异常的情况。以下是如果返回的结果中有对象的话，打印对象的名字</span></span><br><span class="line">       persons.ifPresent(person -&gt; System.out.println(<span class="string">"person = "</span> + person.getName()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h6><p>查找第一个元素</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询年龄最小的人的名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> {</span><br><span class="line">    Optional&lt;Person&gt; person = arrayList.stream()</span><br><span class="line">            .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())</span><br><span class="line">            .findFirst();</span><br><span class="line">    person.ifPresent(person1 -&gt; System.out.println(<span class="string">"person1 = "</span> + person1.getName()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h6><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231017110844185.png" alt="image-20231017110844185"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231017111013908.png" alt="image-20231017111013908"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231017111714683.png" alt="image-20231017111714683"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算所有年龄的和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> arrayList.stream()</span><br><span class="line">            .map(person -&gt; person.getAge()) <span class="comment">//先将流中的person转化为年龄integer类型</span></span><br><span class="line">            .reduce(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">BinaryOperator</span>&lt;Integer&gt;() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(Integer result, Integer integer)</span> {</span><br><span class="line">                    <span class="keyword">return</span> result + integer;</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">    System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算年龄中的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> arrayList.stream()</span><br><span class="line">                .map(person -&gt; person.getAge()) <span class="comment">//先将流中的person转化为年龄integer类型</span></span><br><span class="line">                .reduce(Integer.MIN_VALUE, (result, element) -&gt; result &lt; element ? element : result);</span><br><span class="line">        System.out.println(<span class="string">"max = "</span> + max);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算年龄中的最最小值，初始值默认为第一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span> {</span><br><span class="line">        Optional&lt;Integer&gt; min = arrayList.stream()</span><br><span class="line">                .map(person -&gt; person.getAge()) <span class="comment">//先将流中的person转化为年龄integer类型</span></span><br><span class="line">                .reduce((result, element) -&gt; result &gt; element ? element : result);</span><br><span class="line">        System.out.println(<span class="string">"min = "</span> + min);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231017124616237.png" alt="image-20231017124616237"></p><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><h4 id="4-1概述"><a href="#4-1概述" class="headerlink" title="4.1概述"></a>4.1概述</h4><p>编写代码最多的是空指针异常，所以我们需要做各种非空判断</p><p>利用Optional来处理是否为空</p><h4 id="4-2使用"><a href="#4-2使用" class="headerlink" title="4.2使用"></a>4.2使用</h4><h5 id="4-2-1创建对象"><a href="#4-2-1创建对象" class="headerlink" title="4.2.1创建对象"></a>4.2.1<strong>创建对象</strong></h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231017142336922.png" alt="image-20231017142336922"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//List&lt;Person&gt; personList = getList();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Optional&lt;List&lt;Person&gt;&gt; personList1 = Optional.ofNullable(personList);</span></span><br><span class="line"></span><br><span class="line">        Optional&lt;List&lt;Person&gt;&gt; list = getList();</span><br><span class="line">        list.ifPresent(people -&gt; System.out.println(<span class="string">"people = "</span> + people));</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">//        Person person = null;</span></span><br><span class="line">        <span class="comment">//of创建Optional对象，这个必须不为null</span></span><br><span class="line">        Optional&lt;Person&gt; person1 = Optional.of(person);</span><br><span class="line">        person1.ifPresent(person2 -&gt; System.out.println(<span class="string">"person2 = "</span> + person2));</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Optional&lt;List&lt;Person&gt;&gt; <span class="title function_">getList</span><span class="params">()</span> {</span><br><span class="line">        ArrayList&lt;Person&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康志远"</span>, <span class="number">20</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"翟龙浩"</span>, <span class="number">21</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康2源"</span>, <span class="number">18</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康3源"</span>, <span class="number">20</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康4源"</span>, <span class="number">13</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康5源"</span>, <span class="number">14</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康6源"</span>, <span class="number">24</span>));</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">"康7源"</span>, <span class="number">19</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(arrayList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="4-2-1安全消费值"><a href="#4-2-1安全消费值" class="headerlink" title="4.2.1安全消费值"></a><strong>4.2.1安全消费值</strong></h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.ifPresent(people -&gt; System.out.println(<span class="string">"people = "</span> + people));</span><br></pre></td></tr></tbody></table></figure><h5 id="4-2-2安全的获取值"><a href="#4-2-2安全的获取值" class="headerlink" title="4.2.2安全的获取值"></a>4.2.2安全的获取值</h5><p>get 获取值</p><p>orElseGet 如果有值返回值，没值返回设定的默认值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;List&lt;Person&gt;&gt; list = getList();</span><br><span class="line"><span class="comment">//如果有值返回值，没有值的话返回null</span></span><br><span class="line">List&lt;Person&gt; personList = list.orElseGet(() -&gt; <span class="literal">null</span>);</span><br><span class="line">System.out.println(<span class="string">"personList = "</span> + personList);</span><br></pre></td></tr></tbody></table></figure><p>orElseThrow 如果有值返回值，没值返回设定异常类型提示信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果有值返回值，没有值的话执行异常</span></span><br><span class="line">List&lt;Person&gt; personList = list.orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"空指针"</span>));</span><br><span class="line">System.out.println(<span class="string">"personList = "</span> + personList);</span><br></pre></td></tr></tbody></table></figure><h5 id="4-2-3过滤"><a href="#4-2-3过滤" class="headerlink" title="4.2.3过滤"></a>4.2.3过滤</h5><p>我们可以使用这个方法对数据进行过滤，如果原本有数据，但是不符合判断，也会变成一个无数据的Optional对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Person&gt; list = Optional.ofNullable(getList());</span><br><span class="line"></span><br><span class="line">list.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Person&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Person person)</span> {</span><br><span class="line">        <span class="keyword">return</span> person.getAge()&gt;<span class="number">18</span>;</span><br><span class="line">    }</span><br><span class="line">}).ifPresent(person -&gt; System.out.println(<span class="string">"person = "</span> + person.getName()));</span><br></pre></td></tr></tbody></table></figure><h5 id="4-2-4判断"><a href="#4-2-4判断" class="headerlink" title="4.2.4判断"></a>4.2.4判断</h5><p>判断是否存在数据进行判断，如果为空fasle不为空true</p><p>isPersent()</p><h5 id="4-2-5数据转换"><a href="#4-2-5数据转换" class="headerlink" title="4.2.5数据转换"></a>4.2.5数据转换</h5><p>和map、flatMap相似</p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>​<strong>只有一个抽象方法</strong>的接口我们称之为函数接口。</p><p>​JDK的函数式接口都加上了**@FunctionalInterface** 注解进行标识。但是无论是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p><h3 id="5-2-常见函数式接口"><a href="#5-2-常见函数式接口" class="headerlink" title="5.2 常见函数式接口"></a>5.2 常见函数式接口</h3><ul><li><p>​Consumer 消费接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数进行消费。</p><p><img src="D:/Java自学/函数式编程/函数式编程/函数式编程.assets/image-20211028145622163-16354041894551.png" alt="image-20211028145622163"></p></li><li><p>​Function 计算转换接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数计算或转换，把结果返回</p><p><img src="D:/Java自学/函数式编程/函数式编程/函数式编程.assets/image-20211028145707862-16354042291112.png" alt="image-20211028145707862"></p></li><li><p>​Predicate 判断接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数条件判断，返回判断结果</p><p><img src="D:/Java自学/函数式编程/函数式编程/函数式编程.assets/image-20211028145818743-16354043004393.png" alt="image-20211028145818743"></p></li><li><p>​Supplier 生产型接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回</p></li></ul><p><img src="D:/Java自学/函数式编程/函数式编程/函数式编程.assets/image-20211028145843368-16354043246954.png" alt="image-20211028145843368"></p><h3 id="5-3-常用的默认方法"><a href="#5-3-常用的默认方法" class="headerlink" title="5.3 常用的默认方法"></a>5.3 常用的默认方法</h3><ul><li><p>and</p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而and方法相当于是使用&amp;&amp;来拼接两个判断条件</p><p>例如：</p><p>打印作家中年龄大于17并且姓名的长度大于1的作家。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line">authorStream.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> {</span><br><span class="line">        <span class="keyword">return</span> author.getAge()&gt;<span class="number">17</span>;</span><br><span class="line">    }</span><br><span class="line">}.and(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> {</span><br><span class="line">        <span class="keyword">return</span> author.getName().length()&gt;<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">})).forEach(author -&gt; System.out.println(author));</span><br></pre></td></tr></tbody></table></figure></li><li><p>or </p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而or方法相当于是使用||来拼接两个判断条件。</p><p>例如：</p><p>打印作家中年龄大于17或者姓名的长度小于2的作家。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印作家中年龄大于17或者姓名的长度小于2的作家。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()</span><br><span class="line">                .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> {</span><br><span class="line">                        <span class="keyword">return</span> author.getAge()&gt;<span class="number">17</span>;</span><br><span class="line">                    }</span><br><span class="line">                }.or(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> {</span><br><span class="line">                        <span class="keyword">return</span> author.getName().length()&lt;<span class="number">2</span>;</span><br><span class="line">                    }</span><br><span class="line">                })).forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></tbody></table></figure></li><li><p>negate</p><p>Predicate接口中的方法。negate方法相当于是在判断添加前面加了个! 表示取反</p><p>例如：</p><p>打印作家中年龄不大于17的作家。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印作家中年龄不大于17的作家。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()</span><br><span class="line">                .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> {</span><br><span class="line">                        <span class="keyword">return</span> author.getAge()&gt;<span class="number">17</span>;</span><br><span class="line">                    }</span><br><span class="line">                }.negate()).forEach(author -&gt; System.out.println(author.getAge()));</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>​我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法）,我们可以用方法引用进一步简化代码。</p><h3 id="6-1-推荐用法"><a href="#6-1-推荐用法" class="headerlink" title="6.1 推荐用法"></a>6.1 推荐用法</h3><p>​我们在使用lambda时不需要考虑什么时候用方法引用，用哪种方法引用，方法引用的格式是什么。我们只需要在写完lambda方法发现方法体只有一行代码，并且是方法的调用时使用快捷键尝试是否能够转换成方法引用即可。</p><p>​当我们方法引用使用的多了慢慢的也可以直接写出方法引用。</p><h3 id="6-2-基本格式"><a href="#6-2-基本格式" class="headerlink" title="6.2 基本格式"></a>6.2 基本格式</h3><p>​类名或者对象名::方法名</p><h3 id="6-3-语法详解-了解"><a href="#6-3-语法详解-了解" class="headerlink" title="6.3 语法详解(了解)"></a>6.3 语法详解(了解)</h3><h4 id="6-3-1-引用类的静态方法"><a href="#6-3-1-引用类的静态方法" class="headerlink" title="6.3.1 引用类的静态方法"></a>6.3.1 引用类的静态方法</h4><p>​其实就是引用类的静态方法</p><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::方法名</span><br></pre></td></tr></tbody></table></figure><h5 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的静态方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个静态方法中</strong>，这个时候我们就可以引用类的静态方法。</p><p>​</p><p>例如：</p><p>如下代码就可以用方法引用进行简化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"></span><br><span class="line">authorStream.map(author -&gt; author.getAge())</span><br><span class="line">        .map(age-&gt;String.valueOf(age));</span><br></pre></td></tr></tbody></table></figure><p>注意，如果我们所重写的方法是没有参数的，调用的方法也是没有参数的也相当于符合以上规则。</p><p>优化后如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"></span><br><span class="line">authorStream.map(author -&gt; author.getAge())</span><br><span class="line">        .map(String::valueOf);</span><br></pre></td></tr></tbody></table></figure><h4 id="6-3-2-引用对象的实例方法"><a href="#6-3-2-引用对象的实例方法" class="headerlink" title="6.3.2 引用对象的实例方法"></a>6.3.2 引用对象的实例方法</h4><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名::方法名</span><br></pre></td></tr></tbody></table></figure><h5 id="使用前提-1"><a href="#使用前提-1" class="headerlink" title="使用前提"></a>使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用对象的实例方法</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">authorStream.map(author -&gt; author.getName())</span><br><span class="line">        .forEach(name-&gt;sb.append(name));</span><br></pre></td></tr></tbody></table></figure><p>优化后：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">authorStream.map(author -&gt; author.getName())</span><br><span class="line">        .forEach(sb::append);</span><br></pre></td></tr></tbody></table></figure><h4 id="6-3-4-引用类的实例方法"><a href="#6-3-4-引用类的实例方法" class="headerlink" title="6.3.4 引用类的实例方法"></a>6.3.4 引用类的实例方法</h4><h5 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::方法名</span><br></pre></td></tr></tbody></table></figure><h5 id="使用前提-2"><a href="#使用前提-2" class="headerlink" title="使用前提"></a>使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了第一个参数的成员方法</strong>，并且我们把要<strong>重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用类的实例方法。</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">interface</span> <span class="title class_">UseString</span>{</span><br><span class="line">       String <span class="title function_">use</span><span class="params">(String str,<span class="type">int</span> start,<span class="type">int</span> length)</span>;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">subAuthorName</span><span class="params">(String str, UseString useString)</span>{</span><br><span class="line">       <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> useString.use(str,start,length);</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">       subAuthorName(<span class="string">"三更草堂"</span>, <span class="keyword">new</span> <span class="title class_">UseString</span>() {</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> String <span class="title function_">use</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> length)</span> {</span><br><span class="line">               <span class="keyword">return</span> str.substring(start,length);</span><br><span class="line">           }</span><br><span class="line">       });</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>优化后如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">    subAuthorName(<span class="string">"三更草堂"</span>, String::substring);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="6-3-5-构造器引用"><a href="#6-3-5-构造器引用" class="headerlink" title="6.3.5 构造器引用"></a>6.3.5 构造器引用</h4><p>​如果方法体中的一行代码是构造器的话就可以使用构造器引用。</p><h5 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::<span class="keyword">new</span></span><br></pre></td></tr></tbody></table></figure><h5 id="使用前提-3"><a href="#使用前提-3" class="headerlink" title="使用前提"></a>使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的构造方法</strong>，并且我们把<strong>要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中</strong>，这个时候我们就可以引用构造器。</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .map(name-&gt;<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(name))</span><br><span class="line">        .map(sb-&gt;sb.append(<span class="string">"-三更"</span>).toString())</span><br><span class="line">        .forEach(str-&gt; System.out.println(str));</span><br></pre></td></tr></tbody></table></figure><p>优化后：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .map(StringBuilder::<span class="keyword">new</span>)</span><br><span class="line">        .map(sb-&gt;sb.append(<span class="string">"-三更"</span>).toString())</span><br><span class="line">        .forEach(str-&gt; System.out.println(str));</span><br></pre></td></tr></tbody></table></figure><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="基本数据类型优化"><a href="#基本数据类型优化" class="headerlink" title="基本数据类型优化"></a>基本数据类型优化</h3><p>​我们之前用到的很多Stream的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。</p><p>​即使我们操作的是整数小数，但是实际用的都是他们的包装类。JDK5中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很下。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了。</p><p>​所以为了让我们能够对这部分的时间消耗进行优化。Stream还提供了很多专门针对基本数据类型的方法。</p><p>​例如：mapToInt,mapToLong,mapToDouble,flatMapToInt,flatMapToDouble等。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test27</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">    authors.stream()</span><br><span class="line">            .map(author -&gt; author.getAge())</span><br><span class="line">            .map(age -&gt; age + <span class="number">10</span>)</span><br><span class="line">            .filter(age-&gt;age&gt;<span class="number">18</span>)</span><br><span class="line">            .map(age-&gt;age+<span class="number">2</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    authors.stream()</span><br><span class="line">            .mapToInt(author -&gt; author.getAge())</span><br><span class="line">            .map(age -&gt; age + <span class="number">10</span>)</span><br><span class="line">            .filter(age-&gt;age&gt;<span class="number">18</span>)</span><br><span class="line">            .map(age-&gt;age+<span class="number">2</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>​当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。</p><p>​parallel方法可以把串行流转换成并行流。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test28</span><span class="params">()</span> {</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> stream.parallel()</span><br><span class="line">            .peek(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer num)</span> {</span><br><span class="line">                    System.out.println(num+Thread.currentThread().getName());</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">            .filter(num -&gt; num &gt; <span class="number">5</span>)</span><br><span class="line">            .reduce((result, ele) -&gt; result + ele)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​也可以通过parallelStream直接获取并行流对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.parallelStream()</span><br><span class="line">        .map(author -&gt; author.getAge())</span><br><span class="line">        .map(age -&gt; age + <span class="number">10</span>)</span><br><span class="line">        .filter(age-&gt;age&gt;<span class="number">18</span>)</span><br><span class="line">        .map(age-&gt;age+<span class="number">2</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure><h1 id="跟着三更学JAVA-多线程"><a href="#跟着三更学JAVA-多线程" class="headerlink" title="跟着三更学JAVA-多线程"></a>跟着三更学JAVA-多线程</h1><h3 id="1-1实现多线程方式一：继承Thread类【应用】"><a href="#1-1实现多线程方式一：继承Thread类【应用】" class="headerlink" title="1.1实现多线程方式一：继承Thread类【应用】"></a>1.1实现多线程方式一：继承Thread类【应用】</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void run()</td><td>在线程开启后，此方法将被调用执行</td></tr><tr><td>void start()</td><td>使此线程开始执行，Java虚拟机会调用run方法()</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类MyThread继承Thread类</li><li>在MyThread类中重写run()方法</li><li>创建MyThread类的对象</li><li>启动线程（必须用start()方法）</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        my1.run();</span></span><br><span class="line"><span class="comment">//        my2.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void start() 导致此线程开始执行; Java虚拟机调用此线程的run方法</span></span><br><span class="line">        my1.start();</span><br><span class="line">        my2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>两个小问题</p><ul><li><p>为什么要重写run()方法？</p><p>因为run()是用来封装被线程执行的代码</p></li><li><p>run()方法和start()方法的区别？</p><p>run()：封装线程执行的代码，直接调用，相当于普通方法的调用</p><p>start()：启动线程；然后由JVM调用此线程的run()方法</p></li></ul></li></ul><h3 id="1-2实现多线程方式二：实现Runnable接口【应用】"><a href="#1-2实现多线程方式二：实现Runnable接口【应用】" class="headerlink" title="1.2实现多线程方式二：实现Runnable接口【应用】"></a>1.2实现多线程方式二：实现Runnable接口【应用】</h3><ul><li><p>Thread构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Thread(Runnable target)</td><td>分配一个新的Thread对象</td></tr><tr><td>Thread(Runnable target, String name)</td><td>分配一个新的Thread对象</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类MyRunnable实现Runnable接口</li><li>在MyRunnable类中重写run()方法</li><li>创建MyRunnable类的对象（注意这是一个任务对象，还需要把它交给线程对象来执行）</li><li>创建Thread类的对象，把MyRunnable对象作为构造方法的参数</li><li>启动线程</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"子线程3执行了 = "</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread01</span>();</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                    System.out.println(<span class="string">"子线程1执行 = "</span> + i);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                System.out.println(<span class="string">"子线程2执行 = "</span> + i);</span><br><span class="line">            }</span><br><span class="line">        }).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"主线程执行 = "</span> + i);</span><br><span class="line">        }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>多线程的实现方案有两种</p><ul><li>继承Thread类</li><li>实现Runnable接口</li></ul></li><li><p>相比继承Thread类，实现Runnable接口的好处</p><ul><li><p>避免了Java单继承的局限性</p></li><li><p>适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</p></li></ul></li></ul><h3 id="1-3实现多线程方式三：实现Callable接口【应用】"><a href="#1-3实现多线程方式三：实现Callable接口【应用】" class="headerlink" title="1.3实现多线程方式三：实现Callable接口【应用】"></a>1.3实现多线程方式三：实现Callable<t>接口【应用】</t></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread03</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; {</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thread03</span><span class="params">(<span class="type">int</span> i)</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setN</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//描述线程任务，返回线程执行的结果</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//实现对1-n的和的返回</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            sum+=i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Callable对象</span></span><br><span class="line">        Callable&lt;Integer&gt; thread03 = <span class="keyword">new</span> <span class="title class_">Thread03</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//把callable的对象封装成一个FutureTask对象（任务对象）未来对象</span></span><br><span class="line">        <span class="comment">//未来对象的作用？</span></span><br><span class="line">        <span class="comment">//是一个任务对象，实现了Runnable接口</span></span><br><span class="line">        <span class="comment">//可以在线程执行完毕之后，用未来任务对象调用get方法获取线程执行完之后的结果</span></span><br><span class="line">        FutureTask&lt;Integer&gt; f1 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(thread03);</span><br><span class="line">        <span class="comment">//把任务对象交给线程对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(f1).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取线程执行完毕后返回的结果</span></span><br><span class="line">        <span class="comment">//如果执行到这，线程没执行完，这里代码会暂停，等待线程执行完毕后才获取结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> f1.get();</span><br><span class="line">        System.out.println(<span class="string">"integer = "</span> + integer);</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018192634178.png" alt="image-20231018192634178"></p><h3 id="Thread相关的API"><a href="#Thread相关的API" class="headerlink" title="Thread相关的API"></a>Thread相关的API</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018192849584.png" alt="image-20231018192849584"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread04</span>();</span><br><span class="line">        t1.getName();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//哪个线程执行她，他就会得到哪个线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        thread.setName(<span class="string">"牛逼"</span>);</span><br><span class="line">        System.out.println(<span class="string">"thread = "</span> + thread.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"线程输出"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread04</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"执行了 = "</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><p>多个线程同时操作同一个共享资源，并且修改同一个共享资源</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018194932659.png" alt="image-20231018194932659"></p><p>两个人同时取钱问题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> money;</span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMoney</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">double</span> money)</span> {</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCardId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> cardId;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCardId</span><span class="params">(String cardId)</span> {</span><br><span class="line">        <span class="built_in">this</span>.cardId = cardId;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">double</span> money, String cardId)</span> {</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">        <span class="built_in">this</span>.cardId = cardId;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawMoney</span><span class="params">(<span class="type">double</span> money)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.money&gt;=money){</span><br><span class="line">            System.out.println(name+<span class="string">"来取了"</span>+money+<span class="string">"钱"</span>);</span><br><span class="line">            <span class="built_in">this</span>.money-=money;</span><br><span class="line">            System.out.println(name+<span class="string">"取钱后剩余"</span>+<span class="built_in">this</span>.money+<span class="string">"钱"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"余额不足"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>{</span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawThread</span><span class="params">(Account acc,String name)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.account = acc;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//取钱</span></span><br><span class="line">        account.drawMoney(<span class="number">200.0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1000.0</span>,<span class="string">"ICBC-188"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawThread</span>(account,<span class="string">"小明"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawThread</span>(account,<span class="string">"小红"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="线程同步（解决线程安全）"><a href="#线程同步（解决线程安全）" class="headerlink" title="线程同步（解决线程安全）"></a>线程同步（解决线程安全）</h3><p>让多个线程先后依次访问共享资源，这样就解决了线程安全问题</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018201111598.png" alt="image-20231018201111598"></p><h4 id="加锁方案"><a href="#加锁方案" class="headerlink" title="加锁方案"></a>加锁方案</h4><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018201303232.png" alt="image-20231018201303232"></p><p>多个线程要有同一把钥匙来打开一个共享资源</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawMoney</span><span class="params">(<span class="type">double</span> money)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">    <span class="comment">//this代表共享资源</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.money&gt;=money){</span><br><span class="line">            System.out.println(name+<span class="string">"来取了"</span>+money+<span class="string">"钱"</span>);</span><br><span class="line">            <span class="built_in">this</span>.money-=money;</span><br><span class="line">            System.out.println(name+<span class="string">"取钱后剩余"</span>+<span class="built_in">this</span>.money+<span class="string">"钱"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"余额不足"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018202420434.png" alt="image-20231018202420434"></p><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018202609125.png" alt="image-20231018202609125"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018202942512.png" alt="image-20231018202942512"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018203100212.png" alt="image-20231018203100212"></p><h5 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018204407691.png" alt="image-20231018204407691"></p><p>定义锁，自己来加锁和解锁</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> money;</span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line">    <span class="comment">//为什么放在这，因为方法可以直接使用，也便于创建一个对象，就有这个对象所对应的锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">//加final，不能进行二次复制</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">drawMoney</span><span class="params">(<span class="type">double</span> money)</span> {</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">    <span class="comment">//this代表共享资源</span></span><br><span class="line">    lk.lock();<span class="comment">//加锁</span></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.money&gt;=money){</span><br><span class="line">            System.out.println(name+<span class="string">"来取了"</span>+money+<span class="string">"钱"</span>);</span><br><span class="line">            <span class="built_in">this</span>.money-=money;</span><br><span class="line">            System.out.println(name+<span class="string">"取钱后剩余"</span>+<span class="built_in">this</span>.money+<span class="string">"钱"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"余额不足"</span>);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        lk.unlock();<span class="comment">//解锁</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231018204500156.png" alt="image-20231018204500156"></p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>可以复用线程的技术,不会因为线程过多而导致线程瘫痪。可以创建几个线程来执行多个任务</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019141643837.png" alt="image-20231019141643837"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019142025592.png" alt="image-20231019142025592"></p><p>线程池可以控制线程的数量和任务的数量（不会导致瘫痪），让线程去反复的去处理任务.</p><p>任务队列里面都是实现了Runnable和Callable的对象，因为是把他们交给线程池</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019142852345.png" alt="image-20231019142852345"></p><h4 id="ThreadPoolExecutor创建线程池"><a href="#ThreadPoolExecutor创建线程池" class="headerlink" title="ThreadPoolExecutor创建线程池"></a>ThreadPoolExecutor创建线程池</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019143236104.png" alt="image-20231019143236104"></p><p><strong>线程池的注意事项</strong></p><p>临时线程什么时候创建</p><p>新任务提交时核心线程都在忙，并且任务队列都满了，并且还可以在创建临时线程，此时才可以创建临时线程</p><p>什么时候会开始拒绝新任务</p><p>核心线程和临时线程都在工作，并且任务队列也满了，会根据拒绝策略去拒绝新任务</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pool</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">       <span class="comment">//线程池工厂</span></span><br><span class="line">         <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, TimeUnit.HOURS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">5</span>),Executors.defaultThreadFactory(),<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">       <span class="comment">/* public ThreadPoolExecutor(</span></span><br><span class="line"><span class="comment">        int corePoolSize, //核心线程数量</span></span><br><span class="line"><span class="comment">        int maximumPoolSize, //最大线程数量 核心+临时线程</span></span><br><span class="line"><span class="comment">        long keepAliveTime, //临时线程存活时间</span></span><br><span class="line"><span class="comment">        TimeUnit unit, //时间单位</span></span><br><span class="line"><span class="comment">        B lockingQueue&lt;Runnable&gt; workQueue, //任务队列</span></span><br><span class="line"><span class="comment">        ThreadFactory threadFactory, //线程工厂</span></span><br><span class="line"><span class="comment">        RejectedExecutionHandler handler) //线程都在忙。任务队列也满了 新任务来了之后怎么处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//       new ArrayBlockingQueue&lt;&gt;(5)//基于数组的任务队列</span></span><br><span class="line"><span class="comment">//       new LinkedBlockingDeque //基于链表的任务队列，可以往后加队列</span></span><br><span class="line"><span class="comment">//        Executors.defaultThreadFactory()//默认工厂，会帮我们创建</span></span><br><span class="line"><span class="comment">//         new ThreadPoolExecutor.AbortPolicy()//决绝策略是抛异常</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="线程池处理Runnable对象"><a href="#线程池处理Runnable对象" class="headerlink" title="线程池处理Runnable对象"></a>线程池处理Runnable对象</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019150803593.png" alt="image-20231019150803593"></p><p>拒绝策略</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019153128394.png" alt="image-20231019153128394"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pool</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">       <span class="comment">//通过ThreadPoolExecutor创建线程池工厂</span></span><br><span class="line">         <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, TimeUnit.HOURS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">4</span>),Executors.defaultThreadFactory(),<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">         <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableP</span>();</span><br><span class="line"></span><br><span class="line">         <span class="comment">//（三个核心线程）</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        <span class="comment">//以上是核心线程，以下四个再任务队列排队(4个任务队列)</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        <span class="comment">//临时线程创建时机，任务队列满了，会创建临时线程(2个临时线程)</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line">        <span class="comment">//拒绝任务</span></span><br><span class="line">        pool.execute(runnable); <span class="comment">//线程池对象会帮我们自动创建新线程、并执行线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        pool.shutdown();//会等线程执行完之后，关闭线程池</span></span><br><span class="line"><span class="comment">//        pool.shutdownNow();//立即关掉</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">       <span class="comment">/* public ThreadPoolExecutor(</span></span><br><span class="line"><span class="comment">        int corePoolSize, //线程池支持的核心线程数量</span></span><br><span class="line"><span class="comment">        int maximumPoolSize, //最大线程数量 核心+临时线程</span></span><br><span class="line"><span class="comment">        long keepAliveTime, //临时线程存活时间</span></span><br><span class="line"><span class="comment">        TimeUnit unit, //时间单位</span></span><br><span class="line"><span class="comment">        B lockingQueue&lt;Runnable&gt; workQueue, //任务队列</span></span><br><span class="line"><span class="comment">        ThreadFactory threadFactory, //线程工厂</span></span><br><span class="line"><span class="comment">        RejectedExecutionHandler handler) //线程都在忙。任务队列也满了 新任务来了之后怎么处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//       new ArrayBlockingQueue&lt;&gt;(5)//基于数组的任务队列</span></span><br><span class="line"><span class="comment">//       new LinkedBlockingDeque //基于链表的任务队列，可以往后加队列</span></span><br><span class="line"><span class="comment">//        Executors.defaultThreadFactory()//默认工厂，会帮我们创建</span></span><br><span class="line"><span class="comment">//         new ThreadPoolExecutor.AbortPolicy()//决绝策略是抛异常</span></span><br><span class="line"><span class="comment">//        new ThreadPoolExecutor.CallerRunsPolicy() //拒绝策略是让主线程去执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"C:\Program Files\Java\jdk1.8.0_131\bin\java.exe"</span> <span class="string">"-javaagent:D:\JavaP\idea\IntelliJ IDEA 2019.2.4\lib\idea_rt.jar=61317:D:\JavaP\idea\IntelliJ IDEA 2019.2.4\bin"</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">"C:\Program Files\Java\jdk1.8.0_131\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\rt.jar;D:\JavaP\IdeaProjects\sangengtest\out\production\day09"</span> </span><br><span class="line">    </span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">5</span>,main]线程打印<span class="number">6666</span></span><br><span class="line">Thread[main,<span class="number">5</span>,main]线程打印<span class="number">6666</span></span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">3</span>,<span class="number">5</span>,main]线程打印<span class="number">6666</span></span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main]线程打印<span class="number">6666</span></span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">5</span>,<span class="number">5</span>,main]线程打印<span class="number">6666</span></span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">4</span>,<span class="number">5</span>,main]线程打印<span class="number">6666</span></span><br></pre></td></tr></tbody></table></figure><h5 id="线程池处理Callable对象"><a href="#线程池处理Callable对象" class="headerlink" title="线程池处理Callable对象"></a>线程池处理Callable对象</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableP</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CallableP</span><span class="params">(<span class="type">int</span> a)</span> {</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a; i++) {</span><br><span class="line">            sum = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread()+<span class="string">"he为"</span>+sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pool2</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException {</span><br><span class="line">        <span class="comment">//通过ThreadPoolExecutor创建线程池工厂</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, TimeUnit.HOURS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">4</span>), Executors.defaultThreadFactory(), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="type">CallableP</span> <span class="variable">callableP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableP</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取未来对象，获取线程执行完的结果，实质上是任务对象</span></span><br><span class="line">        Future&lt;String&gt; submit1 = pool.submit(callableP);</span><br><span class="line">        Future&lt;String&gt; submit2 = pool.submit(callableP);</span><br><span class="line">        Future&lt;String&gt; submit3 = pool.submit(callableP);</span><br><span class="line">        Future&lt;String&gt; submit4 = pool.submit(callableP);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"submit1 = "</span> + submit1.get());</span><br><span class="line">        System.out.println(<span class="string">"submit2 = "</span> + submit2.get());</span><br><span class="line">        System.out.println(<span class="string">"submit3 = "</span> + submit3.get());</span><br><span class="line">        System.out.println(<span class="string">"submit4 = "</span> + submit4.get());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Executors创建线程池"><a href="#Executors创建线程池" class="headerlink" title="Executors创建线程池"></a>Executors创建线程池</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019155151828.png" alt="image-20231019155151828"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019160000565.png" alt="image-20231019160000565"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CallableP</span> <span class="variable">callableP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableP</span>(<span class="number">13</span>);</span><br><span class="line">        <span class="comment">//计算密集型的将线程数=CPU核数+1</span></span><br><span class="line"><span class="comment">//        oom内存溢出</span></span><br><span class="line">        <span class="comment">//IO密集型的将线程数=CPU核数*2</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//获取未来对象，获取线程执行完的结果，实质上是任务对象</span></span><br><span class="line">        Future&lt;String&gt; submit1 = pool.submit(callableP);</span><br><span class="line">        Future&lt;String&gt; submit2 = pool.submit(callableP);</span><br><span class="line">        Future&lt;String&gt; submit3 = pool.submit(callableP);</span><br><span class="line">        Future&lt;String&gt; submit4 = pool.submit(callableP);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"submit1 = "</span> + submit1.get());</span><br><span class="line">        System.out.println(<span class="string">"submit2 = "</span> + submit2.get());</span><br><span class="line">        System.out.println(<span class="string">"submit3 = "</span> + submit3.get());</span><br><span class="line">        System.out.println(<span class="string">"submit4 = "</span> + submit4.get());</span><br></pre></td></tr></tbody></table></figure><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019184532353.png" alt="image-20231019184532353"></p><h4 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h4><p>并发：同一间隔内，多个线程被Cpu调度执行，cpu轮询快速切换到不同线程，让其看到是同时执行</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019185318428.png" alt="image-20231019185318428"></p><p>并行：同一时刻，多个线程被CPU调度执行</p><ul><li>解释一：并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。</li><li>解释二：并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。</li><li>解释三：并发是在一台处理器上“同时”处理多个任务，并行是在多台处理器上同时处理多个任务。如 hadoop 分布式集群。 所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。</li></ul><p>并行</p><p>并行(parallel)：指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。</p><p><img src="https://pics7.baidu.com/feed/0b46f21fbe096b6333a209ed69513d4feaf8ac46.jpeg@f_auto?token=756cdc29eb11f4a51f75466ba32bfa03" alt="img"></p><p>并发</p><p>并发(concurrency)：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</p><p><img src="https://pics7.baidu.com/feed/0df3d7ca7bcb0a46d355bde70e014c2f6a60af62.jpeg@f_auto?token=23d6a6c455e8dd01bec353dde030ac64" alt="img"></p><h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><p>wait释放锁</p><p>sleep不释放锁</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019185712773.png" alt="image-20231019185712773"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019190149895.png" alt="image-20231019190149895"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019190203335.png" alt="image-20231019190203335"></p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>悲观锁：在执行之前加锁，线程安全，性能较差</p><p>乐观锁：再执行之前认为他是安全的，等到遇到线程安全之后再加锁,线程安全，性能也好</p><p>CAS算法（WeakCompareAndSet比较和修改值）（改之前和原先的值进行比较）</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231019192205898.png" alt="image-20231019192205898"></p><p>先把10拿出来进行+1，11和原先的10作比较，10没有被其他人改就更新这个值，如果等于11了，这次就作废</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; gift;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> {</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SendThread</span><span class="params">(List&lt;String&gt; gift, String name)</span> {</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.gift=gift;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getGift</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> gift;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGift</span><span class="params">(List&lt;String&gt; gift)</span> {</span><br><span class="line">        <span class="built_in">this</span>.gift = gift;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="comment">//发礼物</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//锁必须唯一</span></span><br><span class="line">           <span class="keyword">synchronized</span> (gift){</span><br><span class="line">               <span class="keyword">if</span> (gift.size()&lt;<span class="number">10</span>){</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               }</span><br><span class="line"></span><br><span class="line">               <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> gift.remove(random.nextInt(gift.size()));</span><br><span class="line">               System.out.println(name+<span class="string">"发出"</span>+s);</span><br><span class="line">               <span class="built_in">this</span>.count++;</span><br><span class="line">           }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="comment">//100份礼物，小红和小明两人同时发送，礼品小于10分，停止发送</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; gift = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String[] names = {<span class="string">"口红"</span>,<span class="string">"包包"</span>,<span class="string">"鲜花"</span>,<span class="string">"皮带"</span>,<span class="string">"手表"</span>};</span><br><span class="line"></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            gift.add(names[random.nextInt(names.length)] +(i+<span class="number">1</span>));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">SendThread</span> <span class="variable">xm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendThread</span>(gift, <span class="string">"小明"</span>);</span><br><span class="line">        xm.start();</span><br><span class="line">        <span class="type">SendThread</span> <span class="variable">xh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendThread</span>(gift, <span class="string">"小红"</span>);</span><br><span class="line">        xh.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等上面执行完，然后获取分发次数</span></span><br><span class="line">        xm.join();</span><br><span class="line">        xh.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"xm.getCount() = "</span> + xm.getCount());</span><br><span class="line">        System.out.println(<span class="string">"xh.getCount() = "</span> + xh.getCount());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p><strong>1、数据定义语言（DDL Data Definition Language）</strong>：创建、修改或删除数据库中表、视图、索引等对象的操作，常用命令为CREATE、DROP；</p><p>CREATE语句<br>CREATE TABLE keep(<br>id CHAR(16) ,<br>user_name VARCHAR(16) ,<br>password VARCHAR(15)<br>)<br>执行结果：在test数据库中创建keep表<br><img src="http://img.voycn.com/images/2019/05/0b4704075682889e2cccf454ec5e1921.png" alt="SQL语句与数据库操作语句"> DROP语句<br>DROP TABLE keep<br>执行结果：在test数据库中删除keep表<br><img src="http://img.voycn.com/images/2019/05/7861a32d754c6b5d403e70ae74f1a668.png" alt="SQL语句与数据库操作语句"></p><p><strong>2、数据操纵语言（DML Data Manipulation Language）</strong> ：向表中添加、删除、修改数据操作，常用命令有insert、update和delete；</p><p>INSERT语句<br>INSERT INTO keep (id,user_name,password) VALUES (‘123’,‘fuliuqingfeng’,‘123456’);<br>执行结果：<br><img src="http://img.voycn.com/images/2019/05/38d50a2c658bb124972bcabe9e33a653.png" alt="SQL语句与数据库操作语句"> UPDATE语句<br>UPDATE keep SET id = ‘111’ WHERE user_name = ‘fuliuqingfeng’<br>执行结果：id改为111<br><img src="http://img.voycn.com/images/2019/05/ac6c85e4a7f41022c80580811927eda7.png" alt="SQL语句与数据库操作语句"> DETELE语句<br>DELETE FROM keep WHERE user_name = ‘fuliuqingfeng’<br>执行结果删除user_name为fuliuqingfeng的信息</p><p><strong>3、数据查询语言（DQL Data Query Language）</strong> ：按照指定的组合、条件表达式或排序检索已存在的数据库中数据，不改变数据库中数据，常用命令为select；</p><p>SELECT语句<br>SELECT * FROM keep<br>执行结果：列出keep表中所有信息<br><img src="http://img.voycn.com/images/2019/05/b1af252b24b6505be1bf2936c9650ee7.png" alt="SQL语句与数据库操作语句"></p><p><strong>4、数据控制语言（DCL Data Control Language）</strong> ：用来授予或收回访问数据库的某种特权、控制数据操纵事务的发生时间及效果、对数据库进行监视等操作，常用命令有GRANT、REVOKE、COMMIT、ROLLBACK；</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>事务是一组操作的集合这组操作，要么全部成功，要么全部失败</p><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p>start transaction; –开启事务</p><p>commit/rollback; –提交回滚事务</p><h3 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h3><p>原子性：事务是原子级别，要么全部执行成功，要么全部执行失败</p><p>一致性：事务完成时，必须所有的数据都要保持一致状态</p><p>隔离性：数据库提供的隔离机制，保证事务在不受外部并发操作影响下的独立环境下运行</p><p>持久性：事务一旦提交或者回滚，他对数据库的数据的改变是永久的</p><h3 id="并发事务的问题"><a href="#并发事务的问题" class="headerlink" title="并发事务的问题"></a>并发事务的问题</h3><p>脏读：一个事务读取到另一个还未提交的数据（指更新或者删除未提交）</p><p>不可重复读：一个事务先后读取同一条数据，在第二次读之前被其他值修改（但是它未提交），但两次读取的数据不同</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231020191530029.png" alt="image-20231020191530029"></p><p>幻读：<img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231020191738503.png" alt="image-20231020191738503"></p><p>开启一个事务，一个事务查询数据没查到，插入一条数据，在查询还是没查到，提交一下插入数据，然后查询一下又没查询到，但是在插入就显示已存在</p><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231020192329132.png" alt="image-20231020192329132"></p><p>设置语句</p><p>set session transaction isolation level read uncommit;</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022142605610.png" alt="image-20231022142605610"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022142656908.png" alt="image-20231022142656908"></p><p>不同存储引擎，索引结构是不同的</p><h3 id="存储引擎简介"><a href="#存储引擎简介" class="headerlink" title="存储引擎简介"></a>存储引擎简介</h3><p>默认的是InnoDB存储引擎</p><p>存储引擎是存储数据、建立索引、更新查询数据等技术的实现方式。存储引擎是基于表而不是基于库，又被叫做表类型</p><p>创建表指定存储引擎  engine=InnoDB</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022143400084.png" alt="image-20231022143400084"></p><p>展示所支持的存储引擎：shwo  engines;</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022143540222.png" alt="image-20231022143540222"></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>高可靠性，高性能</p><p>特点：事务、行级锁、外键</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022143848670.png" alt="image-20231022143848670"></p><p>sdi：字典，ibd：每个表对应表空间</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022144214788.png" alt="image-20231022144214788"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>有表结构sdi 表数据myd 表索引myi</p><p>没有外键，删除和修改更好</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022144444156.png" alt="image-20231022144444156"></p><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022144528740.png" alt="image-20231022144528740"></p><h3 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h3><p>InnoDB和MyISAM</p><p>前者支持外键支持事务支持行级锁</p><p>后者不支持外键不支持事务支持表级锁</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022144706217.png" alt="image-20231022144706217"></p><h3 id="MyISAM-和-InnoDB区别"><a href="#MyISAM-和-InnoDB区别" class="headerlink" title="MyISAM 和 InnoDB区别"></a>MyISAM 和 InnoDB区别</h3><p>MyISAM 采用表级锁(table-level locking)。InnoDB 支持行级锁(row-level locking)和表级锁,默认为行级锁。</p><h3 id="表级锁和行级锁对比"><a href="#表级锁和行级锁对比" class="headerlink" title="表级锁和行级锁对比"></a>表级锁和行级锁对比</h3><p>表级锁： MySQL 中锁 粒度最大 ，对当前操作的整张表加锁，加锁的开销小，加锁快，不会出现死锁，（因为要么一次性获取全部的锁，要么等待）。其锁定粒度最大，触发锁冲突的概率高，并发度低。<br>行级锁： MySQL 中锁 粒度最小 ，只针对当前操作的行进行加锁，加锁的开销大，加锁慢，会出现死锁。 行级锁能大大减少数据库操作的冲突。其锁粒度最小，触发锁冲突的概率低、并发度高。</p><h3 id="引擎选择"><a href="#引擎选择" class="headerlink" title="引擎选择"></a>引擎选择</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022145049869.png" alt="image-20231022145049869"></p><p>InnoDB：事务完整比较高，数据一致性比较高，除了插入和查询之外，还包含了更新和删除</p><p>MyISAM ：读和插入操作比较多时（MongDB）</p><p>Memory：访问速度比较快，适用于临时缓存，但表的大的话，就无法缓存到内存中（Redis）</p><h3 id="docker配置mysql"><a href="#docker配置mysql" class="headerlink" title="docker配置mysql"></a>docker配置mysql</h3><p><a href="https://blog.csdn.net/m0_54958293/article/details/128544701">Linux——docker安装mysql8.0.31_牧魂.的博客-CSDN博客</a></p><p>–restart=always：总是跟随[docker启动]</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h4 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h4><p>索引是高效的数据结构，通过数据结构指向数据，快速查询数据，有序</p><p>优点：提高数据检索的效率，降低数据库的IO成本，查新快。</p><p>通过索引对数据进行排序，有效降低排序成本，降低cpu的消耗</p><p>缺点：索引占据空间，提高查询效率，而增删改的时候效率也会降低</p><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022164000278.png" alt="image-20231022164000278"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022164018236.png" alt="image-20231022164018236"></p><h5 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h5><p>二叉树（左小右大）</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022164114952.png" alt="image-20231022164114952"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022164358881.png" alt="image-20231022164358881"></p><p>红黑树：相对平衡的二叉搜索树，但不是严格意义上的二叉搜索树，叶子和非叶子节点都会存储数据</p><h5 id="B-tree树"><a href="#B-tree树" class="headerlink" title="B-tree树"></a>B-tree树</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022200627041.png" alt="image-20231022200627041"></p><p>5阶的，如果有四个了之后会发生裂变，让中间的数分裂上去</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022200832824.png" alt="image-20231022200832824"></p><p>插入1200，大于4个节点，0345往上分列，形成</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022200938773.png" alt="image-20231022200938773"></p><h5 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022203004341.png" alt="image-20231022203004341"></p><p>最多存储3个key和4个指针</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022202018584.png" alt="image-20231022202018584"></p><p>数据都在叶子节点,每个叶子节点都会有一个双向链表，非叶子节点只存储索引的作用</p><h5 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h5><p>哈希索引就是采用hash算法，将键值转换成新的hash值，映射到对应的槽位上，然后存储到hash表中。如果存在哈希碰撞，就需要连成链表去找对应的数据</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022202231226.png" alt="image-20231022202231226"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231022202318413.png" alt="image-20231022202318413"></p><h5 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h5><p>为什么InnoDB存储引擎选择使用B+tree索引结构？</p><p>相对于二叉树，层级更少，搜索效率更高</p><p>对于B-tree，无论是叶子节点还是非叶子节点，都会存储数据，这样导致一页中存储的键值减少，指针跟着减少，要保存大量数据，只能增加树的高度，导致性能降低。而B+tree只有叶子节点存储数据，而非叶子节点就可以保存更多的键值，指针就会跟着增多</p><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023151433702.png" alt="image-20231023151433702"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023144115851.png" alt="image-20231023144115851"></p><p>主键索引：如果有主键，会自动创建主键索引</p><p>唯一索引：字段值不重复，比如身份证号</p><p>聚集索引挂的是一行的数据（是主键索引），而二级索引是挂的是主键</p><p>联合索引：多个列同时查询，最左匹配原则，搜索频繁最多的放在前面</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023154851963.png" alt="image-20231023154851963"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023144455046.png" alt="image-20231023144455046"></p><p>回表查询是指先到二级索引拿到id，根据id去聚集索引查找行的数据</p><h5 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023145201602.png" alt="image-20231023145201602"></p><p>第一个查询快，因为第一个（id是主键）直接去聚集索引中根据id查；第二个是根据name所建立的索引，先去二级索引中根据name找所对应的id，再根据查到的id去聚集索引中查找所对应的行数据也称回表查询</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023150609316.png" alt="image-20231023150609316">1页可以有16行，也就是16k ，一页也就1024个字节。n代表当前节点存在key的数量，n+1代表指针，key+指针</p><p>高度为3，每个节点都有1171个指针，而每个节点都可以有1171个</p><h4 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023151528340.png" alt="image-20231023151528340"></p><h4 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h4><h6 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h6><p>select global status like ‘Com_______’;</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023155649195.png" alt="image-20231023155649195"></p><p>后面7个_    来查看哪个进行优化</p><h6 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h6><p>查看谁超过了默认的sql查询时间</p><p>只会记录执行时间超过预期时间的sql语句</p><p>show variables like ‘slow_query_log’;</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023160437000.png" alt="image-20231023160437000"></p><h6 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h6><p>select @@have_profiling;查询是否支持</p><p>查询每一个sql的执行耗时</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023164010596.png" alt="image-20231023164010596"></p><h6 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h6><p>查询性能分析</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023164959433.png" alt="image-20231023164959433"></p><p>id值越大先执行</p><p>在sql语句前面弄一个explain 然后就可以查看运行顺序</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023170809476.png" alt="image-20231023170809476"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023170845254.png" alt="image-20231023170845254"></p><p>type 尽量往前提type，可以显示出性能好不好</p><h4 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h4><p>没索引就是全表扫描</p><p>用索引就是构造b+树</p><h6 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a><strong>最左前缀原则</strong></h6><p>联合索引，索引最左边的列必须存在，不能跳。如果最左边的列不存在，索引会失效走全表扫描</p><p>索引（a,b,c） 如果查询条件只有b和c，索引就失效，因为不符合最左前缀原则，a必须存在</p><p>如果查询 a和c 那么c会失效，因为没有b</p><p><strong>索引失效和位置无关和存在有关</strong></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023172604805.png" alt="image-20231023172604805"></p><p>范围查询</p><p>联合查询（复合查询）</p><p>建议使用&gt;=查询</p><blockquote><p>如果是&gt;后面的索引都会失效 </p><p>要是&gt;=后面的索引不会失效</p></blockquote><p>联合查询可以解决回表查询</p><h6 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h6><p><strong>不要在索引列上进行运算操作</strong></p><p>比如![1698057842235](C:\Users\康\Documents\WeChat Files\wxid_abwrp7kf1qd122\FileStorage\Temp\1698057842235.png)</p><p>索引会失效</p><p><strong>字符串不加引号，会造成类型转换</strong></p><p>字符串类型使用时，不加引号，索引会失效</p><p><strong>模糊匹配</strong></p><p>%在前面就会失效，%在后面就不会失效，要规避前面是%的模糊查询</p><p><strong>or</strong></p><p>or左右条件都有索引的话，才会索引生效</p><p>or左右有一个就不生效</p><p>age没索引</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023190524388.png" alt="image-20231023190524388"></p><p>age有索引</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023190716264.png" alt="image-20231023190716264"></p><p><strong>数据分布影响</strong></p><p>mysql会评估到使用索引比全表更慢，则不使用索引，索引会失效</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023191139650.png" alt="image-20231023191139650"></p><h6 id="SQL使用提示"><a href="#SQL使用提示" class="headerlink" title="SQL使用提示"></a>SQL<strong>使用提示</strong></h6><p>要是有一个列即在联合索引又在常规索引里，它默认使用的是联合索引</p><p>use index(索引名)  可以在from 表名后使用 use index(索引名)来指定，可能会评估，不使用</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023192318407.png" alt="image-20231023192318407"></p><p>ignore index（忽略的索引名）</p><p>force index （强制的索引名）</p><p><strong>覆盖索引</strong></p><p>覆盖索引是在二级索引中，都显示的属性，就不需要回表查询</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023193330630.png" alt="image-20231023193330630"></p><h6 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h6><p>截取字符串长的</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023194731205.png" alt="image-20231023194731205"></p><p>不重复/总数=选择性</p><h6 id="单列索引-联合索引"><a href="#单列索引-联合索引" class="headerlink" title="单列索引/联合索引"></a>单列索引/联合索引</h6><p>优先推荐联合索引，性能高，使用得当就会避免回调查询</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023195634654.png" alt="image-20231023195634654"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023195754043.png" alt="image-20231023195754043"></p><p><strong>索引设计原则</strong></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231023200002595.png" alt="image-20231023200002595"></p><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><h3 id="insert优化"><a href="#insert优化" class="headerlink" title="insert优化"></a>insert优化</h3><p>批量插入、手动提交事务、主键顺序插入</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024145601764.png" alt="image-20231024145601764"></p><p>大批量数据使用load指令local data local infile</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024151004858.png" alt="image-20231024151004858"></p><p>主键顺序插入性能高于乱序插入</p><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>页分裂和页合并</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024154540732.png" alt="image-20231024154540732"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024154242681.png" alt="image-20231024154242681"></p><p>主键乱序插入会造成页分裂</p><p>页分裂：乱序插入，50插入，会开启新的数据页，将第一页中后超出50%的部分插入到第三个数据页，将50插入到第三页，然后第一页双向链表和第三个双向链表连接</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024154416191.png" alt="image-20231024154416191">页合并：如果一个页中删除的数据大于这个页的50%，就可以找前后两个看看是否可以合并</p><p>主键过长，查得慢，而且占空间</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024153818204.png" alt="image-20231024153818204"></p><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><p>排序字段尽量使用索引，使用覆盖索引</p><p>using index 直接通过索引返回数据，性能高</p><p>using filesort 需要将返回的结果在缓冲区中排序</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024185543554.png" alt="image-20231024185543554"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024185642783.png" alt="image-20231024185642783"></p><p>排序时，先根据想要排序的顺序建立索引，比如想age升序，name降序 然后可以建立索引 create index yb_k on emp(age asc ,name desc)建立索引，就不会出现filesort了，这样不会慢。默认都是升序</p><p><strong>order by最左前缀法则 顺序好像必须一致</strong></p><p><strong>where 存在就行</strong></p><p>查询时出现using temportary就会产生临时表，会使查询变慢</p><h3 id="group-by分组优化"><a href="#group-by分组优化" class="headerlink" title="group by分组优化"></a>group by分组优化</h3><p>推荐建立索引使用联合索引</p><p>group by最左前缀法则 顺序好像必须一致</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231024190731831.png" alt="image-20231024190731831"></p><p>用到临时表就是很慢，就需要建立索引</p><h3 id="Limit优化"><a href="#Limit优化" class="headerlink" title="Limit优化"></a>Limit优化</h3><p>通过覆盖索引和子查询的优化</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025103859150.png" alt="image-20231025103859150"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025103454016.png" alt="image-20231025103454016"></p><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>推荐使用count（*） 专门进行了优化 直接进行累加，不需拿值，不需判断为null</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025104718951.png" alt="image-20231025104718951"></p><h3 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h3><p>where要有索引的字段，并且索引不能失效</p><p>可以先查出有索引的字段，然后根据查出来的索引字段进行更新</p><p>update s set gender=’男’ where id (select id from emp where gender=’女’);</p><p>这样就很快，走的是聚集索引，不会进行回表查询</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025105348914.png" alt="image-20231025105348914"></p><p>如果根据索引条件更新某一字段值，走的是行锁</p><p>如果根据某一字段值更新某一字段值，走的是表锁，因为没有加索引会全表扫描这个条件字段值</p><p>行锁升级为表锁，会降低并发访问性能</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025111115203.png" alt="image-20231025111115203"></p><p><strong>表锁</strong></p><p> 特点：偏向MyISAM存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</p><p><strong>行锁</strong></p><p> 特点：偏向InnoDB存储引擎，和表锁相反</p><p><a href="https://www.php.cn/faq/418290.html">mysql中表锁和行锁有什么区别-mysql教程-PHP中文网</a></p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="视图介绍"><a href="#视图介绍" class="headerlink" title="视图介绍"></a>视图介绍</h3><p>视图是一个虚表，并不真实存在，里面的数据是动态生成的</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025190959807.png" alt="image-20231025190959807"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025191119048.png" alt="image-20231025191119048"></p><p>视图相当于一个封装好的select函数</p><h3 id="视图语法"><a href="#视图语法" class="headerlink" title="视图语法"></a>视图语法</h3><p>创建视图</p><p>create （or repalce） view emp_v1 as select id, name from emp;</p><p>查看视图</p><p>SHOW CREATE VIEW 视图名称</p><p>修改视图</p><p>create or repalce view emp_v1 as select id, name from emp;</p><p>alter view emp_v1 as select * from emp;</p><p>删除视图</p><p> drop view if exists emp_v1;</p><h3 id="检查选项cascaded"><a href="#检查选项cascaded" class="headerlink" title="检查选项cascaded"></a>检查选项cascaded</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025192127011.png" alt="image-20231025192127011"></p><p>哪一句加这个选项，这一句和所依赖的上一句都会检查所插入的是否满足where条件</p><p>没有这个选项，就不会检查是否满足索引的条件，都会插到表里面</p><p>检查会向上传递</p><h3 id="检查选项local"><a href="#检查选项local" class="headerlink" title="检查选项local"></a>检查选项local</h3><p>哪一句加这个选项，这一句会检查是否满足条件，所依赖的上一句如果有with  local check option会判断是否满足条件，没有就不判断</p><p>local 不会向上传递</p><h3 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h3><p>视图中的行和表中的行必须是一一对应的关系</p><p>不能包含以下：</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025194548787.png" alt="image-20231025194548787"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025194942037.png" alt="image-20231025194942037"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025195316867.png" alt="image-20231025195316867"></p><p>（1）</p><p>创建视图，缺少那两列</p><p>（2）将学生选修课程表很常用，可以将其弄成视图，真实表不存在，可以后面操作视图 封装了查询语句，简化了操作</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025200041399.png" alt="image-20231025200041399"></p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>封装sql语句</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025201806573.png" alt="image-20231025201806573"></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025203116766.png" alt="image-20231025203116766"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025203056639.png" alt="image-20231025203056639"></p><p>创建存储过程</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure p1()</span><br><span class="line">begin</span><br><span class="line">    select count(*) from emp</span><br><span class="line">end;</span><br></pre></td></tr></tbody></table></figure><p>调用存储过程</p><p>call p1();</p><p>查看存储过程</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025202707763.png" alt="image-20231025202707763"></p><p>删除存储过程</p><p>drop procedure if exists p1()</p><p>设置结束符 delimiter $$</p><p>在结束写上$$表示结束</p><h3 id="变量-系统变量"><a href="#变量-系统变量" class="headerlink" title="变量-系统变量"></a>变量-系统变量</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026124625019.png" alt="image-20231026124625019"></p><p>show global variables; //所有系统变量</p><p>show variables like ‘slow_query_log’; //模糊查询系统变量</p><p>select @@global 系统变量名 —查看指定的变量值</p><p>不指定的话，默认是会话记录 </p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026130631758.png" alt="image-20231026130631758"></p><h3 id="用户定义变量"><a href="#用户定义变量" class="headerlink" title="用户定义变量"></a>用户定义变量</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026131647341.png" alt="image-20231026131647341"></p><p>set @myname = ‘kang’;</p><p>select @myname </p><h3 id="直接跳过存储过程到触发器"><a href="#直接跳过存储过程到触发器" class="headerlink" title="直接跳过存储过程到触发器"></a>直接跳过存储过程到触发器</h3><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>介绍</p><p>保持数据完整性和日志记录和数据校验</p><p>在数据的增删改之前或者之后进行日志操作</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026132831360.png" alt="image-20231026132831360"></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026133059092.png" alt="image-20231026133059092"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026133955027.png" alt="image-20231026133955027"></p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><h4 id="插入数据的触发器"><a href="#插入数据的触发器" class="headerlink" title="插入数据的触发器"></a>插入数据的触发器</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026134059126.png" alt="image-20231026134059126"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026133922886.png" alt="image-20231026133922886"></p><p><strong>字符串拼接</strong>  concat</p><h4 id="更改数据的触发器"><a href="#更改数据的触发器" class="headerlink" title="更改数据的触发器"></a>更改数据的触发器</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026135228538.png" alt="image-20231026135228538"></p><p>&lt;5触发4次触发器，因为是行级触发器</p><h4 id="删除数据的触发器"><a href="#删除数据的触发器" class="headerlink" title="删除数据的触发器"></a>删除数据的触发器</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026135630159.png" alt="image-20231026135630159"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026140241868.png" alt="image-20231026140241868"></p><h2 id="锁-1"><a href="#锁-1" class="headerlink" title="锁"></a>锁</h2><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>当前使用哪个数据库，就锁哪个数据库</p><p><strong>在对整个库进行逻辑备份时，如果不加全局锁，由于数据库的备份不可能一瞬间完成，那么将可能造成最终数据不一致的问题。</strong></p><p>数据备份，加全局锁，不让其他用户对这个表进行DDL，和DML操作，只能进行DQL，保护数据的完整性。只能读</p><p>![1698302427347](C:\Users\康\Documents\WeChat Files\wxid_abwrp7kf1qd122\FileStorage\Temp\1698302427347.png)</p><h4 id="一致性数据备份"><a href="#一致性数据备份" class="headerlink" title="一致性数据备份"></a>一致性数据备份</h4><p>全局锁锁的一般都是当前使用的数据库</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026144544411.png" alt="image-20231026144544411"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026145648705.png" alt="image-20231026145648705"></p><p>快照读来备份，不需要加锁 single-transation</p><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>锁定粒度大，每次操作锁住整张表，发生锁冲突的概率最高，并发度最低</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026160844696.png" alt="image-20231026160844696"></p><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p>分为：读锁和写锁</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026161049336.png" alt="image-20231026161049336"></p><p>读锁：限制DML语句，仅能读表数据 共享锁  本机客户端只能读不能写，其他客户端只能读不能写</p><p>写锁：限制其他客户端对表的DML和DQL操作，本机客户端既能进行DML还能进行DQL   排它锁/独占锁</p><h4 id="元数据锁"><a href="#元数据锁" class="headerlink" title="元数据锁"></a>元数据锁</h4><p>元数据锁是为了在操作表结构的时候，比如修改表的结构，加上元数据锁，为了避免DML语句对表中的数据做出改变。  默认会加元数据锁</p><p>也是在DML操作表数据的时候不能改变表的结构</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026191120359.png" alt="image-20231026191120359"></p><h4 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h4><p>避免行锁和表锁加锁的冲突问题</p><p>表锁，有行锁然后自动给表加意向锁</p><p>InnoDb引擎中，表锁和行锁的冲突问题</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026191738672.png" alt="image-20231026191738672"></p><p>意向共享锁：两个事务，事务1读数据，事务2可以加表锁读锁</p><p>意向排他锁：事务1写数据，事务2读写都不可以，不兼容。但是和意向锁兼容</p><p>再执行select的时候，会自动加上表的意向共享锁，也会加行锁</p><p>update 这一行会加行锁。并加上表意向排他锁，然后既不能DML也不能DQL</p><h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><p>对操作的行加锁，通过对索引上的索引项来加锁，而不是对记录来加锁</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026194210040.png" alt="image-20231026194210040"></p><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>在读一行的时候允许别人读，但是不允许别人改</p><p>在修改一行数据的时候，不允许别人读和改</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026194646533.png" alt="image-20231026194646533"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026194957520.png" alt="image-20231026194957520"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026195528203.png" alt="image-20231026195528203"></p><p>next-key是临建锁</p><h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h4><h4 id="临建锁"><a href="#临建锁" class="headerlink" title="临建锁"></a>临建锁</h4><p>间隙锁为了防止幻读    防止其他事务插入数据（但是它不能插入），然后造成事务插入异常</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231026200544078.png" alt="image-20231026200544078"></p><p>针对第二条：1，3，5，7 在5之前是临建锁，那么在5-7是间隙锁   </p><h2 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h2><h3 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h3><p>表空间：一个mysql实例可以对应多个表空间，用于存储记录、索引等数据</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027130026205.png" alt="image-20231027130026205"></p><h4 id="架构一"><a href="#架构一" class="headerlink" title="架构一"></a>架构一</h4><p>缓冲池</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027130516178.png" alt="image-20231027130516178"></p><p>更改缓冲区</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027131403831.png" alt="image-20231027131403831"></p><p>自适应Hash索引</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027131706277.png" alt="image-20231027131706277"></p><p>日志缓冲区</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027131830376.png" alt="image-20231027131830376"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027132534076.png" alt="image-20231027132534076"></p><p>创建表空间</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027132552012.png" alt="image-20231027132552012"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027132503773.png" alt="image-20231027132503773"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027132453280.png" alt="image-20231027132453280"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027132810466.png" alt="image-20231027132810466"></p><p>架构</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027133052584.png" alt="image-20231027133052584"></p><p>架构：</p><p>增删改查操作缓冲区，如果缓冲区没有数据就在磁盘中读取放到缓冲区里面。缓冲区里面的数据将通过后台线程异步刷新到磁盘中，保持数据的一致</p><h3 id="InnoDB事务管理"><a href="#InnoDB事务管理" class="headerlink" title="InnoDB事务管理"></a>InnoDB事务管理</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027183835739.png" alt="image-20231027183835739"></p><p>redo log</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027184615003.png" alt="image-20231027184615003"></p><p>操作缓冲区，然后把修改的数据放到redo.log  ，然后这个log会往磁盘中输出一个文件，然后这个文件是为了防止刷新脏页到磁盘出现问题，导致没同步。这个文件就可以将信息同步到磁盘中</p><p>undo log</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027190839647.png" alt="image-20231027190839647"></p><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>在快照读的时候通过mvcc找到对应的历史版本</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027191235556.png" alt="image-20231027191235556"></p><h4 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027191718789.png" alt="image-20231027191718789"></p><p>undo log</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027193913905.png" alt="image-20231027193913905"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027193817375.png" alt="image-20231027193817375"></p><p>readview</p><p>readview 里面有4个属性，来判断应该读取哪个版本</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027194237759.png" alt="image-20231027194237759"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027194413102.png" alt="image-20231027194413102"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231027195441836.png" alt="image-20231027195441836"></p><h2 id="MYSQL管理"><a href="#MYSQL管理" class="headerlink" title="MYSQL管理"></a>MYSQL管理</h2><h3 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029102240811.png" alt="image-20231029102240811"></p><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029102444264.png" alt="image-20231029102444264"></p><h4 id="mysqladmin-创建删除数据库"><a href="#mysqladmin-创建删除数据库" class="headerlink" title="mysqladmin 创建删除数据库"></a>mysqladmin 创建删除数据库</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029103634995.png" alt="image-20231029103634995"></p><h4 id="mysqlbinlog"><a href="#mysqlbinlog" class="headerlink" title="mysqlbinlog"></a>mysqlbinlog</h4><p>二进制日志管理工具</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029103010297.png" alt="image-20231029103010297"></p><h4 id="mysqlshow-查看表中列和索引"><a href="#mysqlshow-查看表中列和索引" class="headerlink" title="mysqlshow 查看表中列和索引"></a>mysqlshow 查看表中列和索引<img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029103603071.png" alt="image-20231029103603071"></h4><p>mysqlshow -uroot -p1234 db01 –count</p><p>mysqlshow -uroot -p1234 db01 -i</p><h4 id="mysqldump数据备份"><a href="#mysqldump数据备份" class="headerlink" title="mysqldump数据备份"></a>mysqldump数据备份</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029105442509.png" alt="image-20231029105442509"></p><h4 id="mysqlimport-source"><a href="#mysqlimport-source" class="headerlink" title="mysqlimport/source"></a>mysqlimport/source</h4><p>导入mysqldump 加-T参数后导出的文本文件   source可以导入sql脚本</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029110059680.png" alt="image-20231029110059680"></p><h2 id="进阶篇总结"><a href="#进阶篇总结" class="headerlink" title="进阶篇总结"></a>进阶篇总结</h2><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029111211528.png" alt="image-20231029111211528"></p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h4 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h4><p>记录了mysql启动和停止的日志</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029111603804.png" alt="image-20231029111603804"></p><p>tail -f 尾部查看日志 </p><h4 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029140643628.png" alt="image-20231029140643628"></p><p>show variables like’%log_bin%’;</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029141041913.png" alt="image-20231029141041913"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029141216383.png" alt="image-20231029141216383"></p><p>-v v 将事件重构为sql语句,并输出注释信息</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029142014175.png" alt="image-20231029142014175"></p><p>show variables like ‘%binlog_expire_logs_seconds%’;</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029142217185.png" alt="image-20231029142217185"></p><p>30天</p><h4 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029142756093.png" alt="image-20231029142756093"></p><h4 id="慢查询日志-1"><a href="#慢查询日志-1" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>查看哪个sql语句超过了执行时间</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029144001807.png" alt="image-20231029144001807"></p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029170249530.png" alt="image-20231029170249530"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>![1698570462620](C:\Users\康\Documents\WeChat Files\wxid_abwrp7kf1qd122\FileStorage\Temp\1698570462620.png)</p><p>主库有事务提交时，把数据的变更写入二进制文件；</p><p>从库IOthread读取主库二进制文件并写入到从库Replay_log（中继）日志中；</p><p>从库又会SQLThread重做日志中的事件，改变反映自己的数据；</p><h3 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h3><p>主库ip   192.168.237.124</p><p>从库ip 192.168.237.128</p><h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><p>1.修改配置文件  /etc/my.cnf</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029172312350.png" alt="image-20231029172312350"></p><p>2.重启mysql服务器</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029173020536.png" alt="image-20231029173020536"></p><p>3.登录，mysql创建远程连接的账号，并授予主从复制的权限</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029173228893.png" alt="image-20231029173228893"></p><p>可以让从库用这个账户和密码连接主库</p><p>create user ‘kang‘@’%’ identified with mysql_native_password by ‘Root@123456’;</p><p>账户名 itcast  %这一用户可以在任意主机都可以访问这台服务器   密码Root@123456</p><p>grant replication slave on <em>.</em> to ‘kang‘@’%’;</p><p>4.通过指令查看二进制日志文件的坐标</p><p>flush privileges;</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029174243848.png" alt="image-20231029174243848"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029174342111.png" alt="image-20231029174342111"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029192447282.png" alt="image-20231029192447282"></p><h3 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h3><h4 id="搭建-1"><a href="#搭建-1" class="headerlink" title="搭建"></a>搭建</h4><p>1.修改配置文件  /etc/my.cnf</p><p>2.重启mysql服务器</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029192349266.png" alt="image-20231029192349266"></p><p>3.登录mysql，设置主从复制</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029193614919.png" alt="image-20231029193614919"></p><p>change master to master_host =’192.168.237.124’,master_user=’kang’,master_password=‘Root@123456’,master_log_file=’ binlog.000028’,master_log_pos=156;</p><p>4.开启同步操作</p><p>start replica;</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231029193626846.png" alt="image-20231029193626846"></p><p>5.查看从库状态</p><p> show slave status\G;</p><p>uuid 所在目录  /var/lib/docker/volumes/9294e8036fb5c1fd3eb8a1f691be8f1d62ea8475821976a1e016a7a251701533/_data/auto.cnf</p><p><a href="https://blog.csdn.net/qq_44895681/article/details/106574216">Mysql主从同步报错解决：Fatal error: The slave I/O thread stops because master and slave have equal..-CSDN博客</a></p><p>CHANGE MASTER TO<br>  MASTER_HOST=’192.168.237.124’,<br>  MASTER_USER=’kang’,<br>  MASTER_PASSWORD=‘Root@123456’,<br>  MASTER_PORT=3306,<br>  MASTER_LOG_FILE=’binlog.000031’,<br>  MASTER_LOG_POS=156;</p><p>解决：server相同，日志不是第一个问题</p><p><strong><a href="https://blog.csdn.net/qq_29974229/article/details/120037734">Mysql报错:Got fatal error 1236 from master when reading data from binary log: ‘Could not find first lo_上海运维Q先生的博客-CSDN博客</a></strong></p><p> <strong>set global server_id=128;</strong></p><p> <strong>select @@server_id;</strong></p><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>主库写从库读</p><h3 id="ShardingJDBC"><a href="#ShardingJDBC" class="headerlink" title="ShardingJDBC"></a>ShardingJDBC</h3><p>1.导入依赖</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--sharding-jdbc依赖--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>2.在yml配置读写分离规则</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.237.124:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.237.128:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span> <span class="comment">#轮询,针对不同从库的，负载均衡</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span> <span class="comment">#开启的话，控制台输出sql</span></span><br></pre></td></tr></tbody></table></figure><p>3.在配置文件中配置允许bean定义覆盖配置项</p><p>SpringBootConfiguration 和 DruidDataSourceAutoConfigure 都会创建一个数据源，导致报错。所以必须允许bean定义覆盖，用最新的</p><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231119174233868.png" alt="image-20231119174233868"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231117171012488.png" alt="image-20231117171012488"></p><p>生成</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231117171840772.png" alt="image-20231117171840772"></p><p>解析</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231117224222957.png" alt="image-20231117224222957"></p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231117232955083.png" alt="image-20231117232955083"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231117233516009.png" alt="image-20231117233516009"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231117233400108.png" alt="image-20231117233400108"></p><h1 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>我们可以再创建一个父工程 tlias-parent ，然后让上述的三个模块 tlias-pojo、tlias-utils、tlias-web-management 都来继承这个父工程 。 然后再将各个模块中都共有的依赖，都提取到父工程 tlias-parent中进行配置，只要子工程继承了父工程，依赖它也会继承下来，这样就无需在各个子工程中进行配置了。</p><ul><li>概念：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</li><li>作用：简化依赖配置、统一管理依赖</li></ul><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><ul><li><strong>聚合：</strong>将多个模块组织成一个整体，同时进行项目的构建。</li><li><strong>聚合工程：</strong>一个不具有业务功能的“空”工程（有且仅有一个pom文件） 【PS：一般来说，继承关系中的父工程与聚合关系中的聚合工程是同一个】</li><li><strong>作用：</strong>快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</li></ul><p>可以统一打包</p><h2 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h2><p>在maven中，可以在父工程的pom文件中通过 <dependencymanagement> 来统一管理依赖版本。</dependencymanagement></p><p>父工程：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--统一管理依赖版本--&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--JWT令牌--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">0.9</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></tbody></table></figure><p>子工程：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--JWT令牌--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></tbody></table></figure><p>注意：</p><p>在父工程中所配置的 <dependencymanagement> 只能统一管理依赖版本，并不会将这个依赖直接引入进来。 这点和 <dependencies> 是不同的。<br>子工程要使用这个依赖，还是需要引入的，只是此时就无需指定 <version> 版本号了，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</version></dependencies></dependencymanagement></p><h2 id="分模块开发"><a href="#分模块开发" class="headerlink" title="分模块开发"></a>分模块开发</h2><p>分模块设计之后，如果我们需要用到另外一个模块的功能，我们直接依赖模块就可以了。比如商品模块、搜索模块、购物车订单模块都需要依赖于通用组件当中封装的一些工具类，我只需要引入通用组件的坐标就可以了。</p><p><strong>分模块设计就是将项目按照功能/结构拆分成若干个子模块，方便项目的管理维护、拓展，也方便模块键的相互调用、资源共享。</strong></p><h1 id="三更Blog"><a href="#三更Blog" class="headerlink" title="三更Blog"></a>三更Blog</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目介绍: 博客项目，前端有两个系统，分别是负责博客页面(前台系统)、管理页面(后台系统)。后端也有两个系统，分别是前端两个系统的具体实现</p><p>思考: 后端两个系统的代码复用性较高，所以后端创建的是多模块(3个模块)项目，把后端两个系统(两个子模块)都会用到的代码写到一个公共模块(第3个模块)</p><p>3个子模块在父模块里面，父模块叫SpringBootBlog</p><p>3个子模块分别是dykang-framework(公共模块)、dykang-blog(博客前台模块)、dykang-admin(博客后台模块)</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><h3 id="创建父模块dy-Blog"><a href="#创建父模块dy-Blog" class="headerlink" title="创建父模块dy-Blog"></a>创建父模块dy-Blog</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025131624543.png" alt="image-20231025131624543"></p><p>把src目录删掉</p><p>在pom.xml添加</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.kang&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dy-Blog&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;!--    聚合工程，可以一起打包，一起清理，更加方便--&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;<span class="keyword">module</span>&gt;dykang-framework&lt;/<span class="keyword">module</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">module</span>&gt;dykang-blog&lt;/<span class="keyword">module</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">module</span>&gt;dykang-admin&lt;/<span class="keyword">module</span>&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    多模块开发，提高系统的复用性--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--编码方式、jdk版本--&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-<span class="number">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;<span class="number">1.8</span>&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--依赖的版本控制--&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- SpringBoot的依赖配置--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">2.5</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--fastjson依赖--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">1.2</span><span class="number">.33</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--jwt依赖--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">0.9</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--mybatisPlus依赖--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">3.4</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--阿里云OSS--&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">3.10</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;easyexcel&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">3.0</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;!--配置maven版本--&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">                &lt;!--配置jdk版本--&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;${java.version}&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;${java.version}&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;${project.build.sourceEncoding}&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="创建公共子模块dykang-framework"><a href="#创建公共子模块dykang-framework" class="headerlink" title="创建公共子模块dykang-framework"></a>创建公共子模块dykang-framework</h3><p>在pox.xml添加</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;dy-Blog&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.kang&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--    公共模块--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;dykang-framework&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--lombok--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--junit--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--SpringSecurity启动器--&gt;</span><br><span class="line">        &lt;!--&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;--&gt;</span><br><span class="line">        &lt;!--redis依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--fastjson依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--jwt依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--mybatisPlus依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--mysql数据库驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--阿里云OSS--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--AOP--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;easyexcel&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="创建博客后台模块dykang-admin"><a href="#创建博客后台模块dykang-admin" class="headerlink" title="创建博客后台模块dykang-admin"></a>创建博客后台模块dykang-admin</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;dy-Blog&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.kang&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    管理后台页面--&gt;</span><br><span class="line">    &lt;artifactId&gt;dykang-admin&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--用dykang-framework模块里面的依赖--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.kang&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dykang-framework&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="创建博客前台模块dykang-blog"><a href="#创建博客前台模块dykang-blog" class="headerlink" title="创建博客前台模块dykang-blog"></a>创建博客前台模块dykang-blog</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;dy-Blog&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.kang&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    管理前台页面--&gt;</span><br><span class="line">    &lt;artifactId&gt;dy-blog&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--用dykang-framework模块里面的依赖--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.kang&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dykang-framework&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="EasyCode插件"><a href="#EasyCode插件" class="headerlink" title="EasyCode插件"></a>EasyCode插件</h2><p>快速生成实体类等代码</p><h2 id="公共模块-准备工作"><a href="#公共模块-准备工作" class="headerlink" title="公共模块-准备工作"></a>公共模块-准备工作</h2><p>导入数据库</p><p>测试</p><h2 id="博客前台模块-准备工作"><a href="#博客前台模块-准备工作" class="headerlink" title="博客前台模块-准备工作"></a>博客前台模块-准备工作</h2><p>整合mybatisplus</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025132845175.png" alt="image-20231025132845175"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231025133125795.png" alt="image-20231025133125795"></p><h2 id="博客前台模块-文章列表"><a href="#博客前台模块-文章列表" class="headerlink" title="博客前台模块-文章列表"></a>博客前台模块-文章列表</h2><h3 id="接口分析"><a href="#接口分析" class="headerlink" title="接口分析"></a>接口分析</h3><p>需要查询浏览量最高的前10篇文章的信息。要求展示文章标题和浏览量。把能让用户自己点击跳转到具体的文章详情进行浏览</p><p>注意：不能把草稿展示出来，不能把删除了的文章查询出来。要按照浏览量进行降序排序</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>构造查询条件：已发布文章，未删除文章（yml逻辑删除字段已自动判断是否删除，在这就不用加入此条件） ，通过降序排序 并只查看10条数据 所以用分页查询，直接表明是第一页显示10个数据即可  通过查询条件查询出文章表信息 通过BeanCopy给VO，并返回给前端</p><h3 id="统一响应格式"><a href="#统一响应格式" class="headerlink" title="统一响应格式"></a>统一响应格式</h3><h4 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1.代码实现"></a>1.代码实现</h4><p>第一步: 在huanf-framework公共模块的src/main/java目录新建com.huanf.enums.AppHttpCodeEnum类，写入如下，作用是封装code和msg</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huanf.enums;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/19 0019 12:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AppHttpCodeEnum</span> {</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">"操作成功"</span>),</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    NEED_LOGIN(<span class="number">401</span>,<span class="string">"需要登录后操作"</span>),</span><br><span class="line">    NO_OPERATOR_AUTH(<span class="number">403</span>,<span class="string">"无权限操作"</span>),</span><br><span class="line">    SYSTEM_ERROR(<span class="number">500</span>,<span class="string">"出现错误"</span>),</span><br><span class="line">    USERNAME_EXIST(<span class="number">501</span>,<span class="string">"用户名已存在"</span>),</span><br><span class="line">    PHONENUMBER_EXIST(<span class="number">502</span>,<span class="string">"手机号已存在"</span>), EMAIL_EXIST(<span class="number">503</span>, <span class="string">"邮箱已存在"</span>),</span><br><span class="line">    REQUIRE_USERNAME(<span class="number">504</span>, <span class="string">"必需填写用户名"</span>),</span><br><span class="line">    LOGIN_ERROR(<span class="number">505</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">    <span class="type">int</span> code;</span><br><span class="line">    String msg;</span><br><span class="line"></span><br><span class="line">    AppHttpCodeEnum(<span class="type">int</span> code, String errorMessage){</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = errorMessage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二步: 在huanf-framework公共模块的domain目录新建ResponseResult类，写入如下，作为统一响应格式的类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huanf.domain;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data) {</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.code = code;</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.data = data;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data, String msg) {</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.code = code;</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.data = data;</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.msg = msg;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(T data) {</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.data = data;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> code;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> {</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.code = code;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> msg;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> {</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.msg = msg;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> data;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> {</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">this</span>.data = data;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-后端解决跨域"><a href="#2-后端解决跨域" class="headerlink" title="2.后端解决跨域"></a>2.后端解决跨域</h4><p>在huanf-framework工程的src/main/java目录新建com.huanf.config.WebConfig类，写入如下，然后重新运行huanf-blog工程的HuanfBlogApplication类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huanf.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/19 0019 14:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> {</span><br><span class="line">        <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">"*"</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"DELETE"</span>, <span class="string">"PUT"</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//ServiceImpl是mybatisPlus官方提供的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ArticleMapper, Article&gt; <span class="keyword">implements</span> <span class="title class_">ArticleService</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询热门文章，封装成ResponseResult返回。把所有查询条件写在queryWrapper里面</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询的不能是草稿。也就是Status字段不能是0</span></span><br><span class="line">        queryWrapper.eq(Article::getStatus,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//按照浏览量进行排序。也就是根据ViewCount字段降序排序</span></span><br><span class="line">        queryWrapper.orderByDesc(Article::getViewCount);</span><br><span class="line">        <span class="comment">//最多只能查询出来10条消息。当前显示第一页的数据，每页显示10条数据</span></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line">        <span class="comment">//获取最终的查询结果</span></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articles);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="3、前端项目的启动"><a href="#3、前端项目的启动" class="headerlink" title="3、前端项目的启动"></a>3、前端项目的启动</h4><p>需要有node.js</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /SpringBootBlogWeb/sg-blog-vue</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></tbody></table></figure><h4 id="4-统一响应格式（优化）"><a href="#4-统一响应格式（优化）" class="headerlink" title="4.统一响应格式（优化）"></a>4.统一响应格式（优化）</h4><h5 id="vo"><a href="#vo" class="headerlink" title="vo"></a>vo</h5><p>在刚刚的响应格式中，其实是不符合接口文档标准的，因为我们返回了很多字段，如下图，有些字段不需要返回，或者比较敏感不能返回给前端</p><p><img src="https://cdn.nlark.com/yuque/0/2023/jpg/35597420/1693034006959-451cfd5d-5196-49a5-9a7a-f5e9169abb85.jpg" alt="img"></p><p>为什么会返回这么多字段: 查询出来的结果是用Article来封装的，由于Article实体类里面的字段比较多，所以返回的字段也就是很多</p><p>解决: 用VO (是Value Object的缩写,表示值对象) 来接收查询的结果，一个接口对应一个VO，这样即使接口响应字段要修改也只要修改VO即可</p><p>Bean拷贝:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.copyProperties(xxarticle,xxvo);</span><br></pre></td></tr></tbody></table></figure><h5 id="字面值处理"><a href="#字面值处理" class="headerlink" title="字面值处理"></a>字面值处理</h5><p>实际项目中都不允许直接在代码中使用字面值(代码中的固定值)。都需要定义成常量来使用。这种方式有利于提高代码的可维护性。字面值如下图</p><p><img src="https://cdn.nlark.com/yuque/0/2023/jpg/35597420/1693034008056-8dbc6d71-5d02-4ab8-b7eb-4b217db7aa9d.jpg" alt="img"></p><p>第一步: 在huanf-framework工程的src/main/java目录新建com.huanf.constants.SystemCanstants类，写入如下，作用是定义常量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huanf.constants;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/19 0019 19:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//字面值(代码中的固定值)处理，把字面值都在这里定义成常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemCanstants</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  文章是草稿</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARTICLE_STATUS_DRAFT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  文章是正常分布状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARTICLE_STATUS_NORMAL</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章列表当前查询页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARTICLE_STATUS_CURRENT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章列表每页显示的数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARTICLE_STATUS_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="Bean拷贝的封装"><a href="#Bean拷贝的封装" class="headerlink" title="Bean拷贝的封装"></a>Bean拷贝的封装</h5><p>在前面的 ‘统一响应格式(优化)’ 的 ‘一、定义并测试VO’，最核心的代码就是ArticleServiceImpl类里面用到的Spring提供的BeanUtils工具类。这个工具类可以把Article类里面拿到的查询结果，拷贝给HotArticleVO类，注意HotArticleVO(少)相对于Article(多)来说，成员变量的数量可以少，但是名称和类型必须一样</p><p>我们前面是在ArticleServiceImpl类写了如下核心代码，为了提高代码复用性，我们必须把这段代码抽取出来进行封装</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huanf.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/19 0019 20:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这个类用到很多泛型知识，可以对应去补一下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanCopyUtils</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的空参构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanCopyUtils</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.单个实体类的拷贝(暂时还用不上)。第一个参数是要拷贝的对象，第二个参数是类的字节码对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; V <span class="title function_">copyBean</span><span class="params">(Object source,Class&lt;V&gt; clazz)</span> {</span><br><span class="line">        <span class="comment">//创建目标对象</span></span><br><span class="line">        <span class="type">V</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            result = clazz.newInstance();</span><br><span class="line">            <span class="comment">//实现属性拷贝。也就是把source的属性拷贝到这个目标对象。BeanUtils是spring提供的工具类</span></span><br><span class="line">            BeanUtils.copyProperties(source, result);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.集合的拷贝(在ArticleServiceImpl类里面会使用到)。第一个参数是要拷贝的集合，第二个参数是类的字节码对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;O,V&gt; List&lt;V&gt; <span class="title function_">copyBeanList</span><span class="params">(List&lt;O&gt; list,Class&lt;V&gt; clazz)</span>{</span><br><span class="line">        <span class="comment">//不使用for循环，使用stream流进行转换</span></span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .map(o -&gt; copyBean(o, clazz))</span><br><span class="line">                <span class="comment">//把结果转换成集合</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改之前copy代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一行搞定</span></span><br><span class="line">       List&lt;HotArticleVO&gt; articleVos = BeanCopyUtils.copyBeanList(articles, HotArticleVO.class);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-分类列表"><a href="#博客前台模块-分类列表" class="headerlink" title="博客前台模块-分类列表"></a>博客前台模块-分类列表</h2><h3 id="接口分析-1"><a href="#接口分析-1" class="headerlink" title="接口分析"></a>接口分析</h3><p>页面上需要展示分类列表，用户可以点击具体的分类查看该分类下的文章列表。要求只展示有发布正式文章的分类 。要求必须是正常(非禁用)状态的分类</p><h3 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h3><p>首先查询文章表中状态正常的文章分类ID集合并去重，通过调用listByIds获取分类相关信息，然后通过stream流过滤出状态正常的分类信息，通过BeanCopy把信息拷贝到VO对象，将VO对象返回给前端</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service("categoryService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper,Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//ArticleService是我们在huanf-framework写的接口</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//查询分类列表的核心代码</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getCategoryList</span><span class="params">()</span> {</span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; articleWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//要求查的是getStatus字段的值为1，注意SystemCanstants是我们写的一个常量类，用来解决字面值的书写问题</span></span><br><span class="line">        articleWrapper.eq(Article::getStatus, SystemCanstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">        <span class="comment">//查询文章列表，条件就是上一行的articleWrapper</span></span><br><span class="line">        List&lt;Article&gt; articleList = articleService.list(articleWrapper);</span><br><span class="line">        <span class="comment">//获取文章的分类id，并且去重。使用stream流来处理上一行得到的文章表集合</span></span><br><span class="line">        Set&lt;Long&gt; categoryIds = articleList.stream()</span><br><span class="line">                <span class="comment">//下面那行可以优化为Lambda表达式+方法引用</span></span><br><span class="line">                .map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Article, Long&gt;() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Article article)</span> {</span><br><span class="line">                        <span class="keyword">return</span> article.getCategoryId();</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                <span class="comment">//把文章的分类id转换成Set集合</span></span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询分类表</span></span><br><span class="line">        List&lt;Category&gt; categories = listByIds(categoryIds);</span><br><span class="line">        <span class="comment">//注意SystemCanstants是我们写的一个常量类，用来解决字面值的书写问题</span></span><br><span class="line">        categories = categories.stream()</span><br><span class="line">                .filter(category -&gt; SystemCanstants.STATUS_NORMAL.equals(category.getStatus()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装成CategoryVo实体类后返回给前端，CategoryVo的作用是只返回前端需要的字段。BeanCopyUtils是我们写的工具类</span></span><br><span class="line">        List&lt;CategoryVo&gt; categoryVos = BeanCopyUtils.copyBeanList(categories, CategoryVo.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(categoryVos);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-分页查询"><a href="#博客前台模块-分页查询" class="headerlink" title="博客前台模块-分页查询"></a>博客前台模块-分页查询</h2><h3 id="接口分析-2"><a href="#接口分析-2" class="headerlink" title="接口分析"></a>接口分析</h3><p>首页需要查询所有的文章列表。分类页面需要查询对应分类下的文章列表。只能查询正式发布的文章，置顶的文章要显示在最前面</p><h3 id="解决思路-2"><a href="#解决思路-2" class="headerlink" title="解决思路"></a>解决思路</h3><p>首先看到分页，先配置MP分页插件；</p><p>查询条件为 正常发布的文章，置顶的文章（降序排序即可），分类名，文章实体类中没有需要添加，并加入注解TableField（exists=false）在数据库表中实际不存在  ；通过分类ID查找分类表获取分类名，封装分页VO对象返回</p><h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//配置MyBatisPlus的分页插件，使得支持分页查询。这个类直接复制就能用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.4.0之后版本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//----------------------------------分页查询文章的列表---------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum, Integer pageSize, Long categoryId)</span> {</span><br><span class="line"></span><br><span class="line">      LambdaQueryWrapper&lt;Article&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//判空。如果前端传了categoryId这个参数，那么查询时要和传入的相同。第二个参数是数据表的文章id，第三个字段是前端传来的文章id</span></span><br><span class="line">      lambdaQueryWrapper.eq(Objects.nonNull(categoryId)&amp;&amp;categoryId&gt;<span class="number">0</span>,Article::getCategoryId,categoryId);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//只查询状态是正式发布的文章。Article实体类的status字段跟0作比较，一样就表示是正式发布的</span></span><br><span class="line">      lambdaQueryWrapper.eq(Article::getStatus,SystemCanstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//对isTop字段进行降序排序，实现置顶的文章(isTop值为1)在最前面</span></span><br><span class="line">      lambdaQueryWrapper.orderByDesc(Article::getIsTop);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//分页查询</span></span><br><span class="line">      Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">      page(page,lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//把最后的查询结果封装成ArticleListVo(我们写的实体类)。BeanCopyUtils是我们写的工具类</span></span><br><span class="line">      List&lt;ArticleListVo&gt; articleListVos = BeanCopyUtils.copyBeanList(page.getRecords(), ArticleListVo.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//把上面那行的查询结果和文章总数封装在PageVo(我们写的实体类)</span></span><br><span class="line">      <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(articleListVos,page.getTotal());</span><br><span class="line">      <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="解决categoryName没有名字问题"><a href="#解决categoryName没有名字问题" class="headerlink" title="解决categoryName没有名字问题"></a>解决categoryName没有名字问题</h3><p>for循环解决</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 解决categoryName字段没有返回值的问题。在分页之后，封装成ArticleListVo之前，进行处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//用categoryId来查询categoryName(category表的name字段)，也就是查询'分类名称'。有两种方式来实现，如下</span></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">        <span class="comment">//第一种方式，用for循环遍历的方式</span></span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) {</span><br><span class="line">            <span class="comment">//'article.getCategoryId()'表示从article表获取category_id字段，然后作为查询category表的name字段</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(article.getCategoryId());</span><br><span class="line">            <span class="comment">//把查询出来的category表的name字段值，也就是article，设置给Article实体类的categoryName成员变量</span></span><br><span class="line">            article.setCategoryName(category.getName());</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="comment">//Stream流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用categoryId来查询categoryName(category表的name字段)，也就是查询'分类名称'</span></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">        articles.stream()</span><br><span class="line">                .map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Article, Article&gt;() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Article <span class="title function_">apply</span><span class="params">(Article article)</span> {</span><br><span class="line">                        <span class="comment">//'article.getCategoryId()'表示从article表获取category_id字段，然后作为查询category表的name字段</span></span><br><span class="line">                        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(article.getCategoryId());</span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                        <span class="comment">//把查询出来的category表的name字段值，也就是article，设置给Article实体类的categoryName成员变量</span></span><br><span class="line">                        article.setCategoryName(name);</span><br><span class="line">                        <span class="comment">//把查询出来的category表的name字段值，也就是article，设置给Article实体类的categoryName成员变量</span></span><br><span class="line">                        <span class="keyword">return</span> article;</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在category类中增加一个字段，为categoryName，由categoryId来查询出</span></span><br><span class="line">   <span class="comment">//由于数据库没有category_name字段，所以要用注解指定一下字段</span></span><br><span class="line">   <span class="meta">@TableField(exist = false)</span><span class="comment">//代表这个字段在数据库中不存在，避免MyBatisPlus在查询时报错</span></span><br><span class="line">   <span class="keyword">private</span> String categoryName;</span><br></pre></td></tr></tbody></table></figure><h3 id="FastJson配置"><a href="#FastJson配置" class="headerlink" title="FastJson配置"></a>FastJson配置</h3><p>由于ArticleListVO类的createTime成员变量是Date类型，默认是由java的Jackson来处理，使用 ISO-8601 规范来处理日期时间格式。ISO-8601 是一种国际标准的日期时间表示法，例如：”2023-07-21T06:53:24”。我们不希望时间被处理成这种格式，如下图。解决: 使用FastJson</p><p>也可以通过注解的方式，在日期字段上面加入@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”)也可</p><p><img src="https://cdn.nlark.com/yuque/0/2023/jpg/35597420/1693034010104-0019ad45-03f8-4751-a7ad-81aea2b76c47.jpg?x-oss-process=image/resize,w_1500,limit_0/interlace,1" alt="img"></p><p>第一步(已做可跳过): 在huanf-framework的pom.xml添加如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--fastjson依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>第二步: 在huanf-framework的config目录的WebConfig类，修改为如下。用线隔开了。直接复制去用</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">package com.huanf.config;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.serializer.SerializeConfig;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.serializer.ToStringSerializer;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.support.config.FastJsonConfig;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"> \* @author 35238</span><br><span class="line"></span><br><span class="line"> \* @date 2023/7/19 0019 14:57</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line"></span><br><span class="line">public class WebConfig implements WebMvcConfigurer {</span><br><span class="line"></span><br><span class="line">​    @Override</span><br><span class="line"></span><br><span class="line">​    public void addCorsMappings(CorsRegistry registry) {</span><br><span class="line"></span><br><span class="line">​        // 设置允许跨域的路径</span><br><span class="line"></span><br><span class="line">​        registry.addMapping("/**")</span><br><span class="line"></span><br><span class="line">​                // 设置允许跨域请求的域名</span><br><span class="line"></span><br><span class="line">​                .allowedOriginPatterns("*")</span><br><span class="line"></span><br><span class="line">​                // 是否允许cookie</span><br><span class="line"></span><br><span class="line">​                .allowCredentials(true)</span><br><span class="line"></span><br><span class="line">​                // 设置允许的请求方式</span><br><span class="line"></span><br><span class="line">​                .allowedMethods("GET", "POST", "DELETE", "PUT")</span><br><span class="line"></span><br><span class="line">​                // 设置允许的header属性</span><br><span class="line"></span><br><span class="line">​                .allowedHeaders("*")</span><br><span class="line"></span><br><span class="line">​                // 跨域允许时间</span><br><span class="line"></span><br><span class="line">​                .maxAge(3600);</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    //-----------------------------------FastJson配置-----------------------------------------</span><br><span class="line"></span><br><span class="line">​    @Bean//使用@Bean注入fastJsonHttpMessageConvert</span><br><span class="line"></span><br><span class="line">​    public HttpMessageConverter fastJsonHttpMessageConverters() {</span><br><span class="line"></span><br><span class="line">​        //1.需要定义一个Convert转换消息的对象</span><br><span class="line"></span><br><span class="line">​        FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter();</span><br><span class="line"></span><br><span class="line">​        FastJsonConfig fastJsonConfig = new FastJsonConfig();</span><br><span class="line"></span><br><span class="line">​        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line"></span><br><span class="line">​        fastJsonConfig.setDateFormat("yyyy-MM-dd HH:mm:ss");</span><br><span class="line"></span><br><span class="line">​        SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);</span><br><span class="line"></span><br><span class="line">​        fastJsonConfig.setSerializeConfig(SerializeConfig.globalInstance);</span><br><span class="line"></span><br><span class="line">​        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line"></span><br><span class="line">​        HttpMessageConverter&lt;?&gt; converter = fastConverter;</span><br><span class="line"></span><br><span class="line">​        return converter;</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    @Override</span><br><span class="line"></span><br><span class="line">​    //配置消息转换器</span><br><span class="line"></span><br><span class="line">​    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {</span><br><span class="line"></span><br><span class="line">​        //增加我们的消息转换器</span><br><span class="line"></span><br><span class="line">​        converters.add(fastJsonHttpMessageConverters());</span><br><span class="line"></span><br><span class="line">​    }</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    //--------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-文章详情"><a href="#博客前台模块-文章详情" class="headerlink" title="博客前台模块-文章详情"></a>博客前台模块-文章详情</h2><h3 id="接口分析-3"><a href="#接口分析-3" class="headerlink" title="接口分析"></a>接口分析</h3><p>要求在文章列表点击阅读全文时能够跳转到文章详情页面，可以让用户阅读文章正文。并且要在文章详情中展示其分类名</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"code"</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"data"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"categoryId"</span><span class="punctuation">:</span> <span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"categoryName"</span><span class="punctuation">:</span> <span class="string">"java"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"content"</span><span class="punctuation">:</span> <span class="string">"文章详情的具体文章内容"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"createTime"</span><span class="punctuation">:</span> <span class="string">"2022-01-23 23:20:11"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"isComment"</span><span class="punctuation">:</span> <span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"title"</span><span class="punctuation">:</span> <span class="string">"SpringSecurity从入门到精通"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"viewCount"</span><span class="punctuation">:</span> <span class="string">"114"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"msg"</span><span class="punctuation">:</span> <span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="解决思路-3"><a href="#解决思路-3" class="headerlink" title="解决思路"></a>解决思路</h3><p>路径参数需要加入@PathVariable标明是路径参数</p><p>根据传入id，找到这个文章，获取文章分类ID，然后根据文章分类ID获取分类名称，BeanCopy给VO对象</p><h3 id="Http请求方式"><a href="#Http请求方式" class="headerlink" title="Http请求方式"></a>Http请求方式</h3><p>以GET /article/{id} 为例的路径参数形式，下面两种是比较常用的。不常用的有’请求体形式’、’请求头形式’</p><table><thead><tr><th>请求形式</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>路径参数形式</td><td>/articles/{id}</td><td>参数作为路径的一部分，表示明确的资源标识符或必需的参数。</td></tr><tr><td>查询参数形式</td><td>/articles?id=1&amp;num=1</td><td>参数通过 “?” 或 “&amp;” 的方式附加在URL的末尾，适合传递可选参数或过滤条件。</td></tr></tbody></table><p>在上面的业务请求中，我们使用的都是’路径参数形式’，下面的业务请求中，我们将会使用’查询参数形式’</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------查询文章详情------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/{id}")</span> <span class="comment">//路径参数形式的HTTP请求，注意下面那行只有加@PathVariable注解才能接收路径参数形式的HTTP请求</span></span><br><span class="line">    <span class="comment">//ResponseResult是huanf-framework工程的domain目录的类</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span> {<span class="comment">//注解里指定的id跟上一行保持一致</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id查询文章详情</span></span><br><span class="line">        <span class="keyword">return</span> articleService.getArticleDetail(id);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------根据id查询文章详情---------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(Long id)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id查询文章</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把最后的查询结果封装成ArticleListVo(我们写的实体类)。BeanCopyUtils是我们写的工具类</span></span><br><span class="line">        <span class="type">ArticleDetailVo</span> <span class="variable">articleDetailVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(article, ArticleDetailVo.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据分类id，来查询分类名</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> articleDetailVo.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="comment">//如果根据分类id查询的到分类名，那么就把查询到的值设置给ArticleDetailVo实体类的categoryName字段</span></span><br><span class="line">        <span class="keyword">if</span>(category!=<span class="literal">null</span>){</span><br><span class="line">            articleDetailVo.setCategoryName(category.getName());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装响应返回。ResponseResult是我们在huanf-framework工程的domain目录写的实体类</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articleDetailVo);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-友链功能"><a href="#博客前台模块-友链功能" class="headerlink" title="博客前台模块-友链功能"></a>博客前台模块-友链功能</h2><h3 id="接口分析-4"><a href="#接口分析-4" class="headerlink" title="接口分析"></a>接口分析</h3><p>在友链页面要查询出所有的审核通过的友链，响应格式如下</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"code"</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"data"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"address"</span><span class="punctuation">:</span> <span class="string">"https://www.baidu.com"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"sda"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"logo"</span><span class="punctuation">:</span> <span class="string">"图片url1"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"sda"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"address"</span><span class="punctuation">:</span> <span class="string">"https://www.qq.com"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"dada"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"2"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"logo"</span><span class="punctuation">:</span> <span class="string">"图片url2"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"sda"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"msg"</span><span class="punctuation">:</span> <span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="解决思路-4"><a href="#解决思路-4" class="headerlink" title="解决思路"></a>解决思路</h3><p>条件:审核通过即可，查询出直接BeanCopy对象返回</p><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>@Service(“linkService”)<br>public class LinkServiceImpl extends ServiceImpl&lt;LinkMapper, Link&gt; implements LinkService {</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getAllLink</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有审核通过的友链</span></span><br><span class="line">    LambdaQueryWrapper&lt;Link&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//要求查的是友链表status字段的值为0，注意SystemCanstants是我们写的一个常量类，用来解决字面值的书写问题</span></span><br><span class="line">    queryWrapper.eq(Link::getStatus, SystemCanstants.LINK_STATUS_NORMAL);</span><br><span class="line">    List&lt;Link&gt; links = list(queryWrapper);</span><br><span class="line">    <span class="comment">//把最后的查询结果封装成LinkListVo(我们写的实体类)。BeanCopyUtils是我们写的工具类</span></span><br><span class="line">    List&lt;LinkVo&gt; linkVos = BeanCopyUtils.copyBeanList(links, LinkVo.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装响应返回。ResponseResult是我们在huanf-framework工程的domain目录写的实体类</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(linkVos);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-登录功能"><a href="#博客前台模块-登录功能" class="headerlink" title="博客前台模块-登录功能"></a>博客前台模块-登录功能</h2><p>SpringSecrity</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 登录：通过过滤器，没有token放行，让他执行登录接口，去查询数据库，将数据库中的用户名、密码和权限信息放到loginuser中，登录管理器会通过BC密码验证规则去验证密码是否正确（管理器里面会首先把得到的密码BC处理，然后和UserDetails对比），正确将loginuser信息存到authiencation中返回，然后在里面获取token并返回给前端，loginuser信息放到redis中，以便于登录过得用户携带相关权限信息进行判断是否能执行相应操作，然后登录成功。                         接口：携带相关权限和token被jwt认证过滤器拦截，判断token是否正确，正确解析token获得登录用户id，然后从redis中获得相关权限信息集合，将权限信息和loginuser 保存到securitycontextholder中，然后放行后续过滤器会从securitycontextholder中获取相关信息选择放行             </span><br><span class="line">权限认证：将controller层接口上携带权限校验的权限信息，和securitycontextholder中的权限信息进行比对，有就返回true就有权限。                                   </span><br><span class="line">因为访问接口前需要经过jwt认证处理器，所以securitycontextholder中会有相关的权限信息拿来比对</span><br></pre></td></tr></tbody></table></figure><p>![aa6c0199e84c10e2958243224fef91d](C:\Users\康\Documents\WeChat Files\wxid_abwrp7kf1qd122\FileStorage\Temp\aa6c0199e84c10e2958243224fef91d.jpg)</p><p>![42814ee71a38ad709bc8701bbf009ba](C:\Users\康\Documents\WeChat Files\wxid_abwrp7kf1qd122\FileStorage\Temp\42814ee71a38ad709bc8701bbf009ba.jpg)</p><p>![92de010666bcc5d2a7a6d7c4ca5b396](C:\Users\康\Documents\WeChat Files\wxid_abwrp7kf1qd122\FileStorage\Temp\92de010666bcc5d2a7a6d7c4ca5b396.jpg)</p><p>![d0ac7e0fda038b5244dbc9249db2bb2](C:\Users\康\Documents\WeChat Files\wxid_abwrp7kf1qd122\FileStorage\Temp\d0ac7e0fda038b5244dbc9249db2bb2.png)</p><h3 id="接口分析-5"><a href="#接口分析-5" class="headerlink" title="接口分析"></a>接口分析</h3><p>请求体</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    "userName":"sg",</span><br><span class="line">    "password":"1234"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>响应格式</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"code"</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"data"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"token"</span><span class="punctuation">:</span> <span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI0ODBmOThmYmJkNmI0NjM0OWUyZjY2NTM0NGNjZWY2NSIsInN1YiI6IjEiLCJpc3MiOiJzZyIsImlhdCI6MTY0Mzg3NDMxNiwiZXhwIjoxNjQzOTYwNzE2fQ.ldLBUvNIxQCGemkCoMgT_0YsjsWndTg5tqfJb77pabk"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"userInfo"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"avatar"</span><span class="punctuation">:</span> <span class="string">"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3bf9c263bc0f2ac5c3a7feb9e218d07475573ec8.gi"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"email"</span><span class="punctuation">:</span> <span class="string">"23412332@qq.com"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"id"</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"nickName"</span><span class="punctuation">:</span> <span class="string">"sg333"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"sex"</span><span class="punctuation">:</span> <span class="string">"1"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"msg"</span><span class="punctuation">:</span> <span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>登录</p><p>​①自定义登录接口</p><p>​调用ProviderManager的方法进行认证 如果认证通过生成jwt</p><p>​把用户信息存入redis中</p><p>​②自定义UserDetailsService</p><p>​在这个实现类中去查询数据库，返回UserDetails实现类对象</p><p>​注意配置passwordEncoder为BCryptPasswordEncoder</p><p>UserDetails实现类对象的密码和Authentication密码相比较，相同将UserDetails实现类对象的权限信息交给Authentication对象</p><p>校验：</p><p>​①定义Jwt认证过滤器</p><p>​获取token</p><p>​解析token获取其中的userid</p><p>​从redis中获取用户信息</p><p>​存入SecurityContextHolder，以便后面过滤器拿来使用</p><p>配置</p><p>​     ① 登录管理器ProviderManager</p><p>​          BCryptPasswordEncoder密码校验</p><p>​           JWT认证过滤器</p><p>​           权限和认证异常处理器</p><p>​           crsf攻击</p><p>​            cors跨域</p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><p>登录接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/25$ 19:17$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogLoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BlogLoginService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> {</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">usernamePasswordAuthenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class="line">        <span class="comment">//登录管理器,去帮我们校验密码和拿到权限</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(usernamePasswordAuthenticationToken);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(authenticate)){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//获得UserID，形成token</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">//获得用户相关信息，存到Redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">"bloglogin:"</span>+userId,loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先查询出用户信息</span></span><br><span class="line">        <span class="comment">//先将User封装成UserInfoVo</span></span><br><span class="line">        <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(loginUser.getUser(), UserInfoVo.class);</span><br><span class="line">        <span class="comment">//在封装成BlogUserLoginVo返回</span></span><br><span class="line">        <span class="type">BlogUserLoginVo</span> <span class="variable">blogUserLoginVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlogUserLoginVo</span>(token,userInfoVo);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(blogUserLoginVo);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>UserDetailsService实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/25 21:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String userName)</span> <span class="keyword">throws</span> UsernameNotFoundException {</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(StringUtils.isNoneEmpty(userName),User::getUserName, userName);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//        List&lt;String&gt; arrayList = menuMapper.selectPermsByUserId(user.getId());</span></span><br><span class="line">        <span class="comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class="line">        <span class="comment">//封装成UserDetails对象返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>UserDetails</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装数据库查询的用户名密码和权限信息，密码校验器会判断authentication中的密码和UserDetails的密码是否一样，一样就把权限存储到authentication中</span></span><br><span class="line"><span class="comment"> *   然后将token返回前端，将权限存到redis中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUser</span><span class="params">(User user)</span> {</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>JWT认证过滤器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先执行这个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">"token"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) {</span><br><span class="line">            <span class="comment">//放行,后面会有过滤器过滤是否有用户信息</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="comment">//return；回来后不想让它执行后面逻辑</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//解析token</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            claims = JwtUtil.parseJWT(token);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//未携带token</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">            WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">        }</span><br><span class="line">        userId = claims.getSubject();</span><br><span class="line">        <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> <span class="string">"bloglogin:"</span> + userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> redisCache.getCacheObject(redisKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(loginUser)) {</span><br><span class="line">            <span class="comment">//jwt已经过期，redis中获取信息为null</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">            WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">//TODO 获取权限信息封装Authentication</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">usernamePasswordAuthenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>springSecurity配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*import com.sangeng.filter.JwtAuthenticationTokenFilter;</span></span><br><span class="line"><span class="comment">import com.sangeng.handle.AccessDeniedHandlerImpl;</span></span><br><span class="line"><span class="comment">import com.sangeng.handle.AuthenticationEntryPointImpl;*/</span></span><br><span class="line"><span class="keyword">import</span> com.sangeng.filter.JwtAuthenticationTokenFilter;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.handle.security.AccessDeniedHandlerImpl;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.handle.security.AuthenticationEntryPointImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandlerImpl accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPointImpl authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        http</span><br><span class="line">                 <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                 <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                 <span class="comment">// 对于登录接口 允许匿名访问 意思是未登录可以访问这个请求，登录成功不能访问这个请求</span></span><br><span class="line">                .antMatchers(<span class="string">"/login"</span>).anonymous()</span><br><span class="line">                <span class="comment">//需要登录才能访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/link/getAllLink"</span>).authenticated()</span><br><span class="line">                 <span class="comment">// 除上面外的所有请求全部可以请求</span></span><br><span class="line">                .anyRequest().permitAll();</span><br><span class="line">        <span class="comment">//增加JWT过滤器</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter,UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler)   <span class="comment">//权限异常处理</span></span><br><span class="line">                .authenticationEntryPoint(authenticationEntryPoint);  <span class="comment">//认证异常处理</span></span><br><span class="line">        <span class="comment">//允许跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * authenticationManager管理器，会去请求调用用户去查询数据库获得权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-异常处理"><a href="#博客前台模块-异常处理" class="headerlink" title="博客前台模块-异常处理"></a>博客前台模块-异常处理</h2><h3 id="认证授权的异常处理"><a href="#认证授权的异常处理" class="headerlink" title="认证授权的异常处理"></a>认证授权的异常处理</h3><p>主要处理业务层的异常</p><p>权限认证失败处理器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.handle.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限不足</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                       AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException {</span><br><span class="line">        accessDeniedException.printStackTrace();</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NO_OPERATOR_AUTH);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response, json);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>认证失败处理器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.handle.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.BadCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.InsufficientAuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证失败，登录用户名密码错误</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object result;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException {</span><br><span class="line">        authException.printStackTrace();</span><br><span class="line">        <span class="comment">//InsufficientAuthenticationException</span></span><br><span class="line">        <span class="comment">//无授权，未登录</span></span><br><span class="line">        <span class="keyword">if</span> (authException <span class="keyword">instanceof</span> InsufficientAuthenticationException){</span><br><span class="line">            result =  ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//用户名密码错误</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (authException <span class="keyword">instanceof</span> BadCredentialsException){</span><br><span class="line">            result =  ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_ERROR.getCode(),authException.getMessage());</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            result =  ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),<span class="string">"认证或授权失败"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response, json);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h3><p>主要处理controller层的异常</p><p>自定义异常处理器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.handle.exception;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.enums.AppHttpCodeEnum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/25 21:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//自定义异常处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个构造方法，接收的参数是枚举类型，AppHttpCodeEnum是我们在sangeng-framework工程定义的枚举类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(AppHttpCodeEnum httpCodeEnum)</span> {</span><br><span class="line">        <span class="built_in">super</span>(httpCodeEnum.getMsg());</span><br><span class="line">        <span class="comment">//把某个枚举类里面的code和msg赋值给异常对象</span></span><br><span class="line">        <span class="built_in">this</span>.code = httpCodeEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = httpCodeEnum.getMsg();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全局异常处理器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.handle.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理类（处理controller层）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/25$ 21:37$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> {</span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">exceptionHandler</span><span class="params">(SystemException e)</span> {</span><br><span class="line">        log.error(<span class="string">"出现了异常：{}"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(e.getCode(), e.getMsg());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">exceptionHandler</span><span class="params">(Exception e)</span> {</span><br><span class="line">        log.error(<span class="string">"出现了异常：{}"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(), e.getMessage());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-退出功能"><a href="#博客前台模块-退出功能" class="headerlink" title="博客前台模块-退出功能"></a>博客前台模块-退出功能</h2><h3 id="接口分析-6"><a href="#接口分析-6" class="headerlink" title="接口分析"></a>接口分析</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126110850159.png" alt="image-20231126110850159"></p><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>直接从SecurityContextHolder中获取登录用户，然后拿到用户ID，删除redis中相关用户ID</p><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//从SecurityContextHolder中获取loginUser对象 //获取token，然后解析token值获取其中的userid。</span></span><br><span class="line">        <span class="comment">// SecurityContextHolder是security官方提供的类</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户ID</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从redis中删除此用户ID的登录相关信息</span></span><br><span class="line">        redisCache.deleteObject(<span class="string">"bloglogin:"</span>+userId);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>注意在配置类中添加</p><p>让原本的Sringsecurity的退出登录方法失效</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 对于登录接口 允许匿名访问 意思是未登录可以访问这个请求，登录成功不能访问这个请求</span></span><br><span class="line">                .antMatchers(<span class="string">"/login"</span>).anonymous()</span><br><span class="line">                <span class="comment">//需要登录才能访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/logout"</span>).authenticated()</span><br><span class="line"></span><br><span class="line">http.logout().disable();</span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-评论列表"><a href="#博客前台模块-评论列表" class="headerlink" title="博客前台模块-评论列表*"></a>博客前台模块-评论列表*</h2><h3 id="接口分析-7"><a href="#接口分析-7" class="headerlink" title="接口分析"></a>接口分析</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126171216022.png" alt="image-20231126171216022"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126171245869.png" alt="image-20231126171245869"></p><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>先查询所有根评论，再对已有的根评论，再去查询子评论</p><p>根评论 根据条件分页查询根评论的记录 但是创作人的姓名和回复某个人的姓名没有封装，所以需要对评论Vo再进行封装，注意要判断如果（回复：姓名）的id是-1的话，这个评论是根评论，所以不需要封装（回复：姓名）姓名   反之需要</p><p>子评论 对根评论的集合再进行封装，根据传入的某个评论id，然后去查询得到所有根评论为这个id的集合，然后对其（名字 回复：名字）名字进行封装</p><p>得到所有评论集合</p><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.dao.CommentDao;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.constants.SystemCanstants;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.Comment;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.vo.CommentVo;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.vo.PageVo;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.CommentService;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.BeanCopyUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论表(Comment)表服务实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makejava</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-11-26 14:37:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service("commentService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CommentDao, Comment&gt; <span class="keyword">implements</span> <span class="title class_">CommentService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">// ----------------------------------------  评论列表   --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(Long articleId, Integer pageNum, Integer pageSize)</span> {</span><br><span class="line">        <span class="comment">//创建条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; commentLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//文章id</span></span><br><span class="line">        commentLambdaQueryWrapper.eq(articleId!=<span class="literal">null</span>&amp;&amp;articleId&gt;<span class="number">0</span>,Comment::getArticleId,articleId);</span><br><span class="line">        <span class="comment">//是根评论 -1</span></span><br><span class="line">        commentLambdaQueryWrapper.eq(Comment::getRootId, SystemCanstants.COMMENT_ROOT);</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        Page&lt;Comment&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        page = page(page,commentLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取分页的评论信息</span></span><br><span class="line">        List&lt;Comment&gt; comments = page.getRecords();</span><br><span class="line">                 comments = comments.stream()</span><br><span class="line">                .sorted(Comparator.comparing(Comment::getCreateTime).reversed())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//封装评论表VO</span></span><br><span class="line">        List&lt;CommentVo&gt; commentVos = toCommentVos(comments);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询根评论下的子评论</span></span><br><span class="line">        commentVos = commentVos.stream().map(commentVo -&gt;</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//查询哪一条评论所对应的子评论</span></span><br><span class="line">            List&lt;CommentVo&gt; children = getChildren(commentVo.getId());</span><br><span class="line">            commentVo.setChildren(children);</span><br><span class="line">            <span class="keyword">return</span> commentVo;</span><br><span class="line">        }).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">PageVo</span>(commentVos,page.getTotal()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">getChildren</span><span class="params">(Long id)</span> {</span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; commentLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询哪一id下所对应的子评论</span></span><br><span class="line">        commentLambdaQueryWrapper.eq(Comment::getRootId,id);</span><br><span class="line">        <span class="comment">//对子评论按照时间进行排序</span></span><br><span class="line">        commentLambdaQueryWrapper.orderByDesc(Comment::getCreateTime);</span><br><span class="line">        List&lt;Comment&gt; comments = list(commentLambdaQueryWrapper);</span><br><span class="line">        List&lt;CommentVo&gt; commentVos = toCommentVos(comments);</span><br><span class="line">        <span class="keyword">return</span> commentVos;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">toCommentVos</span><span class="params">(List&lt;Comment&gt; comments)</span> {</span><br><span class="line">        List&lt;CommentVo&gt; commentVos = BeanCopyUtils.copyBeanList(comments, CommentVo.class);</span><br><span class="line">        <span class="comment">//遍历(可以用for循环，也可以用stream流)。由于封装响应好的数据里面没有username字段，所以我们还不能返回给前端。这个遍历就是用来得到username字段</span></span><br><span class="line">        commentVos = commentVos.stream().map(commentVo -&gt; {</span><br><span class="line">            <span class="comment">//通过CreateBy查询用户的昵称 当前评论的创建人昵称</span></span><br><span class="line">            <span class="comment">//张三回复李四   张三</span></span><br><span class="line">            commentVo.setUsername(userService.getById(commentVo.getCreateBy()).getNickName());</span><br><span class="line">            <span class="comment">// 通过ToCommentUserId 不为-1才查询 就是有子评论   子评论的  =-1是根评论,不等于不是根评论</span></span><br><span class="line">            <span class="comment">//张三回复李四   李四</span></span><br><span class="line">            <span class="keyword">if</span> (commentVo.getToCommentUserId()!=-<span class="number">1</span>) {</span><br><span class="line">                <span class="type">String</span> <span class="variable">nickName</span> <span class="operator">=</span> userService.getById(commentVo.getToCommentUserId()).getNickName();</span><br><span class="line">                commentVo.setToCommentUserName(nickName);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> commentVo;</span><br><span class="line">        }).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> commentVos;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/26 14:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentVo</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文章id</span></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">    <span class="comment">//根评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long rootId;</span><br><span class="line">    <span class="comment">//评论内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//发根评论的userid          张三回复了李四  toCommentUserId代表李四的用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentUserId;</span><br><span class="line">    <span class="comment">//发根评论的userName        张三回复了李四  toCommentUserName代表李四的用户昵称</span></span><br><span class="line">    <span class="keyword">private</span> String toCommentUserName;</span><br><span class="line">    <span class="comment">//回复目标评论id            张三回复了李四的什么什么评论  toCommentId代表什么什么评论的ID</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentId;</span><br><span class="line">    <span class="comment">//当前评论的创建人id        最开始评论的创建人id</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//评论是谁发的              最开始评论的创建人昵称</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询子评论</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; children;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-发送评论"><a href="#博客前台模块-发送评论" class="headerlink" title="博客前台模块-发送评论*"></a>博客前台模块-发送评论*</h2><h4 id="发送文章评论"><a href="#发送文章评论" class="headerlink" title="发送文章评论"></a>发送文章评论</h4><h5 id="接口分析-8"><a href="#接口分析-8" class="headerlink" title="接口分析"></a>接口分析</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126172635520.png" alt="image-20231126172635520"></p><h5 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h5><p>可以直接调用mp的save方法将信息保存，但是有的信息不能添加，比如更新人，插入时间等。</p><p>利用mp的自动填充可以实现，然后再评论表中的属性上添加@TableField(fill = FieldFill.INSERT)注解，代表再添加时自动填充</p><p>获取更新人id，可以在securitycontextholder中来获取，后面还有好多需要这个，直接封装工具类</p><h5 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addComment</span><span class="params">(Comment comment)</span> {</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(comment.getContent())) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.CONTENT_NOT_NULL);</span><br><span class="line">    }</span><br><span class="line">    save(comment);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>utils</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/26 18:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//在'发送评论'功能那里会用到的工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityUtils</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户的userid</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoginUser <span class="title function_">getLoginUser</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> (LoginUser) getAuthentication().getPrincipal();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Authentication</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Authentication <span class="title function_">getAuthentication</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定userid为1的用户就是网站管理员</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isAdmin</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> getLoginUser().getUser().getId();</span><br><span class="line">        <span class="keyword">return</span> id != <span class="literal">null</span> &amp;&amp; <span class="number">1L</span> == id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getUserId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> getLoginUser().getUser().getId();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>mp自动填充</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.handle.mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/26 0026 20:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//这个类是用来配置mybatis的字段自动填充。用于'发送评论'功能，由于我们在评论表无法对下面这四个字段进行插入数据(原因是前端在发送评论时，没有在</span></span><br><span class="line"><span class="comment">//请求体提供下面四个参数，所以后端在往数据库插入数据时，下面四个字段是空值)，所有就需要这个类来帮助我们往下面这四个字段自动的插入值，</span></span><br><span class="line"><span class="comment">//只要我们更新了评论表的字段，那么无法插入值的字段就自动有值了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//只要对数据库执行了插入语句，那么就会执行到这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> {</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        try {</span></span><br><span class="line">            <span class="comment">//获取用户id</span></span><br><span class="line">            userId = SecurityUtils.getUserId();</span><br><span class="line"><span class="comment">/*        } catch (Exception e) {</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">            userId = -1L;//如果异常了，就说明该用户还没注册，我们就把该用户的userid字段赋值d为-1</span></span><br><span class="line"><span class="comment">        }*/</span></span><br><span class="line">        <span class="comment">//自动把下面四个字段新增了值。</span></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"createTime"</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"createBy"</span>,userId , metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"updateBy"</span>, userId, metaObject);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> {</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">" "</span>, SecurityUtils.getUserId(), metaObject);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评论表(Comment)表实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makejava</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-11-26 14:37:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings("serial")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName("sg_comment")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comment</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//评论类型（0代表文章评论，1代表友链评论）</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//文章id</span></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">    <span class="comment">//根评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long rootId;</span><br><span class="line">    <span class="comment">//评论内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//所回复的目标评论的userid</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentUserId;</span><br><span class="line">    <span class="comment">//回复目标评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于我们在MyMetaObjectHandler类配置了mybatisplus的字段自动填充</span></span><br><span class="line">    <span class="comment">//所以就能指定哪个字段在什么时候进行自动填充，例如该类其它字段新增了数据，那么createBy字段就会自动填充值</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于我们在MyMetaObjectHandler类配置了mybatisplus的字段自动填充</span></span><br><span class="line">    <span class="comment">//所以就能指定哪个字段在什么时候进行自动填充，例如该类其它字段新增了数据，那么createTime字段就会自动填充值</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于我们在MyMetaObjectHandler类配置了mybatisplus的字段自动填充</span></span><br><span class="line">    <span class="comment">//所以就能指定哪个字段在什么时候进行自动填充，例如该类其它字段新增或更新了数据，那么createBy字段就会自动填充值</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于我们在MyMetaObjectHandler类配置了mybatisplus的字段自动填充</span></span><br><span class="line">    <span class="comment">//所以就能指定哪个字段在什么时候进行自动填充，例如该类其它字段新增或更新了数据，那么updateTime字段就会自动填充值</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="发送友链评论"><a href="#发送友链评论" class="headerlink" title="发送友链评论"></a>发送友链评论</h4><h5 id="接口分析-9"><a href="#接口分析-9" class="headerlink" title="接口分析"></a>接口分析</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126191211641.png" alt="image-20231126191211641"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126191242604.png" alt="image-20231126191242604"></p><h5 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h5><p>根据接口可以查看到，和文章评论共用一个接口，在接口的参数上可以加一个文章或者友链的type，然后再实现类里面对文章id（因为再评论表里面有个type分成友链和文章评论）和type类型进行判断</p><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/linkCommentList")</span></span><br><span class="line">    <span class="comment">//在友链的评论区发送评论。ResponseResult是我们在huanf-framework工程写的类</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">linkCommentList</span><span class="params">(Integer pageNum,Integer pageSize)</span>{</span><br><span class="line">        <span class="comment">//commentService是我们刚刚实现文章的评论区发送评论功能时(当时用的是addComment方法，现在用commentList方法)，写的类</span></span><br><span class="line">        <span class="comment">//SystemCanstants是我们写的用来解决字面值的常量类，Article_LINK代表1</span></span><br><span class="line">        <span class="keyword">return</span> commentService.commentList(SystemCanstants.LINK_COMMENT,<span class="literal">null</span>,pageNum,pageSize);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//评论列表</span></span><br><span class="line">    ResponseResult <span class="title function_">commentList</span><span class="params">(String type,Long articleId, Integer pageNum, Integer pageSize)</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(String type, Long articleId, Integer pageNum, Integer pageSize)</span> {</span><br><span class="line">        <span class="comment">//创建条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; commentLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//文章id</span></span><br><span class="line">        commentLambdaQueryWrapper.eq(articleId!=<span class="literal">null</span>&amp;&amp;articleId&gt;<span class="number">0</span>,Comment::getArticleId,articleId);</span><br><span class="line">        <span class="comment">//是根评论 -1</span></span><br><span class="line">        commentLambdaQueryWrapper.eq(Comment::getRootId, SystemCanstants.COMMENT_ROOT);</span><br><span class="line">        <span class="comment">//判断是哪个评论</span></span><br><span class="line">        commentLambdaQueryWrapper.eq(Comment::getType,type);</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        Page&lt;Comment&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        page = page(page,commentLambdaQueryWrapper);</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-个人信息"><a href="#博客前台模块-个人信息" class="headerlink" title="博客前台模块-个人信息"></a>博客前台模块-个人信息</h2><h4 id="接口分析-10"><a href="#接口分析-10" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126194757170.png" alt="image-20231126194757170"></p><h4 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h4><p>此接口需要再登录之后才能访问，直接获取Security里面的用户id，根据id查询相关信息，并且封装Vo</p><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><p>在SecurityConfig中配置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为方便测试查询个人信息，我们把查询个人信息的接口设置为需要登录才能访问</span></span><br><span class="line">                .antMatchers(<span class="string">"/user/userInfo"</span>).authenticated()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------  个人信息   --------------------------------------------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取userID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId().toString();</span><br><span class="line">        <span class="comment">//得到user对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">        <span class="comment">//封装Vo返回</span></span><br><span class="line">        <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(user, UserInfoVo.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(userInfoVo);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-文件上传"><a href="#博客前台模块-文件上传" class="headerlink" title="博客前台模块-文件上传*"></a>博客前台模块-文件上传*</h2><p>先解决头像上传</p><p><strong>为什么使用OSS？</strong></p><p>因为如果把图片视频等文件上传到自己的应用的Web服务器的某个目录下，在读取图片的时候会占用比较多的资源。影响应用服务器的性能。所以我们一般使用OSS(Object Storage Service对象存储服务)存储图片或视频</p><p>OSS</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126201236871.png" alt="image-20231126201236871"></p><p>用户—上传图片–&gt;Web服务器  —读取—&gt; 用户</p><h4 id="接口分析-11"><a href="#接口分析-11" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231126211729011.png" alt="image-20231126211729011"></p><h4 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h4><p>先将图片上传到web服务器，然后传到oss，用户可直接浏览图片 注意上传需要multipart/form-data; 接口参数为 MultipartFile</p><p>需要判断文件类型的合法性和文件类型的大小是否合法，并且将文件名修改为日期+uuid+文件名后缀 密钥什么的保存在yml中，通过</p><p>代码@ConfigurationProperties(prefix = “myoss”)获取yml中信息，注意实体属性名需要和yml里面的一样 哦对，一定要加@Data注解，要不然属性值获取不了</p><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上传头像</span></span><br><span class="line"><span class="meta">@PostMapping("upload")</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">upload</span><span class="params">(MultipartFile img)</span>{</span><br><span class="line">    <span class="keyword">return</span> upLoadService.upLoadImg(img);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>serviceImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.service.impl;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/27 15:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Region;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.model.DefaultPutRet;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.constants.SystemCanstants;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.handle.exception.SystemException;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.UpLoadService;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.PathUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/27 15:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Data</span>  <span class="comment">//需要添加这个</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "myoss")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpLoadServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UpLoadService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String yuming;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上传头像</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">upLoadImg</span><span class="params">(MultipartFile img)</span> {</span><br><span class="line">        <span class="comment">//TODO 判断文件类型或者文件大小</span></span><br><span class="line">        <span class="comment">//判断文件类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> img.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件大小</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> img.getSize();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对原始文件名进行判断大小。只能上传png或jpg文件</span></span><br><span class="line">        <span class="keyword">if</span> (!originalFilename.endsWith(<span class="string">".png"</span>)&amp;&amp;!originalFilename.endsWith(<span class="string">".jpg"</span>))</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.FILE_TYPE_ERROR);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断文件大小是否超过2MB（2MB=2*1024*1024 bytes）</span></span><br><span class="line">        <span class="keyword">if</span> (fileSize &gt; <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>) {</span><br><span class="line">            <span class="comment">// 抛出文件大小超过限制的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.FILE_SIZE_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//以上都通过则上传文件到七牛云OSS，并得到一个图片外链访问地址。PathUtil是我们在sangeng-framework工程写的工具类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> PathUtils.generateFilePath(originalFilename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将文件存到OSS</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> uploadOss(img,filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(url);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传到七牛云</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadOss</span><span class="params">(MultipartFile img,String filePath)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类。你的七牛云OSS创建的是哪个区域的，那么就调用Region的什么方法即可</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Region.region1());</span><br><span class="line">        cfg.resumableUploadAPIVersion = Configuration.ResumableUploadAPIVersion.V2;<span class="comment">// 指定分片上传版本</span></span><br><span class="line">        <span class="type">UploadManager</span> <span class="variable">uploadManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadManager</span>(cfg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> filePath;   <span class="comment">//七牛云里面的文件名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line"></span><br><span class="line">            <span class="comment">//byte[] uploadBytes = "hello qiniu cloud".getBytes("utf-8");</span></span><br><span class="line">            <span class="comment">//ByteArrayInputStream byteInputStream=new ByteArrayInputStream(uploadBytes);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//上面两行是官方写的(注释掉)，下面那几行是我们写的</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">xxinputStream</span> <span class="operator">=</span> img.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="type">Auth</span> <span class="variable">auth</span> <span class="operator">=</span> Auth.create(accessKey, secretKey);</span><br><span class="line">            <span class="type">String</span> <span class="variable">upToken</span> <span class="operator">=</span> auth.uploadToken(bucket);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> uploadManager.put(xxinputStream, key, upToken, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//解析上传成功的结果</span></span><br><span class="line">                <span class="type">DefaultPutRet</span> <span class="variable">putRet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">                System.out.println(<span class="string">"上传成功! 生成的key是: "</span> + putRet.key);</span><br><span class="line">                System.out.println(<span class="string">"上传成功! 生成的hash是: "</span> + putRet.hash);</span><br><span class="line">                <span class="keyword">return</span> yuming+key;</span><br><span class="line">            } <span class="keyword">catch</span> (QiniuException ex) {</span><br><span class="line">                <span class="type">Response</span> <span class="variable">r</span> <span class="operator">=</span> ex.response;</span><br><span class="line">                System.err.println(r.toString());</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    System.err.println(r.bodyString());</span><br><span class="line">                } <span class="keyword">catch</span> (QiniuException ex2) {</span><br><span class="line">                    <span class="comment">//ignore</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">//ignore</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"www:"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>工具包（生成文件名）日期+uuid+后缀</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/29 0029 12:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//对原始文件名进行修改文件名，并修改存放目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathUtils</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateFilePath</span><span class="params">(String fileName)</span>{</span><br><span class="line">        <span class="comment">//根据日期生成路径   2022/1/15/</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">"yyyy/MM/dd/"</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">datePath</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//uuid作为文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">//后缀和文件后缀一致</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="comment">// test.jpg -&gt; .jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> fileName.substring(index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(datePath).append(uuid).append(fileType).toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="更新个人信息"><a href="#更新个人信息" class="headerlink" title="更新个人信息"></a>更新个人信息</h4><h5 id="接口分析-12"><a href="#接口分析-12" class="headerlink" title="接口分析"></a>接口分析</h5><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231127171117154.png" alt="image-20231127171117154"></p><h5 id="思路分析-7"><a href="#思路分析-7" class="headerlink" title="思路分析"></a>思路分析</h5><p>将数据封装到请求体内，后端接口从响应体中拿直接根据id进行更新</p><h5 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updateById(user);</span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-注册信息"><a href="#博客前台模块-注册信息" class="headerlink" title="博客前台模块-注册信息"></a>博客前台模块-注册信息</h2><h3 id="接口分析-13"><a href="#接口分析-13" class="headerlink" title="接口分析"></a>接口分析</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231127172135147.png" alt="image-20231127172135147"></p><h3 id="思路分析-8"><a href="#思路分析-8" class="headerlink" title="思路分析"></a>思路分析</h3><p>进行非空判断</p><p>进行是否重复判断</p><p>进行密码加密</p><p>存储数据库</p><h3 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------  注册个人信息   --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">register</span><span class="params">(User user)</span> {</span><br><span class="line">       <span class="comment">//进行非空判断</span></span><br><span class="line">       <span class="comment">//对前端传过来的用户名进行非空判断，例如null、""，就抛出异常</span></span><br><span class="line">       <span class="keyword">if</span>(!StringUtils.hasText(user.getUserName())){</span><br><span class="line">           <span class="comment">//SystemException是我们写的异常类、AppHttpCodeEnum是我们写的枚举类</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.USERNAME_NOT_NULL);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//密码</span></span><br><span class="line">       <span class="keyword">if</span>(!StringUtils.hasText(user.getPassword())){</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.PASSWORD_NOT_NULL);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//邮箱</span></span><br><span class="line">       <span class="keyword">if</span>(!StringUtils.hasText(user.getEmail())){</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.EMAIL_NOT_NULL);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//昵称</span></span><br><span class="line">       <span class="keyword">if</span>(!StringUtils.hasText(user.getNickName())){</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.NICKNAME_NOT_NULL);</span><br><span class="line">       }</span><br><span class="line">      <span class="comment">/* //手机号码</span></span><br><span class="line"><span class="comment">       if(!StringUtils.hasText(user.getPhonenumber())){</span></span><br><span class="line"><span class="comment">           throw new SystemException(AppHttpCodeEnum.PHONENUMBER_NOT_NULL);</span></span><br><span class="line"><span class="comment">       }*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//判断用户传给我们的用户名是否在数据库已经存在。userNameExist方法是下面定义的</span></span><br><span class="line">       <span class="keyword">if</span>(userNameExist(user.getUserName())){</span><br><span class="line">           <span class="comment">//SystemException是我们写的异常类、AppHttpCodeEnum是我们写的枚举类</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.USERNAME_EXIST);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//判断用户传给我们的昵称是否在数据库已经存在。NickNameExist方法是下面定义的</span></span><br><span class="line">       <span class="keyword">if</span>(NickNameExist(user.getNickName())){</span><br><span class="line">           <span class="comment">//SystemException是我们写的异常类、AppHttpCodeEnum是我们写的枚举类</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.NICKNAME_EXIST);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//判断用户传给我们的邮箱是否在数据库已经存在。NickNameExist方法是下面定义的</span></span><br><span class="line">       <span class="keyword">if</span>(EmailExist(user.getEmail())){</span><br><span class="line">           <span class="comment">//SystemException是我们写的异常类、AppHttpCodeEnum是我们写的枚举类</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.EMAIL_EXIST);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">/*//判断用户传给我们的手机号码是否在数据库已经存在。PhonenumberExist方法是下面定义的</span></span><br><span class="line"><span class="comment">       if(PhonenumberExist(user.getPhonenumber())){</span></span><br><span class="line"><span class="comment">           //SystemException是我们写的异常类、AppHttpCodeEnum是我们写的枚举类</span></span><br><span class="line"><span class="comment">           throw new SystemException(AppHttpCodeEnum.EMAIL_EXIST);</span></span><br><span class="line"><span class="comment">       } */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//经过上面的判断，可以确保用户传给我们的用户名和昵称是数据库不存在的，且相关字段都不为空。就可以存入数据库</span></span><br><span class="line">       <span class="comment">//注意用户传给我们的密码是明文，对于密码我们要转成密文之后再存入数据库。注意加密要和解密用同一套算法</span></span><br><span class="line">       <span class="comment">//在huanf-blog工程的securityConfig类里面有解密算法，当时我们写了一个passwordEncoder方法，并且注入到了spring容器</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">encodePassword</span> <span class="operator">=</span> passwordEncoder.encode(user.getPassword());<span class="comment">//加密</span></span><br><span class="line">       user.setPassword(encodePassword);</span><br><span class="line">       <span class="comment">//存入数据库。save方法是mybatisplus提供的方法</span></span><br><span class="line">       save(user);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装响应返回</span></span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//'判断用户传给我们的用户名是否在数据库已经存在' 的方法</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">userNameExist</span><span class="params">(String userName)</span> {</span><br><span class="line">       <span class="comment">//要知道是否存在，首先就是根据条件去数据库查</span></span><br><span class="line">       LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//拿用户写的用户名跟数据库里面的用户名进行比较</span></span><br><span class="line">       queryWrapper.eq(User::getUserName,userName);</span><br><span class="line">       <span class="comment">//如果大于0就说明从数据库查出来了，也就说明是已经存在数据库的</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> count(queryWrapper) &gt; <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//为true就说明已存在</span></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//'判断用户传给我们的昵称是否在数据库已经存在' 的方法</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">NickNameExist</span><span class="params">(String nickName)</span> {</span><br><span class="line">       <span class="comment">//要知道是否存在，首先就是根据条件去数据库查</span></span><br><span class="line">       LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//拿用户写的昵称跟数据库里面的昵称进行比较</span></span><br><span class="line">       queryWrapper.eq(User::getNickName,nickName);</span><br><span class="line">       <span class="comment">//如果大于0就说明从数据库查出来了，也就说明是已经存在数据库的</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> count(queryWrapper) &gt; <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//为true就说明已存在</span></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//'判断用户传给我们的邮箱是否在数据库已经存在' 的方法</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">EmailExist</span><span class="params">(String email)</span> {</span><br><span class="line">       <span class="comment">//要知道是否存在，首先就是根据条件去数据库查</span></span><br><span class="line">       LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//拿用户写的昵称跟数据库里面的昵称进行比较</span></span><br><span class="line">       queryWrapper.eq(User::getEmail,email);</span><br><span class="line">       <span class="comment">//如果大于0就说明从数据库查出来了，也就说明是已经存在数据库的</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> count(queryWrapper) &gt; <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//为true就说明已存在</span></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* //'判断用户传给我们的手机号码是否在数据库已经存在' 的方法</span></span><br><span class="line"><span class="comment">   private boolean PhonenumberExist(String Phonenumber) {</span></span><br><span class="line"><span class="comment">       //要知道是否存在，首先就是根据条件去数据库查</span></span><br><span class="line"><span class="comment">       LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="comment">       //拿用户写的手机号码跟数据库里面的手机号码进行比较</span></span><br><span class="line"><span class="comment">       queryWrapper.eq(User::getPhonenumber,Phonenumber);</span></span><br><span class="line"><span class="comment">       //如果大于0就说明从数据库查出来了，也就说明是已经存在数据库的</span></span><br><span class="line"><span class="comment">       boolean result = count(queryWrapper) &gt; 0;</span></span><br><span class="line"><span class="comment">       //为true就说明已存在</span></span><br><span class="line"><span class="comment">       return result;</span></span><br><span class="line"><span class="comment">   }*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="博客前台模块-日志记录"><a href="#博客前台模块-日志记录" class="headerlink" title="博客前台模块-日志记录*"></a>博客前台模块-日志记录*</h2><p>AOP实现日志记录</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231127210559511.png" alt="image-20231127210559511"></p><h3 id="思路分析-9"><a href="#思路分析-9" class="headerlink" title="思路分析"></a>思路分析</h3><p>相当于是对原有的功能进行增强。并且是批量的增强，这个时候就非常适合用AOP来进行实现。</p><h3 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h3><p>利用注解来实现</p><p>注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target({ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemLog {</span><br><span class="line">    String <span class="title function_">businessName</span><span class="params">()</span>;   <span class="comment">//业务的名字</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>切面类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/27 20:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut("@annotation(com.sangeng.annoation.SystemLog)")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//切入点</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知</span></span><br><span class="line">    <span class="meta">@Around("pt()")</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">inform</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object rel;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//执行目标方法前</span></span><br><span class="line">            handleBefore(joinPoint);</span><br><span class="line">            <span class="comment">//执行目标方法</span></span><br><span class="line">            rel = joinPoint.proceed();</span><br><span class="line">            <span class="comment">//执行目标方法后</span></span><br><span class="line">            handleAfter(rel);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">// 结束后换行</span></span><br><span class="line">            log.info(<span class="string">"=======End======="</span> + System.lineSeparator());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rel;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBefore</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> UnknownHostException {</span><br><span class="line">        <span class="comment">//获取请求url</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributeEvent</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributeEvent.getRequest();</span><br><span class="line">        <span class="comment">//获取描述信息</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法上注解的属性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">businessName</span> <span class="operator">=</span> signature.getMethod().getAnnotation(SystemLog.class).businessName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//signature 相当于一个完整的方法体</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"=======Start======="</span>);</span><br><span class="line">        <span class="comment">// 打印请求 URL</span></span><br><span class="line">        log.info(<span class="string">"URL : {}"</span>, request.getRequestURL());</span><br><span class="line">        <span class="comment">// 打印描述信息</span></span><br><span class="line">        log.info(<span class="string">"BusinessName : {}"</span>, businessName);</span><br><span class="line">        <span class="comment">// 打印 Http method put</span></span><br><span class="line">        log.info(<span class="string">"HTTP Method : {}"</span>,request.getMethod());</span><br><span class="line">        <span class="comment">// 打印调用 controller 的全路径以及执行方法</span></span><br><span class="line">        log.info(<span class="string">"Class Method : {}.{}"</span>, signature.getDeclaringTypeName(), signature.getMethod().getName());</span><br><span class="line">        <span class="comment">// 打印请求的 IP</span></span><br><span class="line">        log.info(<span class="string">"IP : {}"</span>, request.getRemoteHost());</span><br><span class="line">        <span class="comment">// 打印请求入参</span></span><br><span class="line">        log.info(<span class="string">"Request Args : {}"</span>, JSON.toJSONString(joinPoint.getArgs()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleAfter</span><span class="params">(Object object)</span> {</span><br><span class="line">        <span class="comment">// 打印出参</span></span><br><span class="line">        log.info(<span class="string">"Response : {}"</span>, JSON.toJSONString(object));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新个人信息</span></span><br><span class="line">    <span class="meta">@PutMapping("userInfo")</span></span><br><span class="line">    <span class="meta">@SystemLog(businessName = "更新用户信息")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">updateUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> {</span><br><span class="line">        <span class="keyword">return</span> userService.updateUserInfo(user);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>实现</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231127211017762.png" alt="image-20231127211017762"></p><h2 id="博客前台模块-更新浏览量"><a href="#博客前台模块-更新浏览量" class="headerlink" title="博客前台模块-更新浏览量*"></a>博客前台模块-更新浏览量*</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p> 在用户浏览博文时要实现对应博客浏览量的增加</p><h3 id="思路分析-10"><a href="#思路分析-10" class="headerlink" title="思路分析"></a>思路分析</h3><p>我们只需要在每次用户浏览博客时更新对应的浏览数即可。 但是如果直接操作博客表的浏览量的话，在并发量大的情况下会出现什么问题呢？ 如何去优化呢？ </p><p>（因为要更新浏览量的话，会加写锁，只能一个用户占用一条记录，其他不能修改，这就得考虑并发）</p><p>①在应用启动时把博客的浏览量存储到redis中 </p><p>②更新浏览量时去更新redis中的数据</p><p> ③每隔10分钟把Redis中的浏览量更新到数据库中 </p><p>④读取文章浏览量时从redis读取</p><h3 id="铺垫知识"><a href="#铺垫知识" class="headerlink" title="铺垫知识"></a>铺垫知识</h3><p>①CommandLineRunner实现项目启动时预处理 实现此接口，并加入容器</p><p> ③定时任务</p><p>定时任务的实现方式有很多，比如XXL-Job等。但是其实核心功能和概念都是类似的，很多情况下只是调 用的API不同而已。 这里就先用SpringBoot为我们提供的定时任务的API来实现一个简单的定时任务，让大家先对定时任务 里面的一些核心概念有个大致的了解。 实现步骤 ① 使用@EnableScheduling注解开启定时任务功能 我们可以在配置类上加上@EnableScheduling</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan("com.sangeng.mapper")</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SanGengBlogApplication</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">SpringApplication.run(SanGengBlogApplication.class,args);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>确定定时任务执行代码，并配置任务执行时间 使用@Scheduled注解标识需要定时执行的代码。注解的cron属性相当于是任务的执行时间。目前可以 使用 0/5 * * * * ? 进行测试，代表从0秒开始，每隔5秒执行一次。 注意：对应的bean要注入容器，否则不会生效。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> {</span><br><span class="line"><span class="meta">@Scheduled(cron = "0/5 * * * * ?")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJob</span><span class="params">()</span>{</span><br><span class="line"><span class="comment">//要执行的代码</span></span><br><span class="line">System.out.println(<span class="string">"定时任务执行了"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>corn定时任务表达式</p><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231128134903314.png" alt="image-20231128134903314"></p><h3 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h3><p>将数据库存到redis中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.runner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sangeng.dao.ArticleDao;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.constants.SystemCanstants;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.Article;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在启动项目后将文章id和浏览量存到redis中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewCountRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO ① 将数据库中文章的浏览量存到redis中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="comment">//首先获取所有文章的浏览量</span></span><br><span class="line">        List&lt;Article&gt; articles = articleDao.selectList(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; viewCounts = articles.stream().collect(Collectors.toMap(article -&gt; article.getId().toString(), article -&gt; article.getViewCount().intValue()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//然后调用rediscache方法将id和浏览量存到redis中</span></span><br><span class="line">        redisCache.setCacheMap(SystemCanstants.VIEW_COUNT_KEY,viewCounts);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>更新浏览量数据到redis中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------  更新浏览量到redis   --------------------------------------------------</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">updateViewCount</span><span class="params">(Long id)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id从redis中更新浏览量</span></span><br><span class="line">    redisCache.updateCacheMap(SystemCanstants.VIEW_COUNT_KEY,id.toString(),SystemCanstants.UPDATE_VIEW_COUNT);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>redisCache</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新Map的value值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hashKey, Integer value)</span>{</span><br><span class="line">    redisTemplate.opsForHash().increment(key,hashKey,value);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将redis中数据定时推送到数据库</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.constants.SystemCanstants;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.Article;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //TODO 后面改为MQ消息队列</span></span><br><span class="line"><span class="comment"> *  定时 每5min将Redis中的ViewCount更新到数据库中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/28 14:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateViewCount</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = "0 0/5 * * * ?  ")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateViewCount</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//首先在Redis中将所有数据拿出来</span></span><br><span class="line">        <span class="comment">//获取所有的key</span></span><br><span class="line">        Map&lt;String, Integer&gt; viewCountMap = redisCache.getCacheMap(SystemCanstants.VIEW_COUNT_KEY);</span><br><span class="line">        <span class="comment">//封装成单列集合</span></span><br><span class="line">        List&lt;Article&gt; articles = viewCountMap.entrySet().stream()</span><br><span class="line">                .map(vv -&gt; {</span><br><span class="line">                    <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Article</span>();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> vv.getKey();</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">viewCount</span> <span class="operator">=</span> vv.getValue();</span><br><span class="line">                    article.setId(Integer.valueOf(id).longValue());</span><br><span class="line">                    article.setViewCount(viewCount.longValue());</span><br><span class="line">                    <span class="keyword">return</span> article;</span><br><span class="line">                }).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//然后根据每个id将浏览量更新到数据库中</span></span><br><span class="line">        articleService.updateBatchById(articles);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在redis中查看浏览量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------  热门文章   --------------------------------------------------</span></span><br><span class="line"><span class="comment">//在调用这个方法的时候，先直接将redis中的数据更新到数据库中，不用管是否定时任务更新到这个数据，然后在查询数据库</span></span><br><span class="line"><span class="comment">// 避免了数据不一致问题</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有的key</span></span><br><span class="line">    Map&lt;String, Integer&gt; viewCountMap = redisCache.getCacheMap(SystemCanstants.VIEW_COUNT_KEY);</span><br><span class="line">    <span class="comment">//封装成单列集合</span></span><br><span class="line">    List&lt;Article&gt; articles = viewCountMap.entrySet().stream()</span><br><span class="line">        .map(vv -&gt; {</span><br><span class="line">            <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Article</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> vv.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">viewCount</span> <span class="operator">=</span> vv.getValue();</span><br><span class="line">            article.setId(Integer.valueOf(id).longValue());</span><br><span class="line">            article.setViewCount(viewCount.longValue());</span><br><span class="line">            <span class="keyword">return</span> article;</span><br><span class="line">        }).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//然后根据每个id将浏览量更新到数据库中</span></span><br><span class="line">    updateBatchById(articles);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建查询</span></span><br><span class="line">    LambdaQueryWrapper&lt;Article&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非草稿</span></span><br><span class="line">    lambdaQueryWrapper.eq(Article::getStatus, SystemCanstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览量排前10</span></span><br><span class="line">    lambdaQueryWrapper.orderByDesc(Article::getViewCount);</span><br><span class="line"></span><br><span class="line">    Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(SystemCanstants.ARTICLE_STATUS_CURRENT, SystemCanstants.ARTICLE_STATUS_SIZE);</span><br><span class="line">    page(page, lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到分页拿到的热门文章集合数据</span></span><br><span class="line">    List&lt;Article&gt; hotArticleList = page.getRecords();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装成前端需要的数据 HotArticleVo</span></span><br><span class="line">    <span class="comment">//通过调用BeanCopyUtils工具类进行BeanCopy</span></span><br><span class="line">    List&lt;HotArticleVo&gt; hotArticleVos = BeanCopyUtils.copyBeanList(hotArticleList, HotArticleVo.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(hotArticleVos);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------  文章列表   --------------------------------------------------</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(Long pageNum,Long pageSize,Long categoryId)</span> {</span><br><span class="line">    <span class="comment">//构建查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Article&gt; articleLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//已发布的文章</span></span><br><span class="line">    articleLambdaQueryWrapper.eq(Article::getStatus,SystemCanstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">    <span class="comment">//置顶的文章在上面</span></span><br><span class="line">    articleLambdaQueryWrapper.orderByDesc(Article::getIsTop);</span><br><span class="line">    <span class="comment">//按分类ID查询</span></span><br><span class="line">    articleLambdaQueryWrapper.eq(Objects.nonNull(categoryId)&amp;&amp;categoryId&gt;<span class="number">0</span>,Article::getCategoryId,categoryId);</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    Page&lt;Article&gt; articlePage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">    articlePage = page(articlePage,articleLambdaQueryWrapper);</span><br><span class="line">    List&lt;Article&gt; articles = articlePage.getRecords();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询categoryName</span></span><br><span class="line">    articles = articles.stream().map(article -&gt; {</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从redis中获取浏览量</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">viewCount</span> <span class="operator">=</span> redisCache.getCacheMapValue(SystemCanstants.VIEW_COUNT_KEY, article.getId().toString());</span><br><span class="line">        article.setViewCount(viewCount.longValue());</span><br><span class="line"></span><br><span class="line">        article.setCategoryName(categoryService.getById(article.getCategoryId()).getName());</span><br><span class="line">        <span class="keyword">return</span> article;</span><br><span class="line">    }).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//封装VO</span></span><br><span class="line">    List&lt;ArticleListVo&gt; articleListVos = BeanCopyUtils.copyBeanList(articlePage.getRecords(), ArticleListVo.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装PageVo对象</span></span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(articleListVos, articlePage.getTotal());</span><br><span class="line">    <span class="comment">//返回对象</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVO);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------  文章详情   --------------------------------------------------</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(Long id)</span> {</span><br><span class="line">    <span class="type">ArticleDetailVo</span> <span class="variable">articleDetailVo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(id) &amp;&amp; id &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">//根据id查询</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从redis中获取浏览量</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">viewCount</span> <span class="operator">=</span> redisCache.getCacheMapValue(SystemCanstants.VIEW_COUNT_KEY, id.toString());</span><br><span class="line">        article.setViewCount(viewCount.longValue());</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> article.getCategoryId();</span><br><span class="line">        <span class="comment">//查询分类名</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span> (category!=<span class="literal">null</span>) {</span><br><span class="line">            article.setCategoryName(category.getName());</span><br><span class="line">            <span class="comment">//封装VO</span></span><br><span class="line">            articleDetailVo = BeanCopyUtils.copyBean(article, ArticleDetailVo.class);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(articleDetailVo);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>引入POM依赖</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>在启动类添加@EnableSwagger2注解</p><p>Controller层</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = "用户信息",description = "用户信息相关接口")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = "更新个人信息",notes = "获取个人的相关信息")</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>接口参数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParam(name = "user",value = "更新的用户信息")</span></span><br></pre></td></tr></tbody></table></figure><p>实体类，最好封装前端传过来的参数 dto</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value = "增加评论DTO")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddCommentDto</span> {}</span><br></pre></td></tr></tbody></table></figure><p>实体类属性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//评论类型（0代表文章评论，1代表友链评论）</span></span><br><span class="line"><span class="meta">@ApiModelProperty("0代表文章评论，1代表友链评论")</span></span><br><span class="line"><span class="keyword">private</span> String type;</span><br></pre></td></tr></tbody></table></figure><p>文档信息</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231128203652811.png" alt="image-20231128203652811"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/28 20:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//标识为配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启swagger，即可通过swagger为sangeng-blog工程生成接口文档</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">customDocket</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//只监控com.sangeng.controller包的api</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.sangeng.controller"</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 对所有api进行监控</span></span><br><span class="line">                <span class="comment">//.apis(RequestHandlerSelectors.any())</span></span><br><span class="line">                <span class="comment">//不显示错误的接口地址，也就是错误路径不监控</span></span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">"/error.*"</span>)))</span><br><span class="line"></span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">"久违"</span>, <span class="string">"https://mykang2003.github.io"</span>, <span class="string">"501858029@qq.com"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">"博客前台文档"</span>)</span><br><span class="line">                .description(<span class="string">"博客前台文档"</span>)</span><br><span class="line">                .contact(contact)   <span class="comment">// 联系方式</span></span><br><span class="line">                .version(<span class="string">"1.1.1"</span>)  <span class="comment">// 版本</span></span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231128203712544.png" alt="image-20231128203712544"></p><h2 id="博客后台模块-测试"><a href="#博客后台模块-测试" class="headerlink" title="博客后台模块-测试"></a>博客后台模块-测试</h2><h2 id="博客后台模块-登录"><a href="#博客后台模块-登录" class="headerlink" title="博客后台模块-登录"></a>博客后台模块-登录</h2><h3 id="接口分析-14"><a href="#接口分析-14" class="headerlink" title="接口分析"></a>接口分析</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231129163739057.png" alt="image-20231129163739057"></p><h3 id="解决思路-5"><a href="#解决思路-5" class="headerlink" title="解决思路"></a>解决思路</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231129162352039.png" alt="image-20231129162352039"></p><h3 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h3><p>jwt认证</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT认证过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>            <span class="comment">//未携带token</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">"token"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) {</span><br><span class="line">            <span class="comment">//放行,后面会有过滤器过滤是否有用户信息</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="comment">//return；回来后不想让它执行后面逻辑</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//解析token</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            claims = JwtUtil.parseJWT(token);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">            WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">        }</span><br><span class="line">        userId = claims.getSubject();</span><br><span class="line">        <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> <span class="string">"adminbloglogin:"</span> + userId;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> redisCache.getCacheObject(redisKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(loginUser)) {</span><br><span class="line">            <span class="comment">//jwt已经过期，redis中获取信息为null</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">            WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">//TODO 获取权限信息封装Authentication</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">usernamePasswordAuthenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>登录接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.common.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.enums.AppHttpCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.vo.BlogUserLoginVo;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.vo.UserInfoVo;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.AdminBlogLoginService;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.BeanCopyUtils;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客后台登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminBlogLoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AdminBlogLoginService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------  登录   --------------------------------------------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> {</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">usernamePasswordAuthenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class="line">        <span class="comment">//登录管理器,去帮我们校验密码和拿到权限</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(usernamePasswordAuthenticationToken);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(authenticate)){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//获得UserID，形成token</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得用户相关信息，存到Redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">"adminbloglogin:"</span>+userId,loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装Map集合给前端响应</span></span><br><span class="line">        Map&lt;String,String&gt; tokenMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        tokenMap.put(<span class="string">"token"</span>,token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(tokenMap);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------  退出登录  --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//从SecurityContextHolder中获取loginUser对象 //获取token，然后解析token值获取其中的userid。</span></span><br><span class="line">        <span class="comment">// SecurityContextHolder是security官方提供的类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接调用SecurityUtils方法   获取用户ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从redis中删除此用户ID的登录相关信息</span></span><br><span class="line">        redisCache.deleteObject(<span class="string">"adminbloglogin:"</span>+userId);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS.getCode(),<span class="string">"注销成功"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>userDetails和前面一样</p><h2 id="博客后台模块-后台权限控制"><a href="#博客后台模块-后台权限控制" class="headerlink" title="*博客后台模块-后台权限控制"></a>*博客后台模块-后台权限控制</h2><h3 id="接口分析-15"><a href="#接口分析-15" class="headerlink" title="接口分析"></a>接口分析</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231129171606246.png" alt="image-20231129171606246"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231129190408032.png" alt="image-20231129190408032"></p><h3 id="思路分析-11"><a href="#思路分析-11" class="headerlink" title="思路分析"></a>思路分析</h3><p>查询登录的用户的权限，角色，和用户的信息</p><p>获取登录的id，如果是管理员1，就直接查询管理员为1的权限，并且需要有菜单为C或者按钮为F的条件和权限正常的权限列表。如果是普通用户，就连表查询所对应的用户的权限，并且也要有C和F的条件和权限正常的</p><p>查询角色，如果是管理员直接返回admin，如果是普通用户，就去连表查询用户的角色的名称</p><h3 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h3><p>查询权限信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.dao.MenuDao;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.constants.SystemCanstants;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.Menu;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.MenuService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/8/4 0004 13:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;MenuDao, Menu&gt; <span class="keyword">implements</span> <span class="title class_">MenuService</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//查询用户的权限信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span> {</span><br><span class="line">        <span class="comment">//根据用户id查询用户的权限信息。用户id为id代表管理员，如果是管理员就返回所有的权限</span></span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">1L</span>){</span><br><span class="line">            LambdaQueryWrapper&lt;Menu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//查询条件是permissions中需要有所有菜单类型为C或者F的权限。SystemCanstants是我们在huanf-framework工程写的类</span></span><br><span class="line">            wrapper.in(Menu::getMenuType, SystemCanstants.TYPE_MENU,SystemCanstants.TYPE_BUTTON);</span><br><span class="line">            <span class="comment">//查询条件是permissions中需要有状态为正常的权限。SystemCanstants是我们在huanf-framework工程写的类</span></span><br><span class="line">            wrapper.eq(Menu::getStatus,SystemCanstants.MENU_STATUS_NORMAL);</span><br><span class="line">            <span class="comment">//查询条件是permissions中需要未被删除的权限的权限</span></span><br><span class="line">            List&lt;Menu&gt; menus = list(wrapper);</span><br><span class="line">            List&lt;String&gt; perms = menus.stream()</span><br><span class="line">                    .map(Menu::getPerms)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">            <span class="keyword">return</span> perms;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不是管理员就返回对应用户所具有的权限</span></span><br><span class="line">        List&lt;String&gt; otherPerms = getBaseMapper().selectPermsByOtherUserId(id);</span><br><span class="line">        <span class="keyword">return</span> otherPerms;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.sangeng.dao.MenuDao"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectPermsByOtherUserId"</span> resultType=<span class="string">"java.lang.String"</span>&gt;</span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.perms</span><br><span class="line">        FROM</span><br><span class="line">            `sys_user_role` ur</span><br><span class="line">                LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">                LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #{userId} AND</span><br><span class="line">            m.`menu_type` IN (<span class="string">'C'</span>,<span class="string">'F'</span>) AND</span><br><span class="line">            m.`status` = <span class="number">0</span> AND</span><br><span class="line">            m.`del_flag` = <span class="number">0</span></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></tbody></table></figure><p>查询角色信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sangeng.dao.RoleDao;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.Role;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.service.RoleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/8/4 0004 13:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RoleDao, Role&gt; <span class="keyword">implements</span> <span class="title class_">RoleService</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//查询用户的角色信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">selectRoleKeyByUserId</span><span class="params">(Long id)</span> {</span><br><span class="line">        <span class="comment">//判断是否是管理员，如果是，就返回集合中只需要有admin</span></span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">1L</span>){</span><br><span class="line">            List&lt;String&gt; roleKeys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            roleKeys.add(<span class="string">"admin"</span>);</span><br><span class="line">            <span class="keyword">return</span> roleKeys;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//否则查询对应普通用户所具有的的角色信息</span></span><br><span class="line">        List&lt;String&gt; otherRole = getBaseMapper().selectRoleKeyByOtherUserId(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> otherRole;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.sangeng.dao.RoleDao"</span>&gt;</span><br><span class="line">    &lt;!--MenuMapper接口的映射文件--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectRoleKeyByOtherUserId"</span> resultType=<span class="string">"java.lang.String"</span>&gt;</span><br><span class="line">        SELECT</span><br><span class="line">            r.`role_key`</span><br><span class="line">        FROM</span><br><span class="line">            `sys_user_role` ur</span><br><span class="line">                LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #{userId} AND</span><br><span class="line">            r.`status` = <span class="number">0</span> AND</span><br><span class="line">            r.`del_flag` = <span class="number">0</span></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------------------查询(超级管理员|非超级管理员)的权限和角色信息------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping("/getInfo")</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult&lt;AdminUserInfoVo&gt; <span class="title function_">getInfo</span><span class="params">()</span>{</span><br><span class="line">       <span class="comment">//获取当前登录的用户。SecurityUtils是我们在huanf-framework写的类</span></span><br><span class="line">       <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> SecurityUtils.getLoginUser();</span><br><span class="line">       <span class="comment">//根据用户id查询权限信息</span></span><br><span class="line">       List&lt;String&gt; perms = menuService.selectPermsByUserId(loginUser.getUser().getId());</span><br><span class="line">       <span class="comment">//根据用户id查询角色信息</span></span><br><span class="line">       List&lt;String&gt; roleKeyList = roleService.selectRoleKeyByUserId(loginUser.getUser().getId());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取用户信息</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> loginUser.getUser();</span><br><span class="line">       <span class="comment">//BeanCopyUtils是我们在huanf-framework写的类</span></span><br><span class="line">       <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(user, UserInfoVo.class);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装响应返回</span></span><br><span class="line">       <span class="type">AdminUserInfoVo</span> <span class="variable">adminUserInfoVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminUserInfoVo</span>(perms,roleKeyList,userInfoVo);</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult(adminUserInfoVo);</span><br><span class="line">   }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="*动态路由"></a>*动态路由</h2><p>实现了这个动态路由功能之后，就能在浏览器web页面登录进博客管理后台了，小期待不是</p><h3 id="接口分析-16"><a href="#接口分析-16" class="headerlink" title="接口分析"></a>接口分析</h3><p>接口设计。后台系统需要能实现不同的用户权限可以看到不同的功能，即左侧的导航栏</p><table><thead><tr><th>请求方式</th><th>请求地址</th><th>请求头</th></tr></thead><tbody><tr><td>GET</td><td>/getRouters</td><td>需要token请求头</td></tr></tbody></table><p>响应格式如下: 前端为了实现动态路由的效果，需要后端有接口能返回用户所能访问的菜单数据。注意: 返回的菜单数据需要体现父子菜单的层级关系</p><p>如果用户id为1代表管理员，menus中需要有所有菜单类型为C或者M的，C表示菜单，M表示目录，状态为正常的，未被删除的权限</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"code"</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"menus"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"component"</span><span class="punctuation">:</span><span class="string">"content/article/write/index"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2022-01-08 11:39:58"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"icon"</span><span class="punctuation">:</span><span class="string">"build"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="number">2023</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuName"</span><span class="punctuation">:</span><span class="string">"写博文"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuType"</span><span class="punctuation">:</span><span class="string">"C"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"orderNum"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"path"</span><span class="punctuation">:</span><span class="string">"write"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"perms"</span><span class="punctuation">:</span><span class="string">"content:article:writer"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"visible"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"component"</span><span class="punctuation">:</span><span class="string">"system/user/index"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2021-11-12 18:46:19"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"icon"</span><span class="punctuation">:</span><span class="string">"user"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="number">100</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuName"</span><span class="punctuation">:</span><span class="string">"用户管理"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuType"</span><span class="punctuation">:</span><span class="string">"C"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"orderNum"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"path"</span><span class="punctuation">:</span><span class="string">"user"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"perms"</span><span class="punctuation">:</span><span class="string">"system:user:list"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"visible"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"component"</span><span class="punctuation">:</span><span class="string">"system/role/index"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2021-11-12 18:46:19"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"icon"</span><span class="punctuation">:</span><span class="string">"peoples"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="number">101</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuName"</span><span class="punctuation">:</span><span class="string">"角色管理"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuType"</span><span class="punctuation">:</span><span class="string">"C"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"orderNum"</span><span class="punctuation">:</span><span class="string">"2"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"path"</span><span class="punctuation">:</span><span class="string">"role"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"perms"</span><span class="punctuation">:</span><span class="string">"system:role:list"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"visible"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"component"</span><span class="punctuation">:</span><span class="string">"system/menu/index"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2021-11-12 18:46:19"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"icon"</span><span class="punctuation">:</span><span class="string">"tree-table"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="number">102</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuName"</span><span class="punctuation">:</span><span class="string">"菜单管理"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuType"</span><span class="punctuation">:</span><span class="string">"C"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"orderNum"</span><span class="punctuation">:</span><span class="string">"3"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"path"</span><span class="punctuation">:</span><span class="string">"menu"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"perms"</span><span class="punctuation">:</span><span class="string">"system:menu:list"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"visible"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2021-11-12 18:46:19"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"icon"</span><span class="punctuation">:</span><span class="string">"system"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuName"</span><span class="punctuation">:</span><span class="string">"系统管理"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"menuType"</span><span class="punctuation">:</span><span class="string">"M"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"orderNum"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"path"</span><span class="punctuation">:</span><span class="string">"system"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"perms"</span><span class="punctuation">:</span><span class="string">""</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"visible"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"msg"</span><span class="punctuation">:</span><span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>先判断是不是管理员，先找出管理员的所有菜单，或者是普通用户的所具有的所有菜单</p><p>然后对这些菜单进行建树，先筛选出父菜单为0的，它就是第一层菜单，然后找到他的菜单id（设为第一层菜单id）。在遍历一遍集合，找出父菜单为第一层菜单id的所有菜单，将这个集合赋值给第一层菜单的children</p><h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//查询用户路由信息，也就是权限信息,包括父子目录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long id)</span> {</span><br><span class="line">        <span class="type">MenuDao</span> <span class="variable">menuDao</span> <span class="operator">=</span> getBaseMapper();</span><br><span class="line">        List&lt;Menu&gt; menus = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否是超级管理员，用户id为1表示超级管理员，如果是就返回所有要求的权限菜单,不是的话就找到对应的角色所能显示的菜单</span></span><br><span class="line">        <span class="comment">//然后在将这个树进行父子排列</span></span><br><span class="line">        <span class="keyword">if</span> (SecurityUtils.isAdmin()){</span><br><span class="line">            menus = menuDao.selectAllRouterMenu();</span><br><span class="line">        } <span class="keyword">else</span>{</span><br><span class="line">            menus = menuDao.selectOtherRouterMenuTreeByUserId(id);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建成树，也就是子父菜单树，有层级关系</span></span><br><span class="line">        <span class="comment">//先找出第一层的菜单，然后找第二层的菜单，将第二层菜单结果赋值给Menu类的child</span></span><br><span class="line">        List&lt;Menu&gt; menuTree = buildMenuTree(menus,<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> menuTree;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先找出第一层的菜单，然后找出他的子菜单（其他菜单是其id的菜单）设置到children属性中</span></span><br><span class="line">    <span class="comment">//找出父menu，查询他的子menu</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">buildMenuTree</span><span class="params">(List&lt;Menu&gt; menus, <span class="type">long</span> parentId)</span> {</span><br><span class="line">        <span class="comment">//过滤找出父菜单，也就是第一层 父菜单等于0的话就是父目录</span></span><br><span class="line">        List&lt;Menu&gt; menuTree = menus.stream().filter(menu -&gt; menu.getParentId().equals(parentId))</span><br><span class="line">                <span class="comment">//获取父id是0的菜单集合，将设置到children属性中  可以找出菜单id为1,parentId为0的菜单</span></span><br><span class="line">                .map(menu -&gt; menu.setChildren(getChildren(menu, menus))) <span class="comment">//获取Menu集合 再将菜单100 101 102菜单设置到菜单为1的children中</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> menuTree;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">getChildren</span><span class="params">(Menu menu, List&lt;Menu&gt; menus)</span> {  <span class="comment">//menu菜单id为1</span></span><br><span class="line">        List&lt;Menu&gt; childrenList = menus.stream()   <span class="comment">//通过上面传过来的是父目录了，然后查所有的父目录是他的id</span></span><br><span class="line">                .filter(menu1 -&gt; menu1.getParentId().equals(menu.getId()))  <span class="comment">//在这找出父类菜单id为1的菜单</span></span><br><span class="line">                .map(menu1 -&gt; menu1.setChildren(getChildren(menu1, menus)))<span class="comment">//如果有三层菜单的话，也就是子菜单的子菜单，我们就用下面那行递归(自己调用自己)来处理</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> childrenList;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单权限表(Menu)表实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makejava</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-08-04 13:20:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings("serial")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName("sys_menu")</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span> <span class="comment">//允许链式编程  ，set get会有返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span>  {</span><br><span class="line">    <span class="comment">//菜单ID</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单名称</span></span><br><span class="line">    <span class="keyword">private</span> String menuName;</span><br><span class="line">    <span class="comment">//父菜单ID</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    <span class="comment">//显示顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer orderNum;</span><br><span class="line">    <span class="comment">//路由地址</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="comment">//组件路径</span></span><br><span class="line">    <span class="keyword">private</span> String component;</span><br><span class="line">    <span class="comment">//是否为外链（0是 1否）</span></span><br><span class="line">    <span class="keyword">private</span> Integer isFrame;</span><br><span class="line">    <span class="comment">//菜单类型（M目录 C菜单 F按钮）</span></span><br><span class="line">    <span class="keyword">private</span> String menuType;</span><br><span class="line">    <span class="comment">//菜单状态（0显示 1隐藏）</span></span><br><span class="line">    <span class="keyword">private</span> String visible;</span><br><span class="line">    <span class="comment">//菜单状态（0正常 1停用）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//权限标识</span></span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">    <span class="comment">//菜单图标</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    <span class="comment">//创建者</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//更新者</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String delFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于数据库没有children字段，所以我们要添加@TableField(exist = false)注解让mybatis在查表时不查询这个字段</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; children;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>后端把long类型转换为String类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将long类型转化为字符串类型，避免因前端js的长度而导致long类型精度丢失</span></span><br><span class="line">       SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>分页total数是long，但是前端要显示数字，所以在前端拦截器地方，在配置一下，字符串转为Long类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把字符串total 转换成 数字 total</span></span><br><span class="line">    <span class="keyword">if</span> (res.data.data &amp;&amp; res.data.data.total) {</span><br><span class="line">      res.data.data.total = parseInt(res.data.data.total)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res.data.data</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130131652659.png" alt="image-20231130131652659"></p><h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// ----------------------------------------  退出登录  --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//从SecurityContextHolder中获取loginUser对象 //获取token，然后解析token值获取其中的userid。</span></span><br><span class="line">        <span class="comment">// SecurityContextHolder是security官方提供的类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接调用SecurityUtils方法   获取用户ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从redis中删除此用户ID的登录相关信息</span></span><br><span class="line">        redisCache.deleteObject(<span class="string">"adminbloglogin:"</span>+userId);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS.getCode(),<span class="string">"注销成功"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="标签列表"><a href="#标签列表" class="headerlink" title="标签列表"></a>标签列表</h2><h3 id="查询标签"><a href="#查询标签" class="headerlink" title="查询标签"></a>查询标签</h3><h4 id="需求-接口设计"><a href="#需求-接口设计" class="headerlink" title="需求&amp;接口设计"></a>需求&amp;接口设计</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130132146167.png" alt="image-20231130132146167"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130132443314.png"></p><h4 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h4><p>根据标签名进行分页查询所有标签，然后封装VO返回</p><h4 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询标签列表</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult&lt;PageVo&gt; <span class="title function_">pageTagList</span><span class="params">(Integer pageNum, Integer pageSize, TagListDto tagListDto)</span> {</span><br><span class="line">       LambdaQueryWrapper&lt;Tag&gt; tagLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//查看是否有评论 模糊查询</span></span><br><span class="line">       tagLambdaQueryWrapper.like(StringUtils.hasText(tagListDto.getRemark()),Tag::getRemark,tagListDto.getRemark());</span><br><span class="line">       <span class="comment">//查看是否有name模糊查询</span></span><br><span class="line">       tagLambdaQueryWrapper.like(StringUtils.hasText(tagListDto.getName()),Tag::getName,tagListDto.getName());</span><br><span class="line">       <span class="comment">//分页</span></span><br><span class="line">       Page&lt;Tag&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">       page(page,tagLambdaQueryWrapper);</span><br><span class="line">       <span class="comment">//封装vo返回</span></span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">PageVo</span>(page.getRecords(),page.getTotal()));</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="新增标签"><a href="#新增标签" class="headerlink" title="新增标签"></a>新增标签</h3><h4 id="接口分析-17"><a href="#接口分析-17" class="headerlink" title="接口分析"></a>接口分析</h4><p>注意自动填充字段，是否创建MyMetaObjectHandler</p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130140707746.png" alt="image-20231130140707746"></p><h4 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.handle.mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.utils.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/26 0026 20:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//这个类是用来配置mybatis的字段自动填充。用于'发送评论'功能，由于我们在评论表无法对下面这四个字段进行插入数据(原因是前端在发送评论时，没有在</span></span><br><span class="line"><span class="comment">//请求体提供下面四个参数，所以后端在往数据库插入数据时，下面四个字段是空值)，所有就需要这个类来帮助我们往下面这四个字段自动的插入值，</span></span><br><span class="line"><span class="comment">//只要我们更新了评论表的字段，那么无法插入值的字段就自动有值了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//只要对数据库执行了插入语句，那么就会执行到这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> {</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//获取用户id</span></span><br><span class="line">            userId = SecurityUtils.getUserId();</span><br><span class="line">       } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            userId = -<span class="number">1L</span>;<span class="comment">//如果异常了，就说明该用户还没注册，我们就把该用户的userid字段赋值d为-1</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//自动把下面四个字段新增了值。</span></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"createTime"</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"createBy"</span>,userId , metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"updateBy"</span>, userId, metaObject);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> {</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">" "</span>, SecurityUtils.getUserId(), metaObject);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增标签</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">addTag</span><span class="params">(AddTagDto addTagDto)</span>{</span><br><span class="line">        <span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> BeanCopyUtils.copyBean(addTagDto, Tag.class);</span><br><span class="line">        save(tag);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(value = "新增标签", notes = "新增标签")</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addTag</span><span class="params">(<span class="meta">@RequestBody</span> AddTagDto addTagDto)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> tagService.addTag(addTagDto);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><h4 id="接口分析-18"><a href="#接口分析-18" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130140613822.png" alt="image-20231130140613822"></p><h4 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "删除标签", notes = "删除标签")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> List&lt;Long&gt; id)</span>{</span><br><span class="line">        tagService.removeByIds(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 逻辑删除的字段  会自动帮我们判断是否删除</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">delFlag</span></span><br><span class="line">      <span class="comment"># 代表已删除的值</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 代表未删除的值</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 主键自增策略，以mysql数据库为准</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></tbody></table></figure><h3 id="修改标签"><a href="#修改标签" class="headerlink" title="修改标签"></a>修改标签</h3><h4 id="接口分析-19"><a href="#接口分析-19" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130143113622.png" alt="image-20231130143113622"></p><h4 id="思路分析-12"><a href="#思路分析-12" class="headerlink" title="思路分析"></a>思路分析</h4><p>注意要先根据id查询所对应的标签，进行回显，然后再根据id保存相应的数据</p><h4 id="代码实现-20"><a href="#代码实现-20" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/{id}")</span></span><br><span class="line">   <span class="comment">//①根据标签的id来查询标签</span></span><br><span class="line">   <span class="meta">@ApiOperation(value = "根据id查询标签", notes = "回显标签信息，去更新标签信息")</span></span><br><span class="line">   <span class="meta">@ApiImplicitParam(name = "id",value = "标签id")</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = "id")</span>Long id)</span>{</span><br><span class="line">       <span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> tagService.getById(id);</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult(tag);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@PutMapping</span></span><br><span class="line">   <span class="comment">//②根据标签的id来修改标签</span></span><br><span class="line">   <span class="meta">@ApiOperation(value = "根据id修改标签", notes = "修改标签信息")</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> EditTagDto tagDto)</span>{</span><br><span class="line">       <span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> BeanCopyUtils.copyBean(tagDto,Tag.class);</span><br><span class="line">       tagService.updateById(tag);</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="*发布文章"></a>*发布文章</h2><h3 id="查询分类"><a href="#查询分类" class="headerlink" title="查询分类"></a>查询分类</h3><h4 id="接口分析-20"><a href="#接口分析-20" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130160302938.png" alt="image-20231130160302938"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130160715358.png" alt="image-20231130160715358"></p><h4 id="代码实现-21"><a href="#代码实现-21" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写博文查询所有状态正常的分类</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;CategoryVo&gt; <span class="title function_">listAllCategory</span><span class="params">()</span> {</span><br><span class="line">       <span class="comment">//查询状态正常的分类就行</span></span><br><span class="line">       LambdaQueryWrapper&lt;Category&gt; categoryLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       categoryLambdaQueryWrapper.eq(Category::getStatus,SystemCanstants.CATEGORY_NORMAL);</span><br><span class="line">       List&lt;Category&gt; categoryList = list(categoryLambdaQueryWrapper);</span><br><span class="line">       <span class="keyword">return</span> BeanCopyUtils.copyBeanList(categoryList,CategoryVo.class);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="查询标签-1"><a href="#查询标签-1" class="headerlink" title="查询标签"></a>查询标签</h3><h4 id="接口分析-21"><a href="#接口分析-21" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130164233435.png" alt="image-20231130164233435"></p><h4 id="代码实现-22"><a href="#代码实现-22" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写博文-查询文章标签的接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;TagVo&gt; <span class="title function_">listAllTag</span><span class="params">()</span> {</span><br><span class="line">        LambdaQueryWrapper&lt;Tag&gt; tagLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        tagLambdaQueryWrapper.select(Tag::getId,Tag::getName); <span class="comment">//select 查询出 id和name</span></span><br><span class="line">        List&lt;Tag&gt; tagList = list(tagLambdaQueryWrapper);</span><br><span class="line">        List&lt;TagVo&gt; tagVos = BeanCopyUtils.copyBeanList(tagList, TagVo.class);</span><br><span class="line">        <span class="keyword">return</span> tagVos;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><h4 id="接口分析-22"><a href="#接口分析-22" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130165912395.png" alt="image-20231130165912395"></p><h4 id="代码实现-23"><a href="#代码实现-23" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/26 21:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = "写文章-缩略图文件上传",description = "写文章-缩略图文件上传相关接口")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UpLoadService upLoadService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传缩略图</span></span><br><span class="line">    <span class="meta">@PostMapping("upload")</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "上传图片",notes = "上传缩略图")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = "multipartFile",value = "头像图片")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam("img")</span> MultipartFile multipartFile)</span>{</span><br><span class="line">        <span class="keyword">return</span> upLoadService.upLoadImg(multipartFile);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myoss:</span><br><span class="line">  accessKey: x-qfDcVVmiT2m-efSspP5gIUJmvbMgTFBeDxnsTx</span><br><span class="line">  secretKey: NO5vz18JlVozZRWn11fkgwn3unD0KrmRBP6frwto</span><br><span class="line">  bucket: jiuwei-blog</span><br><span class="line">  yuming: http:<span class="comment">//s4qekb2gh.hb-bkt.clouddn.com/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><h4 id="接口分析-23"><a href="#接口分析-23" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130171335226.png" alt="image-20231130171335226"></p><h4 id="代码实现-24"><a href="#代码实现-24" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------  写文章-新建文章   --------------------------------------------------</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(AddArticleDto article)</span> {</span><br><span class="line">       <span class="comment">//将文章保存到数据库</span></span><br><span class="line">       <span class="type">ArticleVo</span> <span class="variable">articleVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(article, ArticleVo.class);</span><br><span class="line">       articleVoService.save(articleVo);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//然后将文章id和标签id放到关联表中   mybatis-plus会自动将新生成的数据的id自动封装到新生成的数据上，所以直接可以用新生成的article去getId</span></span><br><span class="line">       List&lt;ArticleTag&gt; articleTags = article.getTags().stream()  <span class="comment">//获取tag的id集合</span></span><br><span class="line">               .map(tagId -&gt; <span class="keyword">new</span> <span class="title class_">ArticleTag</span>(tagId, articleVo.getId())) <span class="comment">//stream流操作，将tagid和 article的id封装成ArticleTag</span></span><br><span class="line">               .collect(Collectors.toList());    <span class="comment">//将ArticleTag转换成集合</span></span><br><span class="line">       articleTagService.saveBatch(articleTags);</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/18 0018 21:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName("sg_article")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleVo</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个字段，为categoryName，由categoryId来查询出</span></span><br><span class="line">    <span class="comment">//由于数据库没有category_name字段，所以要用注解指定一下字段</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span><span class="comment">//代表这个字段在数据库中不存在，避免MyBatisPlus在查询时报错</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line">    <span class="comment">//是否置顶（0否，1是）</span></span><br><span class="line">    <span class="keyword">private</span> String isTop;</span><br><span class="line">    <span class="comment">//状态（0已发布，1草稿）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">//是否允许评论 1是，0否</span></span><br><span class="line">    <span class="keyword">private</span> String isComment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增博客文章-使用mybatisplus的字段自增</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArticleVo</span><span class="params">(Long id, <span class="type">long</span> viewCount)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.viewCount = viewCount;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/11/30 17:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(value = "新增博客文章")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddArticleDto</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line">    <span class="comment">//是否置顶（0否，1是）</span></span><br><span class="line">    <span class="keyword">private</span> String isTop;</span><br><span class="line">    <span class="comment">//状态（0已发布，1草稿）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">//是否允许评论 1是，0否</span></span><br><span class="line">    <span class="keyword">private</span> String isComment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//tags属性是一个List集合，用于接收文章关联标签的id</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; tags;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="分类列表"><a href="#分类列表" class="headerlink" title="分类列表"></a>分类列表</h2><h3 id="查询分类-1"><a href="#查询分类-1" class="headerlink" title="查询分类"></a>查询分类</h3><h4 id="接口分析-24"><a href="#接口分析-24" class="headerlink" title="接口分析"></a>接口分析<img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130200554539.png" alt="image-20231130200554539"></h4><h4 id="代码实现-25"><a href="#代码实现-25" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//----------------------------------分页查询分类列表------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> PageVo <span class="title function_">selectCategoryPage</span><span class="params">(Category category, Integer pageNum, Integer pageSize)</span> {</span><br><span class="line">       LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">       queryWrapper.like(StringUtils.hasText(category.getName()),Category::getName, category.getName());</span><br><span class="line">       queryWrapper.eq(Objects.nonNull(category.getStatus()),Category::getStatus, category.getStatus());</span><br><span class="line"></span><br><span class="line">       Page&lt;Category&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">       page.setCurrent(pageNum);</span><br><span class="line">       page.setSize(pageSize);</span><br><span class="line">       page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//转换成VO</span></span><br><span class="line">       List&lt;Category&gt; categories = page.getRecords();</span><br><span class="line"></span><br><span class="line">       <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">       pageVo.setTotal(page.getTotal());</span><br><span class="line">       pageVo.setRows(categories);</span><br><span class="line">       <span class="keyword">return</span> pageVo;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h3><h4 id="接口分析-25"><a href="#接口分析-25" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130201117697.png" alt="image-20231130201117697"></p><h4 id="代码实现-26"><a href="#代码实现-26" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "增加文章的分类", notes = "增加文章的分类")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AddCategoryDto categoryDto)</span>{</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> BeanCopyUtils.copyBean(categoryDto, Category.class);</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h3><h4 id="接口分析-26"><a href="#接口分析-26" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130201618963.png" alt="image-20231130201618963"></p><h4 id="代码实现-27"><a href="#代码实现-27" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(value = "/{id}")</span></span><br><span class="line">   <span class="meta">@ApiOperation(value = "删除文章的分类", notes = "删除文章的分类")</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable(value = "id")</span>List&lt;Long&gt; id)</span>{</span><br><span class="line">       categoryService.removeByIds(id);</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h3><h4 id="接口分析-27"><a href="#接口分析-27" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130201802839.png" alt="image-20231130201802839"></p><h4 id="代码实现-28"><a href="#代码实现-28" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = "/{id}")</span></span><br><span class="line">    <span class="comment">//①根据分类的id来查询分类</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "根据分类的id来查询分类", notes = "根据分类的id来查询分类")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = "id")</span>Long id)</span>{</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(category);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="comment">//②根据分类的id来修改分类</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "根据分类的id来修改分类", notes = "根据分类的id来修改分类")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>{</span><br><span class="line">        categoryService.updateById(category);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="Excel表格"><a href="#Excel表格" class="headerlink" title="Excel表格"></a>Excel表格</h2><h3 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130193927468.png" alt="image-20231130193927468"></p><h3 id="接口分析-28"><a href="#接口分析-28" class="headerlink" title="接口分析"></a>接口分析</h3><p>使用easyExcel实现Excel的导出操作</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">官方地址: https://github.com/alibaba/easyexcel</span><br><span class="line"></span><br><span class="line">快速开始: https://easyexcel.opensource.alibaba.com/docs/current/quickstart/write#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-1</span><br></pre></td></tr></tbody></table></figure><p>分析: 把数据库的分类数据查询出来，然后写入到Excel文件中，然后下载这个Excel文件，重点就是怎么往Excel里面写入数据，点击上面提供的快速开始的链接，点击左侧的 ‘写Excel’，就能看到实现的代码了，重点看右侧小导航栏的 ‘web中的写并且失败的时候返回json’</p><p>增加响应头，将数据变成输出流响应到浏览器，报错也响应到浏览器</p><h3 id="代码实现-29"><a href="#代码实现-29" class="headerlink" title="代码实现"></a>代码实现</h3><p>1.加入pom依赖</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--easyExcel的依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;easyexcel&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/export")</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "把分类数据写入到Excel并导出", notes = "把分类数据写入到Excel并导出")</span></span><br><span class="line">    <span class="comment">//注意返回值类型是void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(HttpServletResponse response)</span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//设置下载文件的请求头，下载下来的Excel文件叫'分类.xlsx'</span></span><br><span class="line">            WebUtils.setDownLoadHeader(<span class="string">"分类.xlsx"</span>,response);</span><br><span class="line">            <span class="comment">//获取需要导出的数据</span></span><br><span class="line">            List&lt;Category&gt; category = categoryService.list();</span><br><span class="line"></span><br><span class="line">            List&lt;ExcelCategoryVo&gt; excelCategoryVos = BeanCopyUtils.copyBeanList(category, ExcelCategoryVo.class);</span><br><span class="line">            <span class="comment">//把数据写入到Excel中，也就是把ExcelCategoryVo实体类的字段作为Excel表格的列头</span></span><br><span class="line">            <span class="comment">//sheet方法里面的字符串是Excel表格左下角工作簿的名字</span></span><br><span class="line">            EasyExcel.write(response.getOutputStream(), ExcelCategoryVo.class).autoCloseStream(Boolean.FALSE).sheet(<span class="string">"文章分类"</span>)</span><br><span class="line">                    .doWrite(excelCategoryVos);</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">//如果出现异常,就返回失败的json数据给前端。AppHttpCodeEnum和ResponseResult是我们在huanf-framework工程写的类</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR);</span><br><span class="line">            <span class="comment">//WebUtils是我们在huanf-framework工程写的类，里面的renderString方法是将json字符串写入到请求体，然后返回给前端</span></span><br><span class="line">            WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">/* 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param response 渲染对象</span></span><br><span class="line"><span class="comment">     * @param string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * @return null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//easyExcel文件导出失败时候做的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> {</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setDownLoadHeader</span><span class="params">(String filename, ServletContext context, HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException {</span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> context.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">        String fname= URLEncoder.encode(filename,<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Content-disposition"</span>,<span class="string">"attachment; filename="</span>+fname);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");</span></span><br><span class="line"><span class="comment">//        response.setCharacterEncoding("utf-8");</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//easyExcel文件导出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setDownLoadHeader</span><span class="params">(String filename, HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException {</span><br><span class="line">        response.setContentType(<span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        String fname= URLEncoder.encode(filename,<span class="string">"UTF-8"</span>).replaceAll(<span class="string">"\\+"</span>, <span class="string">"%20"</span>);<span class="comment">//防止中文乱码</span></span><br><span class="line"><span class="comment">//        response.setHeader("Content-disposition","attachment; filename="+fname);</span></span><br><span class="line">        response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename*=utf-8''"</span> + fname);</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><h3 id="查询文章"><a href="#查询文章" class="headerlink" title="查询文章"></a>查询文章</h3><h4 id="接口分析-29"><a href="#接口分析-29" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130202552450.png" alt="image-20231130202552450"></p><h4 id="代码实现-30"><a href="#代码实现-30" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------管理后台(文章管理)-分页查询文章----------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageVo <span class="title function_">selectArticlePage</span><span class="params">(Article article, Integer pageNum, Integer pageSize)</span> {</span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(article.getTitle()),Article::getTitle, article.getTitle());</span><br><span class="line">        queryWrapper.like(StringUtils.hasText(article.getSummary()),Article::getSummary, article.getSummary());</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">        pageVo.setTotal(page.getTotal());</span><br><span class="line">        pageVo.setRows(articles);</span><br><span class="line">        <span class="keyword">return</span> pageVo;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="修改文章"><a href="#修改文章" class="headerlink" title="修改文章"></a>修改文章</h3><h4 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130203501652.png" alt="image-20231130203501652"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130203629930.png" alt="image-20231130203629930"></p><h4 id="思路分析-13"><a href="#思路分析-13" class="headerlink" title="思路分析"></a>思路分析</h4><p>首先根据文章id查询文件信息，再根据文章id去标签-文章的表去查询文章id所对应的tagid 然后将tagid赋值给文章实体类的tagid集合</p><p>然后根据文章id，去修改文章的分类信息，然后删除旧的文章-标签对应关系，增加新的标签-文章对应关系</p><h4 id="代码实现-31"><a href="#代码实现-31" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = "/{id}")</span></span><br><span class="line">    <span class="comment">//①先查询根据文章id查询对应的文章</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "先查询根据文章id查询对应的文章", notes = "先查询根据文章id查询对应的文章")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = "id")</span>Long id)</span>{</span><br><span class="line">        <span class="type">ArticleByIdVo</span> <span class="variable">article</span> <span class="operator">=</span> articleService.getInfo(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(article);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="comment">//②然后才是修改文章</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "修改文章", notes = "修改文章")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> ArticleDto article)</span>{</span><br><span class="line">        articleService.edit(article);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ArticleByIdVo <span class="title function_">getInfo</span><span class="params">(Long id)</span> {</span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取关联标签   反方向拿到tags的标签</span></span><br><span class="line">        LambdaQueryWrapper&lt;ArticleTag&gt; articleTagLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        articleTagLambdaQueryWrapper.eq(ArticleTag::getArticleId,article.getId());   <span class="comment">//获取article_id的连表的集合，然后分别根据里面的</span></span><br><span class="line">        List&lt;ArticleTag&gt; articleTags = articleTagService.list(articleTagLambdaQueryWrapper);   <span class="comment">//获取articleid连表tagid集合</span></span><br><span class="line">        List&lt;Long&gt; tags = articleTags.stream().map(articleTag -&gt; articleTag.getTagId()).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="type">ArticleByIdVo</span> <span class="variable">articleVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(article,ArticleByIdVo.class);</span><br><span class="line">        articleVo.setTags(tags);</span><br><span class="line">        <span class="keyword">return</span> articleVo;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(ArticleDto articleDto)</span> {</span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> BeanCopyUtils.copyBean(articleDto, Article.class);</span><br><span class="line">        <span class="comment">//更新博客信息</span></span><br><span class="line">        updateById(article);</span><br><span class="line">        <span class="comment">//删除原有的 标签和博客的关联</span></span><br><span class="line">        LambdaQueryWrapper&lt;ArticleTag&gt; articleTagLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        articleTagLambdaQueryWrapper.eq(ArticleTag::getArticleId,article.getId());</span><br><span class="line">        articleTagService.remove(articleTagLambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//添加新的博客和标签的关联信息</span></span><br><span class="line">        List&lt;ArticleTag&gt; articleTags = articleDto.getTags().stream()</span><br><span class="line">                .map(tagId -&gt; <span class="keyword">new</span> <span class="title class_">ArticleTag</span>(articleDto.getId(), tagId))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        articleTagService.saveBatch(articleTags);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><h4 id="接口分析-30"><a href="#接口分析-30" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231130205402127.png" alt="image-20231130205402127"></p><h4 id="代码实现-32"><a href="#代码实现-32" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "删除文章", notes = "删除文章")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> List&lt;Long&gt; id)</span>{</span><br><span class="line">        <span class="comment">//直接使用mybatisplus提供的removeById方法</span></span><br><span class="line">        articleService.removeByIds(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="菜单列表"><a href="#菜单列表" class="headerlink" title="菜单列表"></a>菜单列表</h2><h3 id="查询菜单"><a href="#查询菜单" class="headerlink" title="查询菜单"></a>查询菜单</h3><h4 id="接口分析-31"><a href="#接口分析-31" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201083524731.png" alt="image-20231201083524731"></p><p>响应格式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="string">"code"</span>:<span class="number">200</span>,</span><br><span class="line"><span class="string">"data"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="string">"component"</span>:<span class="string">"组件路径"</span>,</span><br><span class="line"><span class="string">"icon"</span>:<span class="string">"build"</span>,</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2023"</span>,</span><br><span class="line"><span class="string">"isFrame"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">"menuName"</span>:<span class="string">"菜单名称"</span>,</span><br><span class="line"><span class="string">"menuType"</span>:<span class="string">"C"</span>,</span><br><span class="line"><span class="string">"orderNum"</span>:<span class="number">0</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"0"</span>,</span><br><span class="line"><span class="string">"path"</span>:<span class="string">"write"</span>,</span><br><span class="line"><span class="string">"perms"</span>:<span class="string">"权限字符串"</span>,</span><br><span class="line"><span class="string">"remark"</span>:<span class="string">"备注信息"</span>,</span><br><span class="line"><span class="string">"status"</span>:<span class="string">"0"</span>,</span><br><span class="line"><span class="string">"visible"</span>:<span class="string">"0"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"icon"</span>:<span class="string">"system"</span>,</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"1"</span>,</span><br><span class="line"><span class="string">"isFrame"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">"menuName"</span>:<span class="string">"菜单名称"</span>,</span><br><span class="line"><span class="string">"menuType"</span>:<span class="string">"M"</span>,</span><br><span class="line"><span class="string">"orderNum"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"0"</span>,</span><br><span class="line"><span class="string">"path"</span>:<span class="string">"system"</span>,</span><br><span class="line"><span class="string">"perms"</span>:<span class="string">"权限字符串"</span>,</span><br><span class="line"><span class="string">"remark"</span>:<span class="string">"备注信息"</span>,</span><br><span class="line"><span class="string">"status"</span>:<span class="string">"0"</span>,</span><br><span class="line"><span class="string">"visible"</span>:<span class="string">"0"</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="string">"msg"</span>:<span class="string">"操作成功"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="代码实现-33"><a href="#代码实现-33" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------查询菜单列表--------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">selectMenuList</span><span class="params">(Menu menu)</span> {</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Menu&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//menuName模糊查询</span></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(menu.getMenuName()),Menu::getMenuName,menu.getMenuName());</span><br><span class="line">        queryWrapper.eq(StringUtils.hasText(menu.getStatus()),Menu::getStatus,menu.getStatus());</span><br><span class="line">        <span class="comment">//排序 parent_id和order_num</span></span><br><span class="line">        queryWrapper.orderByAsc(Menu::getParentId,Menu::getOrderNum);</span><br><span class="line">        List&lt;Menu&gt; menus = list(queryWrapper);;</span><br><span class="line">        <span class="keyword">return</span> menus;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="新增菜单"><a href="#新增菜单" class="headerlink" title="新增菜单"></a>新增菜单</h3><h4 id="接口分析-32"><a href="#接口分析-32" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201085142322.png" alt="image-20231201085142322"></p><h4 id="代码实现-34"><a href="#代码实现-34" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"> <span class="meta">@ApiOperation(value = "新增菜单列表", notes = "新增菜单列表")</span></span><br><span class="line"> <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Menu menu)</span> {</span><br><span class="line">     menuService.save(menu);</span><br><span class="line">     <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h3><h4 id="接口分析-33"><a href="#接口分析-33" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201085730990.png" alt="image-20231201085730990"></p><h4 id="思路分析-14"><a href="#思路分析-14" class="headerlink" title="思路分析"></a>思路分析</h4><p>先根据菜单id查询出菜单信息，回显数据</p><p>在根据id更新所修改的信息，修改的时候判断所修改的菜单是否是父菜单，不能把父菜单设置为当前菜单</p><h4 id="代码实现-35"><a href="#代码实现-35" class="headerlink" title="代码实现"></a>代码实现</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201090245547.png" alt="image-20231201090245547"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = "/{menuId}")</span></span><br><span class="line">    <span class="comment">//①先查询根据菜单id查询对应的权限菜单</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "查询菜单信息", notes = "查询菜单信息")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable</span> Long menuId)</span> {</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(menuService.getById(menuId));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="comment">//②然后才是更新菜单</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> Menu menu)</span> {</span><br><span class="line">        <span class="keyword">if</span> (menu.getId().equals(menu.getParentId())) {</span><br><span class="line">            <span class="keyword">return</span> ResponseResult.errorResult(<span class="number">500</span>,<span class="string">"修改菜单'"</span> + menu.getMenuName() + <span class="string">"'失败，上级菜单不能选择自己"</span>);</span><br><span class="line">        }</span><br><span class="line">        menuService.updateById(menu);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="删除菜单"><a href="#删除菜单" class="headerlink" title="删除菜单"></a>删除菜单</h3><h4 id="接口分析-34"><a href="#接口分析-34" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201091746875.png" alt="image-20231201091746875"></p><h4 id="思路分析-15"><a href="#思路分析-15" class="headerlink" title="思路分析"></a>思路分析</h4><p>判断是否有子目录，就是看其他的parentid是否有它</p><h4 id="代码实现-36"><a href="#代码实现-36" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------查看是否有子目录--------------------------------------</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasChild</span><span class="params">(Long menuId)</span> {</span><br><span class="line">       <span class="comment">//查看是否有子目录</span></span><br><span class="line">       LambdaQueryWrapper&lt;Menu&gt; menulambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       menulambdaQueryWrapper.eq(Menu::getParentId,menuId);   <span class="comment">//如果能查出来，就返回true</span></span><br><span class="line">       <span class="keyword">return</span> count(menulambdaQueryWrapper)&gt;<span class="number">0</span>;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h2 id="角色列表"><a href="#角色列表" class="headerlink" title="角色列表"></a>角色列表</h2><h3 id="查询角色"><a href="#查询角色" class="headerlink" title="查询角色"></a>查询角色</h3><h4 id="接口设计-3"><a href="#接口设计-3" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201092512509.png" alt="image-20231201092512509"></p><p>响应</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"code"</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"rows"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"12"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleKey"</span><span class="punctuation">:</span><span class="string">"link"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleName"</span><span class="punctuation">:</span><span class="string">"角色名称"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleSort"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"total"</span><span class="punctuation">:</span><span class="string">"1"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"msg"</span><span class="punctuation">:</span><span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="思路分析-16"><a href="#思路分析-16" class="headerlink" title="思路分析"></a>思路分析</h4><p>根据条件模糊查询，，将分页信息封装到vo返回给前端</p><h4 id="代码实现-37"><a href="#代码实现-37" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------查询角色列表---------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">selectRolePage</span><span class="params">(Role role, Integer pageNum, Integer pageSize)</span> {</span><br><span class="line">        LambdaQueryWrapper&lt;Role&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.like(StringUtils.hasText(role.getRoleName()),Role::getRoleName,role.getRoleName());</span><br><span class="line">        lambdaQueryWrapper.eq(StringUtils.hasText(role.getStatus()),Role::getStatus,role.getStatus());</span><br><span class="line">        lambdaQueryWrapper.orderByAsc(Role::getRoleSort);</span><br><span class="line"></span><br><span class="line">        Page&lt;Role&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page,lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        List&lt;Role&gt; roles = page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">        pageVo.setTotal(page.getTotal());</span><br><span class="line">        pageVo.setRows(roles);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="修改状态"><a href="#修改状态" class="headerlink" title="修改状态"></a>修改状态</h3><h4 id="接口设计-4"><a href="#接口设计-4" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201093155861.png" alt="image-20231201093155861"></p><h4 id="思路分析-17"><a href="#思路分析-17" class="headerlink" title="思路分析"></a>思路分析</h4><p>设置Role所要更新的信息，然后调用mp的更新方法去更新</p><h4 id="代码实现-38"><a href="#代码实现-38" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping("/changeStatus")</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "修改角色的状态", notes = "修改角色的状态")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> ChangeRoleStatusDto roleStatusDto)</span>{</span><br><span class="line">        <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>();</span><br><span class="line">        role.setId(roleStatusDto.getRoleId());</span><br><span class="line">        role.setStatus(roleStatusDto.getStatus());</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(roleService.updateById(role));</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="新增角色"><a href="#新增角色" class="headerlink" title="新增角色"></a>新增角色</h3><h4 id="接口设计-5"><a href="#接口设计-5" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201101048056.png" alt="image-20231201101048056"></p><p>响应</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"code"</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"2023"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"label"</span><span class="punctuation">:</span><span class="string">"写博文"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1001"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"label"</span><span class="punctuation">:</span><span class="string">"用户查询"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="string">"100"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1007"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"label"</span><span class="punctuation">:</span><span class="string">"重置密码"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="string">"100"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"100"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"label"</span><span class="punctuation">:</span><span class="string">"用户管理"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="string">"1"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"2024"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"label"</span><span class="punctuation">:</span><span class="string">"友链新增"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="string">"2022"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"children"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"2025"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"label"</span><span class="punctuation">:</span><span class="string">"友链修改"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="string">"2022"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"2022"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"label"</span><span class="punctuation">:</span><span class="string">"友链管理"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="string">"2017"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"2017"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"label"</span><span class="punctuation">:</span><span class="string">"内容管理"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"parentId"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"msg"</span><span class="punctuation">:</span><span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="思路分析-18"><a href="#思路分析-18" class="headerlink" title="思路分析"></a>思路分析</h4><p>首先打开新增窗口，需要查询出菜单树   可以先找出第一层菜单，然后根据i第一层的菜单id，找出其他菜单父类id为它的菜单，然后将这些菜单设置为第一层菜单的children</p><p>然后新增所填写的角色信息</p><p>并且需要将角色和菜单的对应关系加到角色-菜单关联关系表</p><h4 id="代码实现-39"><a href="#代码实现-39" class="headerlink" title="代码实现"></a>代码实现</h4><p>①</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/treeselect")</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "新增角色--获取菜单下拉树列表", notes = "新增角色--获取菜单下拉树列表")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">treeselect</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//复用之前的selectMenuList方法。方法需要参数，参数可以用来进行条件查询，而这个方法不需要条件，所以直接new Menu()传入</span></span><br><span class="line">        List&lt;Menu&gt; menus = menuService.selectMenuList(<span class="keyword">new</span> <span class="title class_">Menu</span>()); <span class="comment">//查询菜单列表</span></span><br><span class="line">        List&lt;MenuTreeVo&gt; options =  SystemConverter.buildMenuSelectTree(menus); <span class="comment">//去构建挑选的菜单树</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(options);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.entity.Menu;</span><br><span class="line"><span class="keyword">import</span> com.sangeng.domain.vo.MenuTreeVo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增角色-获取菜单下拉树列表（和动态路由一样）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 久违</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/1 10:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemConverter</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemConverter</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menus 所有菜单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;MenuTreeVo&gt; <span class="title function_">buildMenuSelectTree</span><span class="params">(List&lt;Menu&gt; menus)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//首先封装成MenuTreeVo</span></span><br><span class="line">        List&lt;MenuTreeVo&gt; menuTreeVos = menus.stream()</span><br><span class="line">                .map(menu -&gt; <span class="keyword">new</span> <span class="title class_">MenuTreeVo</span>(menu.getId(), menu.getMenuName(), menu.getParentId(), <span class="literal">null</span>))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">                 <span class="comment">//先查父菜单为0的菜单</span></span><br><span class="line">        List&lt;MenuTreeVo&gt; menuTree = menuTreeVos.stream().filter(menuTreeVo -&gt; menuTreeVo.getParentId().equals(<span class="number">0L</span>))</span><br><span class="line">                .map(menuTreeVo -&gt; menuTreeVo.setChildren(getChildren(menuTreeVo, menuTreeVos))) <span class="comment">//然后查找别的菜单parentId为前面查到父菜单为0的id，将其设置到这个id的children中</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> menuTree;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到子树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menuTreeVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menuTreeVos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;MenuTreeVo&gt; <span class="title function_">getChildren</span><span class="params">(MenuTreeVo menuTreeVo,List&lt;MenuTreeVo&gt; menuTreeVos)</span> {</span><br><span class="line">        List&lt;MenuTreeVo&gt; childrenTree = menuTreeVos.stream().filter(m -&gt; m.getParentId().equals(menuTreeVo.getId()))</span><br><span class="line">                .map(m -&gt; m.setChildren(getChildren(m, menuTreeVos))).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> childrenTree;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>②</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------新增角色信息---------------------------------------</span></span><br><span class="line">    <span class="comment">//先新增角色信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertRole</span><span class="params">(Role role)</span> {</span><br><span class="line">        save(role);</span><br><span class="line">        <span class="keyword">if</span> (role.getMenuIds()!=<span class="literal">null</span>&amp;&amp;role.getMenuIds().length&gt;<span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//将角色和菜单的关系执行插入到menu-role表</span></span><br><span class="line">            insertRoleMenu(role);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再将角色和菜单关系保存到关系表中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertRoleMenu</span><span class="params">(Role role)</span> {</span><br><span class="line">        List&lt;RoleMenu&gt; roleMenu = Arrays.stream(role.getMenuIds()).map(menuId -&gt; <span class="keyword">new</span> <span class="title class_">RoleMenu</span>(menuId, role.getId()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        roleMenuService.saveBatch(roleMenu);</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "新增角色", notes = "新增角色")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">( <span class="meta">@RequestBody</span> Role role)</span> {</span><br><span class="line">        roleService.insertRole(role);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="修改角色"><a href="#修改角色" class="headerlink" title="修改角色"></a>修改角色</h3><h4 id="接口设计-6"><a href="#接口设计-6" class="headerlink" title="接口设计"></a>接口设计</h4><p>① <img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201101339076.png" alt="image-20231201101339076"></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"code"</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"11"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"remark"</span><span class="punctuation">:</span><span class="string">"备注信息"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleKey"</span><span class="punctuation">:</span><span class="string">"aggag"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleName"</span><span class="punctuation">:</span><span class="string">"角色名称"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleSort"</span><span class="punctuation">:</span><span class="string">"5"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"msg"</span><span class="punctuation">:</span><span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"code"</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"11"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"remark"</span><span class="punctuation">:</span><span class="string">"备注信息"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleKey"</span><span class="punctuation">:</span><span class="string">"aggag"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleName"</span><span class="punctuation">:</span><span class="string">"角色名称"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleSort"</span><span class="punctuation">:</span><span class="string">"5"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"msg"</span><span class="punctuation">:</span><span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201101412122.png" alt="image-20231201101412122"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="string">"code"</span>:<span class="number">200</span>,</span><br><span class="line"><span class="string">"data"</span>:{</span><br><span class="line"><span class="string">"menus"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2023"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"写博文"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"0"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"1001"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"用户查询"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"100"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"1002"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"用户新增"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"100"</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"100"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"用户管理"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"1"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"1008"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"角色查询"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"101"</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"101"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"角色管理"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"1"</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"1"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"系统管理"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"0"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2019"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"文章管理"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"2017"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2028"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"导出分类"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"2018"</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2018"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"分类管理"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"2017"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2024"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"友链新增"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"2022"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2025"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"友链修改"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"2022"</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2022"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"友链管理"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"2017"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line"><span class="string">"children"</span>:[],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2021"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"标签管理"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"2017"</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="string">"id"</span>:<span class="string">"2017"</span>,</span><br><span class="line"><span class="string">"label"</span>:<span class="string">"内容管理"</span>,</span><br><span class="line"><span class="string">"parentId"</span>:<span class="string">"0"</span></span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line"><span class="string">"checkedKeys"</span>:[</span><br><span class="line"><span class="string">"1001"</span>  </span><br><span class="line">]</span><br><span class="line">},</span><br><span class="line"><span class="string">"msg"</span>:<span class="string">"操作成功"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201101445405.png" alt="image-20231201101445405"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201101458722.png" alt="image-20231201101458722"></p><h4 id="思路分析-19"><a href="#思路分析-19" class="headerlink" title="思路分析"></a>思路分析</h4><p>首先根据角色id查询角色信息回显到修改窗口</p><p>然后回显菜单树，和这个角色之前选的菜单的id（根据角色id查找对应的菜单id集合）</p><p>最后把修改的角色信息保存到数据库中，把菜单角色关联表中的这个角色id之前信息删除，在重新添加关联信息</p><h4 id="代码实现-40"><a href="#代码实现-40" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/{id}")</span></span><br><span class="line">   <span class="meta">@ApiOperation(value = "获取修改id角色信息", notes = "获取修改id角色信息")</span></span><br><span class="line">   <span class="meta">@ApiImplicitParam(name = "id",value = "角色id")</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">selectById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> {</span><br><span class="line">       <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> roleService.getById(id);</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------修改角色-根据角色id查询对应角色菜单列表树--------------------------</span></span><br><span class="line">    <span class="meta">@GetMapping(value = "/roleMenuTreeselect/{roleId}")</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "修改角色-根据角色id查询对应角色菜单列表树-", notes = "修改角色-根据角色id查询对应角色菜单列表树-")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">roleMenuTreeSelect</span><span class="params">(<span class="meta">@PathVariable("roleId")</span> Long roleId)</span> {</span><br><span class="line">        <span class="comment">//首先给出所有的菜单</span></span><br><span class="line">        List&lt;Menu&gt; menus = menuService.selectMenuList(<span class="keyword">new</span> <span class="title class_">Menu</span>());</span><br><span class="line">        <span class="comment">//然后去建立菜单树</span></span><br><span class="line">        List&lt;MenuTreeVo&gt; menuTreeVos = SystemConverter.buildMenuSelectTree(menus);</span><br><span class="line">        <span class="comment">//然后在去查询这个角色id之前所具有的菜单id，将其和菜单树返回</span></span><br><span class="line">         List&lt;Long&gt; checkedKeys = menuService.selectMenuListByRoleId(roleId);</span><br><span class="line">        <span class="type">RoleMenuTreeSelectVo</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleMenuTreeSelectVo</span>(checkedKeys,menuTreeVos);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(vo);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--修改角色-根据角色id查询对应角色的菜单列表树--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectMenuListByRoleId"</span> resultType=<span class="string">"java.lang.Long"</span>&gt;</span><br><span class="line">    select *</span><br><span class="line">    from sys_menu m left join sys_role_menu rm on m.id = rm.menu_id</span><br><span class="line">    where rm.role_id = #{roleId}</span><br><span class="line">    order by m.parent_id , m.order_num</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------------修改角色-保存修改好的角色信息----------------------------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateRole</span><span class="params">(Role role)</span> {</span><br><span class="line">        <span class="comment">//先更新角色信息</span></span><br><span class="line">        updateById(role);</span><br><span class="line">        <span class="comment">//然后删除这个角色所对应的菜单关系</span></span><br><span class="line">        roleMenuService.deleteRoleMenuByRoleId(role.getId());</span><br><span class="line">        <span class="comment">//然后重新保存两个表的关系</span></span><br><span class="line">        insertRoleMenu(role);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//修改角色-保存修改好的角色信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteRoleMenuByRoleId</span><span class="params">(Long id)</span> {</span><br><span class="line">        LambdaQueryWrapper&lt;RoleMenu&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(RoleMenu::getRoleId,id);</span><br><span class="line">        remove(queryWrapper);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="删除角色"><a href="#删除角色" class="headerlink" title="删除角色"></a>删除角色</h3><h4 id="接口设计-7"><a href="#接口设计-7" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201101543847.png" alt="image-20231201101543847"></p><h4 id="代码实现-41"><a href="#代码实现-41" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">   <span class="meta">@ApiOperation(value = "删除角色", notes = "删除角色")</span></span><br><span class="line">   <span class="meta">@ApiImplicitParam(name = "id",value = "角色id")</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable(name = "id")</span> Long id)</span> {</span><br><span class="line">       roleService.removeById(id);</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h2 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h2><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><h4 id="接口分析-35"><a href="#接口分析-35" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201164913448.png" alt="image-20231201164913448"></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"code"</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"rows"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"avatar"</span><span class="punctuation">:</span><span class="string">"头像url"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2023-08-05 17:01:56"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"email"</span><span class="punctuation">:</span><span class="string">"23412332@qq.com"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"nickName"</span><span class="punctuation">:</span><span class="string">"昵称"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"phonenumber"</span><span class="punctuation">:</span><span class="string">"18888888888"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"sex"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"updateBy"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"updateTime"</span><span class="punctuation">:</span><span class="string">"2023-08-10 21:36:22"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"userName"</span><span class="punctuation">:</span><span class="string">"sg"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"total"</span><span class="punctuation">:</span><span class="string">"1"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"msg"</span><span class="punctuation">:</span><span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="代码实现-42"><a href="#代码实现-42" class="headerlink" title="代码实现"></a>代码实现</h4><p>//——————————–查询用户列表————————————-<br>    @Override<br>    public ResponseResult selectUserPage (User user, Integer pageNum, Integer pageSize){<br>        LambdaQueryWrapper<user> queryWrapper = new LambdaQueryWrapper();</user></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    queryWrapper.like(StringUtils.hasText(user.getUserName()), User::getUserName, user.getUserName());</span><br><span class="line">    queryWrapper.eq(StringUtils.hasText(user.getStatus()), User::getStatus, user.getStatus());</span><br><span class="line">    queryWrapper.eq(StringUtils.hasText(user.getPhonenumber()), User::getPhonenumber, user.getPhonenumber());</span><br><span class="line"></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    page.setCurrent(pageNum);</span><br><span class="line">    page.setSize(pageSize);</span><br><span class="line">    page(page, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换成VO</span></span><br><span class="line">    List&lt;User&gt; users = page.getRecords();</span><br><span class="line">    List&lt;UserVo&gt; userVoList = users.stream()</span><br><span class="line">            .map(u -&gt; BeanCopyUtils.copyBean(u, UserVo.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">    pageVo.setTotal(page.getTotal());</span><br><span class="line">    pageVo.setRows(userVoList);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h3><h4 id="思路分析-20"><a href="#思路分析-20" class="headerlink" title="思路分析"></a>思路分析</h4><p>首先查出所有角色，然后增加用户,把角色和用户对应关系也需要保存到关联表中</p><h4 id="接口分析-36"><a href="#接口分析-36" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201165429716.png" alt="image-20231201165429716"></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"code"</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"createBy"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2023-08-12 18:46:19"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"delFlag"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"remark"</span><span class="punctuation">:</span><span class="string">"超级管理员"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleKey"</span><span class="punctuation">:</span><span class="string">"admin"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleName"</span><span class="punctuation">:</span><span class="string">"超级管理员"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleSort"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"updateBy"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"createBy"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2023-08-12 18:46:19"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"delFlag"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"2"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"remark"</span><span class="punctuation">:</span><span class="string">"普通角色"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleKey"</span><span class="punctuation">:</span><span class="string">"common"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleName"</span><span class="punctuation">:</span><span class="string">"普通角色"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleSort"</span><span class="punctuation">:</span><span class="string">"2"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"updateBy"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"updateTime"</span><span class="punctuation">:</span><span class="string">"2023-08-13 06:32:58"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"msg"</span><span class="punctuation">:</span><span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201170004116.png" alt="image-20231201170004116"></p><h4 id="代码实现-43"><a href="#代码实现-43" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//--------------------------------新增用户---------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/listAllRole")</span></span><br><span class="line">    <span class="comment">//①查询角色列表接口</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">listAllRole</span><span class="params">()</span>{</span><br><span class="line">        List&lt;Role&gt; roles = roleService.selectRoleAll();</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(roles);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------新增用户-②新增用户--------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleService userRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkUserNameUnique</span><span class="params">(String userName)</span> {</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUserName,userName))==<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPhoneUnique</span><span class="params">(User user)</span> {</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getPhonenumber,user.getPhonenumber()))==<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkEmailUnique</span><span class="params">(User user)</span> {</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getEmail,user.getEmail()))==<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="comment">//增加用户</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">addUser</span><span class="params">(User user)</span> {</span><br><span class="line">        <span class="comment">//密码加密处理</span></span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        save(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user.getRoleIds()!=<span class="literal">null</span>&amp;&amp;user.getRoleIds().length&gt;<span class="number">0</span>){</span><br><span class="line">            insertUserRole(user);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入用户和角色关联关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertUserRole</span><span class="params">(User user)</span> {</span><br><span class="line">        List&lt;UserRole&gt; sysUserRoles = Arrays.stream(user.getRoleIds())</span><br><span class="line">                .map(roleId -&gt; <span class="keyword">new</span> <span class="title class_">UserRole</span>(user.getId(), roleId)).collect(Collectors.toList());</span><br><span class="line">        userRoleService.saveBatch(sysUserRoles);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "新增用户",notes = "新增用户")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> {</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getUserName())){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.REQUIRE_USERNAME);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!userService.checkUserNameUnique(user.getUserName())){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.USERNAME_EXIST);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!userService.checkPhoneUnique(user)){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.PHONENUMBER_EXIST);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!userService.checkEmailUnique(user)){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.EMAIL_EXIST);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> userService.addUser(user);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><h4 id="接口分析-37"><a href="#接口分析-37" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231201172144858.png" alt="image-20231201172144858"></p><h4 id="代码实现-44"><a href="#代码实现-44" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping("/{userIds}")</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "删除用户",notes = "删除用户")</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable</span> List&lt;Long&gt; userIds)</span> {</span><br><span class="line">        <span class="keyword">if</span>(userIds.contains(SecurityUtils.getUserId())){</span><br><span class="line">            <span class="keyword">return</span> ResponseResult.errorResult(<span class="number">500</span>,<span class="string">"不能删除当前你正在使用的用户"</span>);</span><br><span class="line">        }</span><br><span class="line">        userService.removeByIds(userIds);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><h4 id="思路分析-21"><a href="#思路分析-21" class="headerlink" title="思路分析"></a>思路分析</h4><p>先查找出该用户所有的角色信息，然后删除该用户的角色用户的关联关系，</p><p>然后插入新的关联信息，最后插入用户表信息</p><h4 id="接口分析-38"><a href="#接口分析-38" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231203221702948.png" alt="image-20231203221702948"></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"code"</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"data"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"roleIds"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="string">"11"</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roles"</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"createBy"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2023-08-10 18:46:19"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"delFlag"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"remark"</span><span class="punctuation">:</span><span class="string">"超级管理员"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleKey"</span><span class="punctuation">:</span><span class="string">"admin"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleName"</span><span class="punctuation">:</span><span class="string">"超级管理员"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleSort"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"updateBy"</span><span class="punctuation">:</span><span class="string">"0"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"createBy"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"createTime"</span><span class="punctuation">:</span><span class="string">"2023-08-10 18:46:19"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"delFlag"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"2"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"remark"</span><span class="punctuation">:</span><span class="string">"普通角色"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleKey"</span><span class="punctuation">:</span><span class="string">"common"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleName"</span><span class="punctuation">:</span><span class="string">"普通角色"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"roleSort"</span><span class="punctuation">:</span><span class="string">"2"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"updateBy"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"updateTime"</span><span class="punctuation">:</span><span class="string">"2023-08-11 06:32:58"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"user"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line"><span class="attr">"email"</span><span class="punctuation">:</span><span class="string">"weq@2132.com"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"用户id"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"nickName"</span><span class="punctuation">:</span><span class="string">"昵称"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"sex"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"userName"</span><span class="punctuation">:</span><span class="string">"用户名"</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"msg"</span><span class="punctuation">:</span><span class="string">"操作成功"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231203221841556.png" alt="image-20231203221841556"></p><h4 id="代码实现-45"><a href="#代码实现-45" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--修改用户-①根据id查询用户角色信息--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectRoleIdByUserId"</span> resultType=<span class="string">"java.lang.Long"</span>&gt;</span><br><span class="line">        select r.id</span><br><span class="line">        from sys_role r</span><br><span class="line">                 left join sys_user_role ur on ur.role_id = r.id</span><br><span class="line">        where ur.user_id = #{userId}</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入用户和角色关联关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertUserRole</span><span class="params">(User user)</span> {</span><br><span class="line">        List&lt;UserRole&gt; sysUserRoles = Arrays.stream(user.getRoleIds())</span><br><span class="line">                .map(roleId -&gt; <span class="keyword">new</span> <span class="title class_">UserRole</span>(user.getId(), roleId)).collect(Collectors.toList());</span><br><span class="line">        userRoleService.saveBatch(sysUserRoles);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------修改用户-②更新用户信息-------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> {</span><br><span class="line">        <span class="comment">// 删除用户与角色关联</span></span><br><span class="line">        LambdaQueryWrapper&lt;UserRole&gt; userRoleUpdateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userRoleUpdateWrapper.eq(UserRole::getUserId,user.getId());</span><br><span class="line">        userRoleService.remove(userRoleUpdateWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增用户与角色管理</span></span><br><span class="line">        insertUserRole(user);</span><br><span class="line">        <span class="comment">// 更新用户信息</span></span><br><span class="line">        updateById(user);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="友链列表"><a href="#友链列表" class="headerlink" title="友链列表"></a>友链列表</h2><h3 id="查询友链"><a href="#查询友链" class="headerlink" title="查询友链"></a>查询友链</h3><h4 id="接口分析-39"><a href="#接口分析-39" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231203223736546.png" alt="image-20231203223736546"></p><h4 id="代码实现-46"><a href="#代码实现-46" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询友链</span></span><br><span class="line">    PageVo <span class="title function_">selectLinkPage</span><span class="params">(Link link, Integer pageNum, Integer pageSize)</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------------------分页查询友链---------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageVo <span class="title function_">selectLinkPage</span><span class="params">(Link link, Integer pageNum, Integer pageSize)</span> {</span><br><span class="line">        LambdaQueryWrapper&lt;Link&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(link.getName()),Link::getName, link.getName());</span><br><span class="line">        queryWrapper.eq(Objects.nonNull(link.getStatus()),Link::getStatus, link.getStatus());</span><br><span class="line"></span><br><span class="line">        Page&lt;Link&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        List&lt;Link&gt; categories = page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">        pageVo.setTotal(page.getTotal());</span><br><span class="line">        pageVo.setRows(categories);</span><br><span class="line">        <span class="keyword">return</span> pageVo;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="新增友链"><a href="#新增友链" class="headerlink" title="新增友链"></a>新增友链</h3><h4 id="接口分析-40"><a href="#接口分析-40" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231203224101175.png" alt="image-20231203224101175"></p><h4 id="代码实现-47"><a href="#代码实现-47" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sangeng.domain.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 友链(Link)表实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makejava</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-07-22 14:39:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName("sg_link")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Link</span>  {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String logo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//网站地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//审核状态 (0代表审核通过，1代表审核未通过，2代表未审核)</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字段自增</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="修改友链"><a href="#修改友链" class="headerlink" title="修改友链"></a>修改友链</h3><h4 id="思路分析-22"><a href="#思路分析-22" class="headerlink" title="思路分析"></a>思路分析</h4><p>先根据id查询友链，然后修改友链的状态，最后修改友链</p><h4 id="接口分析-41"><a href="#接口分析-41" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231203224313475.png" alt="image-20231203224313475"></p><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231203224324776.png" alt="image-20231203224324776"></p><h4 id="代码实现-48"><a href="#代码实现-48" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------修改友链---------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = "/{id}")</span></span><br><span class="line">    <span class="comment">//①根据id查询友链</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = "id")</span>Long id)</span>{</span><br><span class="line">        <span class="type">Link</span> <span class="variable">link</span> <span class="operator">=</span> linkService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(link);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping("/changeLinkStatus")</span></span><br><span class="line">    <span class="comment">//②修改友链状态</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">changeLinkStatus</span><span class="params">(<span class="meta">@RequestBody</span> Link link)</span>{</span><br><span class="line">        linkService.updateById(link);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="comment">//③修改友链</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> Link link)</span>{</span><br><span class="line">        linkService.updateById(link);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="删除友链"><a href="#删除友链" class="headerlink" title="删除友链"></a>删除友链</h3><h4 id="接口分析-42"><a href="#接口分析-42" class="headerlink" title="接口分析"></a>接口分析</h4><p><img src="C:\Users\康\AppData\Roaming\Typora\typora-user-images\image-20231203224654161.png" alt="image-20231203224654161"></p><h4 id="代码实现-49"><a href="#代码实现-49" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line"><span class="meta">@ApiOperation(value = "删除友链", notes = "删除友链")</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>{</span><br><span class="line">    linkService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h2 id="2024-4-2"><a href="#2024-4-2" class="headerlink" title="2024/4/2"></a>2024/4/2</h2><h3 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a><a href="https://leetcode.cn/problems/sum-of-left-leaves/">404. 左叶子之和</a></h3><p>前序遍历，首先判断是不是左叶子（左节点不为null，左节点的左孩和右孩子为null）。然后进行递归遍历左右孩子，最后返回sum</p><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//全局变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果是左叶子节点</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.left.left==<span class="literal">null</span> &amp;&amp; root.left.right==<span class="literal">null</span>) {</span><br><span class="line">        sum+=root.left.val;</span><br><span class="line">        }</span><br><span class="line">        sumOfLeftLeaves(root.left);</span><br><span class="line">        sumOfLeftLeaves(root.right);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513. 找树左下角的值"></a><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值</a></h3><p>BFS 广度优先搜索。从右往左对每一层进行遍历，最后一层的最后一个节点就是左下角的值</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">//层序遍历 从右向左进行遍历，最后一个就是最底层最左边的值</span></span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将root放入队列</span></span><br><span class="line">        queue.offerLast(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.pollFirst();</span><br><span class="line">            <span class="comment">//最后那个值就是要返回的</span></span><br><span class="line">            res = node.val;</span><br><span class="line">            <span class="comment">//先将右节点放入</span></span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)</span><br><span class="line">            queue.addLast(node.right);</span><br><span class="line">            <span class="comment">//在放左节点</span></span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)</span><br><span class="line">            queue.addLast(node.left);</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a><a href="https://leetcode.cn/problems/merge-two-binary-trees/">617. 合并二叉树</a></h3><p>让root1作为合并后的树，然后让root2上的值加到root1</p><p>深度优先遍历</p><p>结束条件：root1==null 直接返回root2   相反 root2==null 直接返回root1</p><p>过程：roo1+=root2，然后遍历左子树和右子树</p><p><strong>代码</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> {</span><br><span class="line">        <span class="comment">//root1为null了那直接就可以返回root2</span></span><br><span class="line">        <span class="keyword">if</span>(root1==<span class="literal">null</span>) <span class="keyword">return</span> root2;  </span><br><span class="line">        <span class="keyword">if</span>(root2==<span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以把root1作为和的点</span></span><br><span class="line">        root1.val = root1.val+root2.val;</span><br><span class="line">        root1.left = mergeTrees(root1.left,root2.left);</span><br><span class="line">        root1.right = mergeTrees(root1.right,root2.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="https://leetcode.cn/problems/path-sum/">112. 路径总和</a></h3><p>思路：DFS遍历 </p><p>递归终止条件：左右节点为null，计数器等于targetSum（或者每次用targetSum都减节点数最后为0 ）返回true ，返回false 左右节点都为null</p><p>单层递归逻辑</p><p>遍历左子树 count+val 如果到最后一个节点 然后执行 count-val回退到上一个根节点 </p><p>右子树一样</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//只有一个根节点。需要判断一下减去根节点是否等于目标值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        targetSum = targetSum - root.val;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> dfs(root,targetSum);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> count)</span> {</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right ==<span class="literal">null</span> &amp;&amp; count==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) {</span><br><span class="line">            count = count-root.left.val;</span><br><span class="line">            <span class="keyword">if</span>(dfs(root.left,count)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//到这一节点的左节点为叶子时 回溯就相当于count没变，继续去找右孩子</span></span><br><span class="line">            count = count + root.left.val;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) {</span><br><span class="line">            count = count - root.right.val;</span><br><span class="line">            <span class="keyword">if</span>(dfs(root.right,count)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//到这一节点的左节点为叶子时 回溯就相当于count没变，继续去找右孩子</span></span><br><span class="line">            count = count + root.right.val;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX on *.* TO 'root'@'8.130.97.224' IDENTIFIED BY 123456;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2023/03/31/markdown/pai-xu/"/>
      <url>/2023/03/31/markdown/pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><span id="more"></span><p>1.选择排序</p><p>时间复杂度O(n^2)，空间复杂度O(1)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] x = {<span class="number">15</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">8</span>};</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>; z &lt; x.length - <span class="number">1</span>; z++) {<span class="comment">//控制循环轮次</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> z + <span class="number">1</span>; i &lt; x.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (x[i] &lt; x[index]) {</span><br><span class="line">            index = i;<span class="comment">//最小值的下标放在index</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (index != z) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> x[z];</span><br><span class="line">        x[z] = x[index];</span><br><span class="line">        x[index] = temp;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a : x) {</span><br><span class="line">        System.out.print(a + <span class="string">"\t"</span>);</span><br><span class="line">    }</span><br><span class="line">    System.out.println();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2.冒泡排序</p><p>时间复杂度O(n^2)，空间复杂度O(1)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] x={<span class="number">15</span>,<span class="number">13</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>};</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; x.length; i++) {<span class="comment">//循环轮次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; x.length-<span class="number">1</span>-i; j++) {</span><br><span class="line">        <span class="keyword">if</span>(x[j]&gt;x[j+<span class="number">1</span>]){</span><br><span class="line">            <span class="type">int</span> temp=x[j];</span><br><span class="line">            x[j]=x[j+<span class="number">1</span>];</span><br><span class="line">            x[j+<span class="number">1</span>]=temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a:x</span><br><span class="line">         ) {</span><br><span class="line">        System.out.println(a+<span class="string">"\t"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>5.插入排序</p><p>时间复杂度**O(n^2)**，空间复杂度O(1)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i]; <span class="comment">// 临时变量用来保存当前值，赋值给前面</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; temp &lt; nums[j - <span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">// temp小于前面的数，然后就进行交换位置</span></span><br><span class="line">                nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 最后将这个临时变量赋值给 j</span></span><br><span class="line">            nums[j] = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>4.快速排序</p><p>时间复杂度O(nlogn)，空间复杂度O(1)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) {</span><br><span class="line">        quickSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="comment">// 定义start从前往后找比基准数大的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="comment">// end从后往前找比基准数小的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 定义基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不能先找前面大的，因为最后可能基准数不满足左边都比基准数小，右边都比基准数大</span></span><br><span class="line">        <span class="keyword">while</span> (start != end) {</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从后往前找比基准数小的，找到停止</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">                <span class="keyword">if</span> (start &gt;= end || nums[end] &lt; index) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                end--;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从前往后找比基准数大的，找到停止</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">                <span class="keyword">if</span> (start &gt;= end || nums[start] &gt; index) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                start++;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找到然后将两个数交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[start];</span><br><span class="line">            nums[start] = nums[end];</span><br><span class="line">            nums[end] = temp;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后相等了之后，就需要将基准数归位了</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i]; <span class="comment">// i就是第一个数</span></span><br><span class="line">        nums[i] = nums[start]; <span class="comment">// start 是基准数</span></span><br><span class="line">        nums[start] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归去将基准数的左边和右边也按照这个去排序</span></span><br><span class="line">        quickSort(nums, i, start - <span class="number">1</span>);</span><br><span class="line">        quickSort(nums, start + <span class="number">1</span>, j);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL操作命令</title>
      <link href="/2023/03/30/markdown/mysql/"/>
      <url>/2023/03/30/markdown/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><span id="more"></span><p>1.进入数据库</p><p><code>mysql -u 用户名 -P 端口号 -p 密码;</code></p><p>2.展示数据库</p><p><code>show database;</code></p><p>3.创建数据库</p><p><code>create database 数据库名称 default character set utf8;</code></p><p>4.选中数据库</p><p><code>use 数据库;</code></p><p>5.创建表</p><p><code>create table 表名(</code></p><p><code>属性 数据类型，</code></p><p><code>属性，数据类型</code></p><p><code>);</code></p><p>6.删除表</p><p><code>drop table 表名;</code></p><p>7.查看表类型</p><p><code>desc 表名;</code></p><p>6.插入表数据</p><p><code>insert into  表名``(属性1，属性2)</code> <code>values(属性1信息，属性2信息);</code></p><p>7.查看表数据</p><p><code>select * from tb_RiceCooker;</code></p><p>8.更新表数据</p><p><code>updata 表名 set 属性换成什么 where 哪个成员;</code></p><p>9.删除表数据</p><p><code>delete from 表名 where 属性;</code></p><p>10.将表属性换一个名字</p><p><code>select name ,age as Age ;</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime类</title>
      <link href="/2023/03/19/markdown/runtime/"/>
      <url>/2023/03/19/markdown/runtime/</url>
      
        <content type="html"><![CDATA[<h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><span id="more"></span><p>exec方法操作dos命令</p><p>1.创建通过Runtime类getRuntime()方法创建Runtime对象</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime r = Runtime.getRuntime();</span><br></pre></td></tr></tbody></table></figure><p>2.引用Runtime对象的exec方法实现操作dos命令</p><p>以下实现关机功能：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.exec("shutdown -s -t,1000");</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
